<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Build.Engine</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Build.Shared.MSBuildConstants">
            <summary>
            Constants that we want to be shareable across all our assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.ToolsPath">
            <summary>
            The name of the property that indicates the tools path
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.ToolsPath64">
            <summary>
            Name of the property that indicates the X64 tools path
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.SdksPath">
            <summary>
            Name of the property that indicates the root of the SDKs folder
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.TreatWarningsAsErrors">
            <summary>
            Name of the property that indicates that all warnings should be treated as errors.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.WarningsAsErrors">
            <summary>
            Name of the property that indicates a list of warnings to treat as errors.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.WarningsAsMessages">
            <summary>
            Name of the property that indicates the list of warnings to treat as messages.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.NuGetAssemblyPathEnvironmentVariableName">
            <summary>
            The name of the environment variable that users can specify to override where NuGet assemblies are loaded from in the NuGetSdkResolver.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.RestoreTargetName">
            <summary>
            The name of the target to run when a user specifies the /restore command-line argument.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentVisualStudioVersion">
            <summary>
            The most current Visual Studio Version known to this version of MSBuild.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentToolsVersion">
            <summary>
            The most current ToolsVersion known to this version of MSBuild.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentToolsVersionAsVersion">
            <summary>
            The most current ToolsVersion known to this version of MSBuild as a Version object.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Shared.MSBuildConstants.CurrentAssemblyVersion">
            <summary>
            The most current VSGeneralAssemblyVersion known to this version of MSBuild.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Shared.MSBuildConstants.CurrentProductVersion">
            <summary>
            Current version of this MSBuild Engine assembly in the form, e.g, "12.0"
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.ItemMetadataNames">
            <summary>
            Constants naming well-known item metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildResultCacheEntry">
            <summary>
            A cache entry representing a build result (task items + build success/failure)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildResultCacheEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildResultCacheEntry.#ctor(System.String,Microsoft.Build.BuildEngine.BuildItem[],System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="name"></param>
            <param name="taskItems"></param>
            <param name="buildResult"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildResultCacheEntry.BuildResult">
            <summary>
            Build result of this target (success, failure, skipped)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildResultCacheEntry.IsEquivalent(Microsoft.Build.BuildEngine.CacheEntry)">
            <summary>
            Returns true if the given cache entry contains equivalent contents
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.CacheEntry">
            <summary>
            Abstract base class for cache entries
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheEntry.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CacheEntry.Name">
            <summary>
            Name of the cache entry
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheEntry.IsEquivalent(Microsoft.Build.BuildEngine.CacheEntry)">
            <summary>
            Returns true if the given cache entry contains equivalent contents
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.PropertyCacheEntry">
            <summary>
            A cache entry holding a name-value pair
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.PropertyCacheEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.PropertyCacheEntry.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.PropertyCacheEntry.Value">
            <summary>
            String value held by this cache entry
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.PropertyCacheEntry.IsEquivalent(Microsoft.Build.BuildEngine.CacheEntry)">
            <summary>
            Returns true if the given cache entry contains equivalent contents
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItemCacheEntry">
            <summary>
            A cache entry holding an array of build items
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemCacheEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemCacheEntry.#ctor(System.String,Microsoft.Build.BuildEngine.BuildItem[])">
            <summary>
            Public constructor
            </summary>
            <param name="name"></param>
            <param name="taskItems"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemCacheEntry.BuildItems">
            <summary>
            Task items held by this cache entry
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemCacheEntry.IsEquivalent(Microsoft.Build.BuildEngine.CacheEntry)">
            <summary>
            Returns true if the given cache entry contains equivalent contents
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Choose">
            <summary>
            Class representing the Choose construct.  The Choose class holds the list
            of When blocks and the Otherwise block.  It also contains other data such
            as the XmlElement, parent project, etc.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Choose.#ctor">
            <summary>
            Empty constructor for the Choose object.  This really should only
            be used by unit tests.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Choose.#ctor(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.GroupingCollection,System.Xml.XmlElement,System.Boolean,System.Int32)">
            <summary>
            Constructor for the Choose object.  Parses the contents of the Choose
            and sets up list of When blocks
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="parentProject"></param>
            <param name="parentGroupingCollection"></param>
            <param name="chooseElement"></param>
            <param name="importedFromAnotherProject"></param>
            <param name="nestingDepth">stack overflow guard</param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Choose.Whens">
            <summary>
            The list of When nodes inside this Choose
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Choose.Otherwise">
            <summary>
            The Otherwise node inside this Choose. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Choose.IsImported">
            <summary>
            True if this Choose is located in an imported project.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Choose.Evaluate(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Boolean,System.Boolean,System.Collections.Hashtable,Microsoft.Build.BuildEngine.ProcessingPass)">
            <summary>
            Evaluates the Choose clause by stepping through each when and evaluating.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="parentPropertyBag"></param>
            <param name="ignoreCondition"></param>
            <param name="honorCondition"></param>
            <param name="conditionedPropertiesTable"></param>
            <param name="pass"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.GroupEnumeratorHelper">
            <summary>
            Helper class that basically just implements an IEnumerable over a
            GroupingCollection.  This object allows you to use the GroupingCollection
            in foreach statements.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupEnumeratorHelper.#ctor(Microsoft.Build.BuildEngine.GroupingCollection,Microsoft.Build.BuildEngine.GroupEnumeratorHelper.ListType)">
            <summary>
            Constructor for the GroupEnumeratorHelper.  At construction
            time, you specify the GroupingCollection to use, and the type
            of enumerator you wish to get.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="groupingCollection"></param>
            <param name="type"></param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupEnumeratorHelper.GetEnumerator">
            <summary>
            Returns an enumerator into the GroupingCollection specified
            at instantiation time.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <returns>IEnumerator</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.GroupingCollection">
            <summary>
            Collection that contains all the Choose, BuildPropertyGroup and BuildItemGroup blocks
            in a Project.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.#ctor(Microsoft.Build.BuildEngine.GroupingCollection)">
            <summary>
            GroupingCollection constructor.  Basically just initializes internal
            data structures.
            </summary>
            <remarks>
            </remarks>
            <param name="parentGroupingCollection">The parent collection of this grouping collection, null for the master collection</param>
            <owner>DavidLe</owner>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.ChangePropertyGroupCount(System.Int32)">
            <summary>
            Encapsulates updating the property group count for this and any parent grouping collections.
            </summary>
            <param name="delta"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.GroupingCollection.PropertyGroupCount">
            <summary>
            Read-only property returns the number of PropertyGroups stored within the collection.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.GroupingCollection.SyncRoot">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.GroupingCollection.IsSynchronized">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.PropertyCopyTo(System.Array,System.Int32)">
            <summary>
            This ICollection method copies the contents of this collection to an 
            array.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.GetPropertyEnumerator">
            <summary>
            This method returns an IEnumerator object, which allows
            the caller to enumerate through the BuildPropertyGroup objects
            contained in this GroupCollection.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.ChangeItemGroupCount(System.Int32)">
            <summary>
            Encapsulates updating the item group count for this and any parent grouping collections.
            </summary>
            <param name="delta"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.GroupingCollection.ItemGroupCount">
            <summary>
            Read-only property returns the number of ItemGroups stored within the collection.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.ItemCopyTo(System.Array,System.Int32)">
            <summary>
            This ICollection method copies the contents of this collection to an 
            array.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="array"></param>
            <param name="index"></param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.GetItemEnumerator">
            <summary>
            This method returns an IEnumerator object, which allows
            the caller to enumerate through the BuildItemGroup objects
            contained in this GroupCollection.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.GetEnumerator">
            <summary>
            This IEnumerable method returns an IEnumerator object, which allows
            the caller to enumerate through the Grouping objects (Choose, BuildPropertyGroup,
            and BuildItemGroup) contained in this BuildItemGroupCollection.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAtBeginning(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Adds a new BuildPropertyGroup as the first element of our collection.
            This method does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newPropertyGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAfter(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Adds a new BuildPropertyGroup to our collection, at the specified insertion
            point.  This method does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newPropertyGroup"></param>
            <param name="insertionPoint"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAtEnd(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Adds a new BuildPropertyGroup as the last element of our collection.
            This method does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newPropertyGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemovePropertyGroup(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Removes a BuildPropertyGroup from our collection.  This method does nothing
            to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="propertyGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAfter(Microsoft.Build.BuildEngine.BuildItemGroup,Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Adds a new BuildItemGroup to our collection, at the specified insertion
            point.  This method does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newItemGroup"></param>
            <param name="insertionPoint"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAtEnd(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Adds a new BuildItemGroup as the last element of our collection.
            This method does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newItemGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveItemGroup(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Removes a BuildItemGroup from our collection.  This method does nothing
            to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="itemGroupToRemove"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAfter(Microsoft.Build.BuildEngine.IItemPropertyGrouping,Microsoft.Build.BuildEngine.IItemPropertyGrouping)">
            <summary>
            Inserts a new item group after the specified insertion point.  This method
            does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newGroup"></param>
            <param name="insertionPoint"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.InsertAtEnd(Microsoft.Build.BuildEngine.IItemPropertyGrouping)">
            <summary>
            Inserts a new BuildItemGroup at the end of the list of ItemGroups.  This method
            does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="newGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveChoose(Microsoft.Build.BuildEngine.Choose)">
            <summary>
            Removes a Choose block from the list.  This method does nothing to manipulate
            the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="choose"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.Clear">
            <summary>
            Removes all ItemGroups, PropertyGroups and Choose's from our
            collection.  This method does nothing to manipulate the project's XML content.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveAllPropertyGroups">
            <summary>
            Removes all PropertyGroups from the collection.  Recurses into Chooses
            in the collection removing PropertyGroups as well.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveAllPropertyGroupsByCondition(System.String,System.Boolean)">
            <summary>
            Removes all PropertyGroups with a given condtion from the collection.
            Recurses into Chooses in the collection removing PropertyGroups as well.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveAllItemGroups">
            <summary>
            Removes all ItemGroups from the collection.
            Recurses into Chooses in the collection removing ItemGroups as well.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveAllItemGroupsByCondition(System.String)">
            <summary>
            Removes all ItemGroups with a given condtion from the collection.
            Recurses into Chooses in the collection removing ItemGroups as well.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="condition"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GroupingCollection.RemoveItemsByName(System.String)">
            <summary>
            Removes all Items of a given typoe from the collection.
            Recurses into Chooses in the collection removing Items as well.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="itemName"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.When">
            <summary>
            Class representing a When block (also used to represent the Otherwise
            block on a Choose).
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.When.#ctor(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.GroupingCollection,System.Xml.XmlElement,System.Boolean,Microsoft.Build.BuildEngine.When.Options,System.Int32)">
            <summary>
            Constructor for the When block.  Parses the contents of the When block (property
            groups, item groups, and nested chooses) and stores them.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="parentProject"></param>
            <param name="parentGroupingCollection"></param>
            <param name="whenElement"></param>
            <param name="importedFromAnotherProject"></param>
            <param name="options"></param>
            <param name="nestingDepth">stack overflow guard</param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.When.Condition">
            <summary>
            Property containing the condition for the When clause.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <returns>string</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.When.ConditionAttribute">
            <summary>
            Property containing the condition for the When clause.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <returns>string</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.When.PropertyAndItemLists">
            <summary>
            The collection of all sub-groups (item/property groups and chooses) inside this When
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.When.ProcessWhenChildren(System.Xml.XmlElement,Microsoft.Build.BuildEngine.Project,System.Boolean,System.Int32)">
            <summary>
            Helper method for processing the children of a When. Only parses Choose,
            PropertyGroup, and ItemGroup. All other tags result in an error.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="parentNode"></param>
            <param name="parentProjectForChildren"></param>
            <param name="importedFromAnotherProject"></param>
            <param name="options"></param>
            <param name="nestingDepth">Number of parent &lt;Choose&gt; elements this is nested inside</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.When.EvaluateCondition(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.Hashtable)">
            <summary>
            Evaluates a When clause.  Checks if the condition is true, and if it is,
            applies all of the contained property group, item lists, and import statements.
            Returns true if the When clause is process (because the condition is true), false
            otherwise.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="parentPropertyBag"></param>
            <param name="conditionedPropertiesTable"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.When.Evaluate(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Boolean,System.Boolean,System.Collections.Hashtable,Microsoft.Build.BuildEngine.ProcessingPass)">
            <summary>
            Evaluates a When clause.  Checks if the condition is true, and if it is,
            applies all of the contained property group, item lists, and import statements.
            Returns true if the When clause is process (because the condition is true), false
            otherwise.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="parentPropertyBag"></param>
            <param name="ignoreCondition"></param>
            <param name="honorCondition"></param>
            <param name="conditionedPropertiesTable"></param>
            <param name="pass"></param>
            <returns>bool</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.CopyOnWriteHashtable">
            <summary>
            A hashtable wrapper that defers copying until the data is written.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.#ctor(System.StringComparer)">
            <summary>
            Construct as a traditional data-backed hashtable.
            </summary>
            <param name="stringComparer"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.#ctor(System.Int32,System.StringComparer)">
            <summary>
            Construct with specified initial capacity. If the capacity is known
            up front, specifying it avoids unnecessary rehashing operations
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.#ctor(System.Collections.IDictionary,System.StringComparer)">
            <summary>
            Construct over an IDictionary instance.
            </summary>
            <param name="dictionary"></param>
            <param name="stringComparer">The string comparer to use.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.#ctor(Microsoft.Build.BuildEngine.CopyOnWriteHashtable)">
            <summary>
            Construct a shallow copy over another instance of this class.
            </summary>
            <param name="that"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.ConstructFrom(Microsoft.Build.BuildEngine.CopyOnWriteHashtable)">
            <summary>
            Implementation of construction logic.
            </summary>
            <param name="that"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.IsShallowCopy">
            <summary>
            Whether or not this CopyOnWriteHashtable is currently a shallow or deep copy.
            This state can change from true->false when this hashtable is written to.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.Clone">
            <summary>
            Clone this.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.ReadOperation">
            <summary>
            Returns a hashtable instance for reading from.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CopyOnWriteHashtable.WriteOperation">
            <summary>
            Returns a hashtable instance for writting to.
            Clones the readonly hashtable if necessary to create a writeable version.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.DualQueue`1">
            <summary>
            This class provides a multiple-writer, single-reader queue. This queue can be written to
            by multiple threads at a time, but it is designed to be only read by a single thread.
            The way is works is as follows: we have two queues, one for reading from, and one for
            writing to. The writing queue is protected by a mutex so that multiple threads can write to
            it. When a reading thread wants to read all the queued items, we swap the writing queue
            for another (empty) one. The writing queue then becomes the reading queue, and the empty
            queue becomes the new writing queue. This allows the reader to safely read from the swapped
            out queue without regard to new items being written to the other queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DualQueue`1.QueueReadyEvent">
            <summary>
            Event indicating that there are items in the queue
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DualQueue`1.QueueEmptyEvent">
            <summary>
            Event indicating that the queue is empty
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DualQueue`1.Count">
            <summary>
            Primairly used for testing to get the count of items posted to the queue
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DualQueue`1.WritingQueueCount">
            <summary>
            The count of items in the writing queue. Used to decide if the queue is backing up
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.Enqueue(`0)">
            <summary>
            Adds the given item to the queue.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.EnqueueArray(`0[])">
            <summary>
            Adds the given items to the queue.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.Clear">
            <summary>
            Clear the contents of the queue
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.Dequeue">
            <summary>
            Gets an item off the queue.
            </summary>
            <returns>The top item off the queue, or null if queue is empty.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.Peek">
            <summary>
            Get a pointer to the top item without dequeueing it
            </summary>
            <returns>The top item off the queue, or null if queue is empty.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.GetTopItem(System.Boolean)">
            <summary>
            Finds the top item in the queue. If passed in argument is true the top value is dequeued
            </summary>
            <returns>The top item off the queue, or null if queue is empty.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.GetReadingQueue">
            <summary>
            Returns one of the two behind-the-scenes queues that is not being
            used for posting into.
            </summary>
            <returns>The queue to read from.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DualQueue`1.Contains(`0)">
            <summary>
            Primairly used for unit tests to verify a item is in one of the internal queues
            </summary>
            <param name="item">Items to check for in the two internal queues</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.queueReadyEvent">
            <summary>
            This event is set when the queue contains items to read.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.queueEmptyEvent">
            <summary>
            This event is set when the queue is empty
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.queueLock">
            <summary>
            This object protects the posting queue.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.queue">
            <summary>
            This queue reference serves as the "posting queue". This queue reference
            points to one of the two queues that are swapped behind the scenes.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.backingQueueA">
            <summary>
            One of the two behind-the-scenes queues that are swapped.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.backingQueueB">
            <summary>
            One of the two behind-the-scenes queues that are swapped.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.DualQueue`1.writingQueueCount">
            <summary>
            Count of the current writer queue - we only own the reader queue in Count so we have to keep 
            the count for the writer queue separately.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.HashTableUtility">
            <summary>
            Tools for working with Hashtables.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.HashTableUtility.Compare(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Compares the given hashtables.
            </summary>
            <owner>SumedhK</owner>
            <param name="h1">May be null</param>
            <param name="h2">May be null</param>
            <returns>
            -1, if first hashtable is "less than" the second one
             0, if hashtables have identical keys and equivalent (case-insensitive) values
            +1, if first hashtable is "greater than" the second one
            </returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.AndExpressionNode">
            <summary>
            Performs logical AND on children
            Does not update conditioned properties table
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.AndExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as boolean
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EqualExpressionNode">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EqualExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numbers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EqualExpressionNode.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compare booleans
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EqualExpressionNode.Compare(System.String,System.String)">
            <summary>
            Compare strings
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ConditionEvaluationState">
            <summary>
            All the state necessary for the evaluation of conditionals so that the expression tree 
            is stateless and reusable
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.FunctionCallExpressionNode">
            <summary>
            Evaluates a function expression, such as "Exists('foo')"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FunctionCallExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate node as boolean
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FunctionCallExpressionNode.ExpandArgumentForScalarParameter(System.String,Microsoft.Build.BuildEngine.GenericExpressionNode,Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Expands properties and items in the argument, and verifies that the result is consistent
            with a scalar parameter type.
            </summary>
            <param name="function">Function name for errors</param>
            <param name="argumentNode">Argument to be expanded</param>
            <returns>Scalar result</returns>
            <owner>danmose</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FunctionCallExpressionNode.VerifyArgumentCount(System.Int32,Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Check that the number of function arguments is correct.
            </summary>
            <param name="expected"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.GenericExpressionNode">
            <summary>
            Base class for all expression nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GenericExpressionNode.GetExpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Value after any item and property expressions are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GenericExpressionNode.GetUnexpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Value before any item and property expressions are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GenericExpressionNode.ResetState">
            <summary>
            If any expression nodes cache any state for the duration of evaluation, 
            now's the time to clean it up
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GenericExpressionNode.Evaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            The main evaluate entry point for expression trees
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.GreaterThanExpressionNode">
            <summary>
            Compares for left > right
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GreaterThanExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numerically
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.GreaterThanOrEqualExpressionNode">
            <summary>
            Compares for left >= right
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.GreaterThanOrEqualExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numerically
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Build.BuildEngine.LessThanExpressionNode" -->
        <member name="M:Microsoft.Build.BuildEngine.LessThanExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numerically
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Build.BuildEngine.LessThanOrEqualExpressionNode" -->
        <member name="M:Microsoft.Build.BuildEngine.LessThanOrEqualExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numerically
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.MultipleComparisonNode">
            <summary>
            Evaluates as boolean and evaluates children as boolean, numeric, or string.
            Order in which comparisons are attempted is numeric, boolean, then string.
            Updates conditioned properties table.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.MultipleComparisonNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numbers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.MultipleComparisonNode.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compare booleans
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.MultipleComparisonNode.Compare(System.String,System.String)">
            <summary>
            Compare strings
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.MultipleComparisonNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluates as boolean and evaluates children as boolean, numeric, or string.
            Order in which comparisons are attempted is numeric, boolean, then string.
            Updates conditioned properties table.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.MultipleComparisonNode.ResetState">
            <summary>
            Reset temporary state
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NotEqualExpressionNode">
            <summary>
            Compares for inequality
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NotEqualExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numbers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NotEqualExpressionNode.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compare booleans
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NotEqualExpressionNode.Compare(System.String,System.String)">
            <summary>
            Compare strings
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NotExpressionNode">
            <summary>
            Performs logical NOT on left child
            Does not update conditioned properties table
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NotExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as boolean
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NotExpressionNode.GetUnexpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Returns unexpanded value with '!' prepended. Useful for error messages.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NotExpressionNode.GetExpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Returns expanded value with '!' prepended. Useful for error messages.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NumericComparisonExpressionNode">
            <summary>
            Evaluates a numeric comparison, such as less-than, or greater-or-equal-than
            Does not update conditioned properties table.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NumericComparisonExpressionNode.Compare(System.Double,System.Double)">
            <summary>
            Compare numbers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NumericComparisonExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as boolean
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NumericExpressionNode">
            <summary>
            Represents a number - evaluates as numeric.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NumericExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as boolean
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NumericExpressionNode.NumericEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as numeric
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NumericExpressionNode.CanBoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Whether it can be evaluated as a boolean: never allowed for numerics
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NumericExpressionNode.ResetState">
            <summary>
            If any expression nodes cache any state for the duration of evaluation, 
            now's the time to clean it up
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.OperandExpressionNode">
            <summary>
            Base class for all nodes that are operands (are leaves in the parse tree)
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.OperatorExpressionNode">
            <summary>
            Base class for nodes that are operators (have children in the parse tree)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.OperatorExpressionNode.leftChild">
            <summary>
            Storage for the left and right children of the operator
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.OperatorExpressionNode.rightChild">
            <summary>
            Storage for the left and right children of the operator
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OperatorExpressionNode.NumericEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Numeric evaluation is never allowed for operators
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OperatorExpressionNode.CanBoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Whether boolean evaluation is allowed: always allowed for operators
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OperatorExpressionNode.CanNumericEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Whether the node can be evaluated as a numeric: by default,
            this is not allowed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OperatorExpressionNode.GetExpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Value after any item and property expressions are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OperatorExpressionNode.GetUnexpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Value before any item and property expressions are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OperatorExpressionNode.ResetState">
            <summary>
            If any expression nodes cache any state for the duration of evaluation, 
            now's the time to clean it up
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.OperatorExpressionNode.LeftChild">
            <summary>
            Storage for the left child
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.OperatorExpressionNode.RightChild">
            <summary>
            Storage for the right child
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.OrExpressionNode">
            <summary>
            Performs logical OR on children
            Does not update conditioned properties table
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.OrExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as boolean
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Parser">
             <summary>
             This class implements the grammar for complex conditionals.
            
             The usage is:
                Parser p = new Parser(CultureInfo);
                ExpressionTree t = p.Parse(expression, XmlNode);
            
             The expression tree can then be evaluated and re-evaluated as needed.
             </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Parser.LogBuildEventContext">
            <summary>
             Location contextual information which are attached to logging events to 
             say where they are in relation to the process, engine, project, target,task which is executing
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Parser.LoggingServices">
            <summary>
            Engine Logging Service reference where events will be logged to
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Scanner">
            <summary>
            Class:       Scanner
            This class does the scanning of the input and returns tokens.
            The usage pattern is:
               Scanner s = new Scanner(expression, CultureInfo)
               do {
                 s.Advance();
               while (s.IsNext(Token.EndOfInput));
            
             After Advance() is called, you can get the current token (s.CurrentToken),
             check it's type (s.IsNext()), get the string for it (s.NextString()).
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Scanner.EndOfInput">
            <summary>
            Lazily format resource string to help avoid (in some perf critical cases) even loading
            resources at all.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scanner.GetErrorResource">
            <summary>
            If the lexer errors, it has the best knowledge of the error message to show. For example,
            'unexpected character' or 'illformed operator'. This method returns the name of the resource
            string that the parser should display.
            </summary>
            <remarks>Intentionally not a property getter to avoid the debugger triggering the Assert dialog</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scanner.Advance">
             <summary>
             Advance
             returns true on successful advance
                 and false on an erroneous token
            
             Doesn't return error until the bogus input is encountered.
             Advance() returns true even after EndOfInput is encountered.
             </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scanner.ParsePropertyOrItemMetadata">
            <summary>
            Parses either the $(propertyname) syntax or the %(metadataname) syntax, 
            and returns the parsed string beginning with the '$' or '%', and ending with the
            closing parenthesis.
            </summary>
            <returns></returns>
            <owner>RGoel, DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scanner.ScanForPropertyExpressionEnd(System.String,System.Int32)">
            <summary>
            Scan for the end of the property expression
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scanner.ParseProperty">
            <summary>
            Parses a string of the form $(propertyname).
            </summary>
            <returns></returns>
            <owner>RGoel, DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scanner.ParseItemMetadata">
            <summary>
            Parses a string of the form %(itemmetadataname).
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.StringExpressionNode">
            <summary>
            Node representing a string
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.StringExpressionNode.BoolEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as boolean
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.StringExpressionNode.NumericEvaluate(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Evaluate as numeric
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.StringExpressionNode.GetUnexpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Value before any item and property expressions are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.StringExpressionNode.GetExpandedValue(Microsoft.Build.BuildEngine.ConditionEvaluationState)">
            <summary>
            Value after any item and property expressions are expanded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.StringExpressionNode.ResetState">
            <summary>
            If any expression nodes cache any state for the duration of evaluation, 
            now's the time to clean it up
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Token">
            <summary>
            This class represents a token in the Complex Conditionals grammar.  It's
            really just a bag that contains the type of the token and the string that
            was parsed into the token.  This isn't very useful for operators, but
            is useful for strings and such.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Token.TokenType">
            <summary>
            Valid tokens
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Token.#ctor(Microsoft.Build.BuildEngine.Token.TokenType,System.String)">
            <summary>
            Constructor takes the token type and the string that
            represents the token
            </summary>
            <param name="type"></param>
            <param name="tokenString"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Token.IsToken(Microsoft.Build.BuildEngine.Token.TokenType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BatchingEngine">
            <summary>
            This class is used by objects in the build engine that have the ability to execute themselves in batches, to partition the
            items they consume into "buckets", based on the values of select item metadata.
            </summary>
            <remarks>
            What batching does
            
            Batching partitions the items consumed by the batchable object into buckets, where each bucket 
            contains a set of items that have the same value set on all item metadata consumed by the object. 
            Metadata consumed may be unqualified, for example %(m), or qualified by the item list to which it 
            refers, for example %(a.m).
            
            If metadata is qualified, for example %(a.m), then this is considered distinct to metadata with the 
            same name on a different item type. For example, %(a.m) is distinct to %(b.m), and items of type �b� 
            are considered to always have a blank value for %(a.m). This means items of type �b� will only be 
            placed in buckets where %(a.m) is blank. However %(a.m) is equivalent to %(m) on items of type �a�.
            
            There is an extra ambiguity rule: every items consumed by the object must have an explicit value for 
            every piece of unqualified metadata. For example, if @(a), %(m), and %(a.n) are consumed, every item 
            of type �a� must have a value for the metadata �m� but need not all necessarily have a value for the 
            metadata �n�. This rule eliminates ambiguity about whether items that do not define values for an 
            unqualified metadata should go in all buckets, or just into buckets with a blank value for 
            that metadata.
            
            For example 
            
            <ItemGroup>
            <a Include='a1;a2'>
              <n>m0</n>
            </a>
            <a Include='a3'>
              <n>m1</n>
            </a>
            <b Include='b1'>
              <n>n0</n>
            </b>
            <b Include='b2;b3'>
              <n>n1</n>
            </b>
            <b Include='b4'/>
            </ItemGroup>
            
            <Target Name="t" >
              <Message Text="a={@(a).%(a.n)} b={@(b).%(b.n)}" />
            </Target>
            
            Will produce 5 buckets: 
            
            a={a1;a2.m0} b={.}
            a={a3.m1} b={.}
            a={.} b={b1.n0}
            a={.} b={b2;b3.n1}
            a={.} b={b4.}
            
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BatchingEngine.PrepareBatchingBuckets(System.Xml.XmlNode,System.Collections.Generic.List{System.String},Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Determines how many times the batchable object needs to be executed (each execution is termed a "batch"), and prepares
            buckets of items to pass to the object in each batch.
            </summary>
            <returns>ArrayList containing ItemBucket objects, each one representing an execution batch.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BatchingEngine.PrepareBatchingBuckets(System.Xml.XmlNode,System.Collections.Generic.List{System.String},Microsoft.Build.BuildEngine.Lookup,System.String)">
            <summary>
            Determines how many times the batchable object needs to be executed (each execution is termed a "batch"), and prepares
            buckets of items to pass to the object in each batch.
            </summary>
            <param name="parentNode"></param>
            <param name="batchableObjectParameters"></param>
            <param name="lookup"></param>
            <param name="implicitBatchableItemType">Any item type that can be considered an implicit input to this batchable object.
            This is useful for items inside targets, where the item name is plainly an item type that's an "input" to the object.</param>
            <returns>ArrayList containing ItemBucket objects, each one representing an execution batch.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BatchingEngine.GetItemListsToBeBatched(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.String,Microsoft.Build.BuildEngine.MetadataReference},System.Collections.Hashtable,Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Of all the item lists that are referenced in this batchable object, which ones should we
            batch on, and which ones should we just pass in wholesale to every invocation of the 
            target/task?
            
            Rule #1.  If the user has referenced any *qualified* item metadata such as %(EmbeddedResource.Culture),
            then that item list "EmbeddedResource" will definitely get batched.
            
            Rule #2.  For all the unqualified item metadata such as %(Culture), we make sure that 
            every single item in every single item list being passed into the task contains a value
            for that metadata.  If not, it's an error.  If so, we batch all of those item lists.
            
            All other item lists will not be batched, and instead will be passed in wholesale to all buckets.
            </summary>
            <returns>Hashtable containing the item names that should be batched.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BatchingEngine.BucketConsumedItems(System.Xml.XmlNode,Microsoft.Build.BuildEngine.Lookup,System.Collections.Hashtable,System.Collections.Generic.Dictionary{System.String,Microsoft.Build.BuildEngine.MetadataReference})">
            <summary>
            Partitions the items consumed by the batchable object into buckets, where each bucket contains a set of items that
            have the same value set on all item metadata consumed by the object.
            </summary>
            <remarks>
            PERF NOTE: Given n items and m batching metadata that produce l buckets, it is usually the case that n > l > m,
            because a batchable object typically uses one or two item metadata to control batching, and only has a handful of
            buckets. The number of buckets is typically only large if a batchable object is using single-item batching
            (where l == n). Any algorithm devised for bucketing therefore, should try to minimize n and l in its complexity
            equation. The algorithm below has a complexity of O(n*lg(l)*m/2) in its comparisons, and is effectively O(n) when
            l is small, and O(n*lg(n)) in the worst case as l -> n. However, note that the comparison complexity is not the
            same as the operational complexity for this algorithm. The operational complexity of this algorithm is actually
            O(n*m + n*lg(l)*m/2 + n*l/2 + n + l), which is effectively O(n^2) in the worst case. The additional complexity comes
            from the array and metadata operations that are performed. However, those operations are extremely cheap compared
            to the comparison operations, which dominate the time spent in this method.
            </remarks>
            <returns>ArrayList containing ItemBucket objects (can be empty), each one representing an execution batch.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BatchingEngine.GetItemMetadataValues(System.Xml.XmlNode,Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,Microsoft.Build.BuildEngine.MetadataReference})">
            <summary>
            Gets the values of the specified metadata for the given item.
            The keys in the dictionary returned may be qualified and/or unqualified, exactly
            as they are found in the metadata reference. 
            For example if %(x) is found, the key is "x", if %(z.x) is found, the key is "z.x".
            This dictionary in each bucket is used by Expander to expand exactly the same metadata references, so
            %(x) is expanded using the key "x", and %(z.x) is expanded using the key "z.x".
            </summary>
            <returns>the metadata values</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildRequest">
            <summary>
            Request for a linear evaluation of a list of targets in a project
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildRequest.#ctor(System.Int32,System.String,System.String[],Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Called by the Engine
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildRequest.#ctor(System.Int32,System.String,System.String[],System.Collections.IDictionary,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Called by the TEM ("generated" request)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.ParentEngine">
            <summary>
            The engine is set inside the proxy prior to enqueing the request
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.OutputsByTarget">
            <summary>
            The outputs of the build request
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.ResultByTarget">
            <summary>
            Build result per target
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.BuildSucceeded">
            <summary>
            The result of the build request
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.TargetNames">
            <summary>
            The list of targets that need to be evaluated
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.BuildSettings">
            <summary>
            The build settings
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.ProjectToBuild">
            <summary>
            The project to be evaluated
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.HandleId">
            <summary>
            Maps the BuildRequest to the TaskExecutionContext.
            If BuildRequest originated in the Engine itself in CreateLocalBuildRequest, HandleId is EngineCallback.invalidEngineHandle.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.IsGeneratedRequest">
            <summary>
            Returns true if this BuildRequest came from a task, rather than
            the Host Engine itself.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.IsExternalRequest">
            <summary>
            This is set to true if the build request was sent from the parent process
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildRequest.RestoredFromCache">
            <summary>
            True if the build results in this requests have been restored from the cache
            (in which case there's no point in caching them again)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildRequest.RestoreNonSerializedDefaults">
            <summary>
            Restore the default values which do not travel over the wire
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildRequest.InitializeFromCachedResult(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            Initialize this build request with a cached build result
            </summary>
            <param name="cachedResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildRequest.GetTargetNamesList">
            <summary>
            Provides unique identifers for the caching system so we can retrieve this set of targets 
            at a later time. This list should be either a null array or a list of strings which are not null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildRequest.AddTaskExecutionTime(System.Int64)">
            <summary>
            This method is called after a task finishes execution in order to add the time spent executing
            the task to the total used by the build request
            </summary>
            <param name="executionTime">execution time of the last task</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildResult">
            <summary>
            This class is a container for build results travelling from the engine to the node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildResult.#ctor(System.Collections.IDictionary,System.Collections.Hashtable,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildResult.#ctor(Microsoft.Build.BuildEngine.BuildResult,System.Boolean)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildResult.TotalTime">
            <summary>
            Total time spent on the build request measured from the time it is received to the time build
            result is created. This number will be 0 if the result was in the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildResult.EngineTime">
            <summary>
            Total time spent in the engine working on the build request. This number will be 0 if the result
            was in the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildResult.TaskTime">
            <summary>
            Total time spent in the running tasks for the build request. This number will be 0 if the result
            was in the cache.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildResult.ConvertToTaskItems">
            <summary>
            BuildItems are passed around internally, including across the wire. Before passing these
            to tasks, they need to be converted into TaskItems using this method.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildTask">
            <summary>
            This class represents a single task.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.#ctor(System.Xml.XmlElement,Microsoft.Build.BuildEngine.Target,System.Boolean)">
            <summary>
            This constructor initializes a persisted task from an existing task
            element which exists either in the main project file or one of the 
            imported files.
            </summary>
            <param name="taskElement"></param>
            <param name="parentTarget"></param>
            <param name="importedFromAnotherProject"></param>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.#ctor">
            <summary>
            Default constructor.  This is not allowed, because it leaves the 
            BuildTask in a bad state. But we have to have it, otherwise FXCop 
            complains.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.TaskXmlElement">
            <summary>
            Read-only accessor for XML element representing this task.
            </summary>
            <value></value>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.Name">
            <summary>
            Accessor for the task's "name" element.  
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.Condition">
            <summary>
            Accessor for the task's "condition".
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.ContinueOnError">
            <summary>
            Accessor for the task's "ContinueOnError".
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.Type">
            <summary>
            System.Type object corresponding to the task class that implements 
            the functionality that runs this task object.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.HostObject">
            <summary>
            Accessor for the "host object" for this task.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildTask.ParentTarget">
            <summary>
            Accessor for parent Target object.
            </summary>
            <value></value>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.GetParameterNames">
            <summary>
            This retrieves the list of all parameter names from the element 
            node of this task. Note that it excludes anything that a specific 
            property is exposed for or that isn't valid here (Name, Condition, 
            ContinueOnError).
            
            Note that if there are none, it returns string[0], rather than null, 
            as it makes writing foreach statements over the return value so
            much simpler.
            </summary>
            <returns></returns>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.GetParameterValue(System.String)">
            <summary>
            This retrieves an arbitrary attribute from the task element.  These
            are attributes that the project author has placed on the task element
            that have no meaning to MSBuild other than that they get passed to the
            task itself as arguments.  
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.SetParameterValue(System.String,System.String,System.Boolean)">
            <summary>
            This sets an arbitrary attribute on the task element.  These
            are attributes that the project author has placed on the task element
            that get passed in to the task.
            
            This optionally escapes the parameter value so it will be treated as a literal.
            </summary>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
            <param name="treatParameterValueAsLiteral"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.SetParameterValue(System.String,System.String)">
            <summary>
            This sets an arbitrary attribute on the task element.  These
            are attributes that the project author has placed on the task element
            that get passed in to the task.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.AddOutputItem(System.String,System.String)">
            <summary>
            Adds an Output tag to this task element
            </summary>
            <param name="taskParameter"></param>
            <param name="itemName"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.AddOutputItem(System.String,System.String,System.String)">
            <summary>
            Adds an Output tag to this task element, with a condition
            </summary>
            <param name="taskParameter"></param>
            <param name="itemName"></param>
            <param name="condition">May be null</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.AddOutputProperty(System.String,System.String)">
            <summary>
            Adds an Output tag to this task element
            </summary>
            <param name="taskParameter"></param>
            <param name="propertyName"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.Execute">
            <summary>
            Runs the task associated with this object.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildTask.MarkTaskAsDirty">
            <summary>
            Indicates that something has changed within the task element, so the project
            needs to be saved and re-evaluated at next build.  Send the "dirtiness" 
            notification up the chain.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.CacheScope">
            <summary>
            The purpose of this class is to contain a set of cache entries which belong to
            a particular scope. The scope is defined as string (project file name) X set of
            string ( global properties ). This class is thread safe and can be used from multiple
            threads. It is also lock free for multiple readers (via use of Hashtable as
            the backing store).
            We use a ReaderWriterLock in here so that when a request comes in for multiple
            cache entries we guarantee that all the entries come from a consistent view of 
            the cache at some point in time. Without a lock we might get a write in between
            the reads and half of the entries would represent the values before the write and 
            the rest after. This is unacceptable as at no point in time the cache actually contained
            the entries that would be returned without the lock. This is required by the caching APIs
            provided to the tasks which support retrieving multiple entries at once.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.#ctor(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            This constructor creates a scope for a particular name and set of properties
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CacheScope.ScopeProperties">
            <summary>
            Set of cached project file properties
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CacheScope.ScopeName">
            <summary>
            Usually the project file name
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.CacheScope.ScopeToolsVersion">
            <summary>
            Usually the version of the toolset used
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.AddCacheEntry(Microsoft.Build.BuildEngine.CacheEntry)">
            <summary>
            This method adds an entry to the cache in a thread-safe way
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.AddCacheEntries(Microsoft.Build.BuildEngine.CacheEntry[])">
            <summary>
            This method adds multiple entries to the cache in a thread-safe way.
            </summary>
            <param name="cacheEntries"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.AddCacheEntryInternal(Microsoft.Build.BuildEngine.CacheEntry)">
            <summary>
            This method adds an entry to the cache, without taking a lock
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.GetCacheEntry(System.String)">
            <summary>
            This method return the cache entry for a given name. If the cache entry doesn't exist it
            return null. This method is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.GetCacheEntries(System.String[])">
            <summary>
            This method returns the requested set of cache entries. This method is thread safe
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.ClearCacheEntry(System.String)">
            <summary>
            This method removes an entry from the cache if it exists and does nothing if it doesn't exist
            This method is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.ContainsCacheEntry(System.String)">
            <summary>
            This method returns true if the cache entry for a given name is present in the cache. 
            This method is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.AddCacheEntryForBuildResults(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method adds cached results for each target results for which are contained inside
            the build result. This method is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheScope.GetCachedBuildResult(Microsoft.Build.BuildEngine.BuildRequest,System.Collections.ArrayList@)">
            <summary>
            Get a cached build result if available for the given request. This method is thread safe.
            </summary>
            <param name="buildRequest"></param>
            <param name="actuallyBuiltTargets"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.CacheContentType">
            <summary>
            Internal enum for distinguishing between cache content types
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.CacheManager">
            <summary>
            This class is responsible for maintaining the set of object 
            cached during a build session. This class is not thread safe and 
            is intended to be used from the Engine thread.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheManager.GetCacheScope(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            This method return a cache scope with particular name and properties. If the cache
            scope doesn't exist it will be created. This method is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheManager.SetCacheEntries(Microsoft.Build.BuildEngine.CacheEntry[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Sets multiple cache entries for the given scope
            </summary>
            <param name="entries"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheManager.GetCacheEntries(System.String[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Gets multiple cache entries from the given scope.
            </summary>
            <param name="names"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheManager.GetCachedBuildResult(Microsoft.Build.BuildEngine.BuildRequest,System.Collections.ArrayList@)">
            <summary>
            This method get a result from the cache if every target is cached.
            If any of the target are not present in the cache null is returned. This method is not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheManager.ClearCacheScope(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Clear a particular scope
            </summary>
            <param name="projectName"></param>
            <param name="buildPropertyGroup"></param>
            <param name="toolsVersion"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.CacheManager.ClearCache">
            <summary>
            Clears the whole contents of the cache.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EngineCommand">
            <summary>
            Base class for classes which wrap operations that should be executed on the engine thread
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.RequestStatusEngineCommand">
            <summary>
            Wrapper class for a node status request
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.HostBuildRequestCompletionEngineCommand">
            <summary>
            Wrapper class for a reporting completion of a host build request to the engine
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ReportExceptionEngineCommand">
            <summary>
            Wrapper class for a reporting completion of a host build request to the engine
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ChangeTraversalTypeCommand">
            <summary>
            Wrapper class for a changing the traversal approach used by the TEM
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ChangeTraversalTypeCommand.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create a command that will switch the traversal of the system to breadthFirst traversal or depth first traveral. 
            changeLocalTraversalOnly is used to determine whether or not to change the traversal for the whole system or only the current node. 
            changeLocalTraversalOnly is set to true in the when a node is first started and in the updateNodeSettings method as these traversal changes are for the local node only. The reason 
            is because updateNodeSettings is called when the parent has told the node to switch traversal types, there is no need to forward the change to the engine again.
            Also, when a node starts up it is set to breadth first traversal, this is the default so the parent engine need not be notified of this change.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EventRedirector">
            <summary>
            This is a small redirector that decorates the events that are forwarded by
            a particular node logger with the id of the central logger and passes them to the engine
            logging service
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventRedirector.#ctor(System.Int32,Microsoft.Build.BuildEngine.EngineLoggingServices)">
            <summary>
            Initalize this class with a central logger id identifying the central logger to which
            these events should be forwarded and a logging service that will do the forwarding
            </summary>
            <param name="loggerId">central logger id</param>
            <param name="loggingService">engine logging service</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventRedirector.Microsoft#Build#Framework#IEventRedirector#ForwardEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            This method is called by the node loggers to forward the events to cenral logger
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ExecutionContext">
            <summary>
            Base class for data container shared between the Engine data domain and the TaskExecutionModule (TEM)
            data domain
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExecutionContext.#ctor(System.Int32,System.Int32,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ExecutionContext.HandleId">
            <summary>
            The token id corresponding to this context
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ExecutionContext.NodeIndex">
            <summary>
            The node on which this context is being executed 
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ExecutionContext.BuildEventContext">
            <summary>
            The logging context
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildSettings">
            <summary>
            Flags for controlling the build.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BuildSettings.None">
            <summary>
            The default build.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BuildSettings.DoNotResetPreviouslyBuiltTargets">
            <summary>
            When this flag is passed in, MSBuild assumes that no important external
            state has changed (for example, no files reference by the project have
            been modified) and doesn't rebuild any previously built targets.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectLoadSettings">
            <summary>
            Flags for controlling the project load.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectLoadSettings.None">
            <summary>
            Normal load
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectLoadSettings.IgnoreMissingImports">
            <summary>
            Ignore nonexistent targets files when loading the project
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetDefinitionLocations">
            <summary>
            Flags for controlling the toolset initialization.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.None">
            <summary>
            Do not read toolset information from any external location.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.ConfigurationFile">
            <summary>
            Read toolset information from the exe configuration file.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.Registry">
            <summary>
            Read toolset information from the registry (HKLM\Software\Microsoft\MSBuild\ToolsVersions).
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Engine">
            <summary>
            This class represents the MSBuild engine. In a system of project-to-project dependencies, this class keeps track of the
            various projects being built, so that we can avoid building the same target in the same project more than once in a given
            build.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Engine.propertyListToSerialize">
            <summary>
            A array of string which list the properties that should be serialized accross from the child node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Engine.forwardPropertiesFromChild">
            <summary>
             A ; delimited string which says which properties should be serialized accross from the child node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor">
            <summary>
            Default constructor that reads toolset information from both the registry
            and configuration file.
            The need for parameterless constructor is dictated by COM interop. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(System.String)">
            <summary>
            Constructor to initialize binPath.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Constructor providing the global properties the engine should inherit.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Constructor to specify whether toolsets should be initialized from the msbuild configuration file and from the registry 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Constructor to specify the global properties the engine should inherit and 
            the locations the engine should inspect for toolset definitions.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations,System.Int32,System.String)">
            <summary>
            Constructor used by msbuild.exe and any other multiproc aware MSBuild hosts.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations,System.Int32,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Constructor used to initialize an Engine on a child node. Called only by LocalNode to create a child node's engine.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.#ctor(System.Int32,System.Boolean,System.Int32,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Constructor to init all data except for BinPath which is initialized separately because 
            a parameterless constructor is needed for COM interop
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.SetEngineAbortTo(System.Boolean)">
            <summary>
            Accessor wrapper for the engine abort event and cached value. This method is thread safe.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.InitializeLocalNodeProvider(Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Initialize the local node provider
            Only happens on the parent node.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.BinPath">
            <summary>
            Obsolete way to get or set the tools path for the current default tools version.
            </summary>
            <remarks>
            BinPath is an obsolete concept. We retain it for now for all the hosts that use the BinPath
            property, or the Engine(binPath) constructor, but internally it is just the tools path 
            of the default tools version.
            </remarks>
            <value>The MSBuild path.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.IsBuilding">
            <summary>
            Is this engine in the process of building?
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.NodeId">
            <summary>
            The node Id the current engine instance is running on
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.GlobalDummyXmlDoc">
            <summary>
            Gets the dummy owner document for "virtual" items.
            </summary>
            <owner>SumedhK</owner>
            <remarks>PERF NOTE: this property helps to delay creation of the XmlDocument object</remarks>
            <value>The dummy XmlDocument.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.PropertyListToSerialize">
            <summary>
            An array of strings which list the properties that should be serialized from the child node to the parent node
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.GlobalEngine">
            <summary>
            Returns an instance of the Engine that is global (shared) for this AppDomain.
            Delays creation until necessary.
            </summary>
            <value>The global Engine instance.</value>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.Version">
            <summary>
            Gets the file version of the file in which the Engine assembly lies.
            </summary>
            <remarks>
            This is the Windows file version (specifically the value of the ProductVersion
            resource), not necessarily the assembly version.
            </remarks>
            <owner>RGoel</owner>
            <value>The engine version string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.GlobalProperties">
            <summary>
            Accessor for the engine's global properties. Global properties are those that would be set via the /p: switch at the
            command-line, or things that the IDE wants to set before building a project (such as the "Configuration" property).
            These global properties shall be applied to all projects that are built with this engine.
            </summary>
            <owner>RGoel</owner>
            <value>The global property bag.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.EnvironmentProperties">
            <summary>
            Read-only accessor for the environment variables.
            </summary>
            <value>The property bag of environment variables.</value>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetNextTaskId">
            <summary>
             Get a new TaskId
            (NOT Thread safe)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetNextTargetId">
            <summary>
            Returns an ID that is unique among all targets for this project.
            (NOT Thread safe)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetNextProjectId">
            <summary>
            This ID can be used to keep distinct task registries for each project object, even when the project objects
            are loaded from the same path on disk, but have different global properties
            (NOT Thread safe)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetNextNodeId">
            <summary>
            Gets a node ID for the provided engine
            (NOT Thread safe)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.BuildEnabled">
            <summary>
            This is the default value used by newly created projects for whether or not the building
            of targets is enabled.  This is for security purposes in case a host wants to closely
            control which projects it allows to run targets/tasks.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.ImportedProjectsCache">
            <summary>
            Gets the cache of projects imported during the build.
            </summary>
            <remarks>PERF NOTE: this property helps to delay creation of the cache</remarks>
            <owner>SumedhK</owner>
            <value>Hashtable of imported projects.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.ProjectsLoadedByHost">
            <summary>
            Returns the table of projects loaded by the host.
            </summary>
            <owner>RGoel</owner>
            <remarks>Marked "internal" for unit tests only.  To maintain encapsulation, please try not to 
            use this accessor in real msbuild code, except from within this class.</remarks>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.ToolsetStateMap">
            <summary>
            Dictionary of toolset states
            K: tools version
            V: matching toolset state
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.Toolsets">
            <summary>
            Returns the collection of Toolsets recognized by this Engine instance.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.LoggingServices">
            <summary>
            Returns the service that can be used to log events
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.EngineCpuCount">
            <summary>
            Provide the number of Cpus the engine was started with. This is used to communicate this number with the project for
            the reserved property MSBuildBuildNodeCount
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.ExternalLoggingServices">
            <summary>
            The external logging service is used on the child to forward events from child to parent
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.ProfileBuild">
            <summary>
            Return true if the timing data for the build should be collected
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.FlushRequestEvent">
            <summary>
            Returns the event that can be used to trigger a flush of logging services
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.StartupDirectory">
            <summary>
            The current directory at the time the Engine was constructed -- 
            if msbuild.exe is hosting, this is the current directory when
            msbuild.exe was started
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetTaskRegistry(Microsoft.Build.Framework.BuildEventContext,System.String)">
            <summary>
            Return the global task registry for a particular toolset.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.AddToolset(Microsoft.Build.BuildEngine.Toolset)">
            <summary>
            Adds a new toolset to the engine. Any pre-existing toolset with the same
            tools version is replaced with the provided toolset.
            </summary>
            <param name="toolset">the Toolset</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.UpdateToolsPath(System.String,System.String)">
            <summary>
            Updates the tools path for the specified tools version. If no toolset with
            that tools version exists, it creates a new one.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.DirtyProjectsUsingToolsVersion(System.String)">
            <summary>
            Marks as dirty any projects currently using the specified tools version,
            so they'll update with any new values in it
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.PopulateToolsetStateMap(Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Populate ToolsetStateMap with a dictionary of (toolset version, ToolsetState) 
            using information from the registry and config file, if any.
            </summary>
            <remarks>Internal for unit testing purposes only</remarks>
            <param name="locations"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.DefaultToolsVersion">
            <summary>
            The default tools version of this Engine. Projects use this tools version if they
            aren't otherwise told what tools version to use.
            This value is gotten from the .exe.config file, or else in the registry, 
            or if neither specify a default tools version then it is hard-coded to the tools version "2.0".
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.RegisterLogger(Microsoft.Build.Framework.ILogger)">
            <summary>
            Called to register loggers with the engine. Once loggers are registered, all build events will be sent to them.
            </summary>
            <exception cref="T:Microsoft.Build.Framework.LoggerException">Logger indicating it failed in a controlled way</exception>
            <exception cref="T:Microsoft.Build.BuildEngine.InternalLoggerException">Logger threw arbitrary exception</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.RegisterLoggerInternal(Microsoft.Build.Framework.ILogger,Microsoft.Build.BuildEngine.EventSource,System.Boolean)">
            <summary>
            Initializes the logger and adds it to the list of loggers maintained by the engine
            </summary>
            <exception cref="T:Microsoft.Build.Framework.LoggerException">Logger indicating it failed in a controlled way</exception>
            <exception cref="T:Microsoft.Build.BuildEngine.InternalLoggerException">Logger threw arbitrary exception</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.RegisterDistributedLogger(Microsoft.Build.Framework.ILogger,Microsoft.Build.BuildEngine.LoggerDescription)">
            <summary>
            Called to register distributed loggers with the engine. 
            This method is not thread safe. All loggers should registered prior to
            starting the build in order to guarantee uniform behavior
            </summary>
            <exception cref="T:Microsoft.Build.Framework.LoggerException">Logger indicating it failed in a controlled way</exception>
            <exception cref="T:Microsoft.Build.BuildEngine.InternalLoggerException">Logger threw arbitrary exception</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BeginEatingLoggingEvents">
            <summary>
            Stop forwarding events to any loggers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.EndEatingLoggingEvents">
            <summary>
            Resume forwarding events to loggers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.UnregisterAllLoggers">
            <summary>
            Clear out all registered loggers so that none are registered.
            </summary>
            <exception cref="T:Microsoft.Build.Framework.LoggerException">Logger indicating it failed in a controlled way</exception>
            <exception cref="T:Microsoft.Build.BuildEngine.InternalLoggerException">Logger threw arbitrary exception</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.UnregisterLoggersInternal(System.Collections.ArrayList)">
            <summary>
            Call shutdown method on each of the loggers in the given list
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.EndingEngineExecution(System.Boolean,System.Boolean)">
            <summary>
            Log BuildFinished event (if there is no unhandled exception) and clear
            the projects loaded by host from the 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.Shutdown">
            <summary>
            Called when the host is done with this engine; unregisters loggers and
            shuts down nodes and TEM's.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.CreateNewProject">
            <summary>
            Creates a new empty Project object that is associated with this engine. All projects must be associated with an
            engine, because they need loggers, global properties, reserved properties, etc.
            </summary>
            <owner>RGoel</owner>
            <returns>The created project.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetLoadedProject(System.String)">
            <summary>
            Retrieves the project object for the specified project file full path, if it has
            been loaded by this Engine.  Returns null if this project is unknown to us.
            </summary>
            <param name="projectFullFileName"></param>
            <returns>The project object associated with this engine that matches the full path.</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.UnloadProject(Microsoft.Build.BuildEngine.Project)">
             <summary>
             Removes a project object from our hash table of loaded projects.  After this is
             called, it is illegal to attempt to do anything else with the Project, so don't
             call it unless you are completely done with the project.
            
             IDEs should call this when they're done with a particular project.  This
             causes us to unhook the project from the Engine object, so that there
             will be no more references to the project, and the garbage collector
             can clean up.
             </summary>
             <param name="project"></param>
             <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.OnRenameProject(Microsoft.Build.BuildEngine.Project,System.String,System.String)">
            <summary>
            Notifies the engine on a project rename, so that we can update our hash tables.
            </summary>
            <param name="project"></param>
            <param name="oldFullFileName"></param>
            <param name="newFullFileName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.UnloadAllProjects">
            <summary>
            Remove all references to Project objects from our cache.  This is called by the
            IDE on Solution Close.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Engine.OnlyLogCriticalEvents">
            <summary>
            When true, only log critical events such as warnings and errors. Has to be in here for API compat
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Builds the default targets in an already-loaded project.
            </summary>
            <param name="project"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project,System.String)">
            <summary>
            Builds a single target in an already-loaded project.
            </summary>
            <param name="project"></param>
            <param name="targetName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project,System.String[])">
            <summary>
            Builds a list of targets in an already-loaded project.
            </summary>
            <param name="project"></param>
            <param name="targetNames"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project,System.String[],System.Collections.IDictionary)">
            <summary>
            Builds a list of targets in an already-loaded project, and returns the target outputs.
            </summary>
            <param name="project"></param>
            <param name="targetNames"></param>
            <param name="targetOutputs"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project,System.String[],System.Collections.IDictionary,Microsoft.Build.BuildEngine.BuildSettings)">
            <summary>
            Builds a list of targets in an already-loaded project using the specified
            flags, and returns the target outputs.
            </summary>
            <owner>RGoel</owner>
            <param name="project"></param>
            <param name="targetNames"></param>
            <param name="targetOutputs"></param>
            <param name="buildFlags">whether previously built targets should be reset or not</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.EngineBuildLoop(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            Main engine loop.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectInternal(Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.BuildEngine.ProjectBuildState,Microsoft.Build.BuildEngine.TaskExecutionContext,System.Boolean)">
            <summary>
            Builds the specific targets in an MSBuild project. Since projects can build other projects, this method may get called
            back recursively. It keeps track of the projects being built, so that it knows when we've popped back out to the root
            of the callstack again, so we can reset the state of all the projects.  Otherwise, you wouldn't be able to do more
            than one build using the same Engine object, because the 2nd, 3rd, etc. builds would just say "hmm, looks like this
            project has already been built, so I'm not going to build it again".
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectInternalInitial(Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.BuildEngine.Project)">
            <summary>
            On the initial call to BuildProjectInternal the number of projects in progress in incremented
            to indicate a new project build request is in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.SetBuildItemCurrentDirectory(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Sets the current Directory and PerThreadProjectDirectory to the project.ProjectDirectory
            This is done so any BuildItems on this thread have the correct root directory,
            so that they can evaluate their built-in metadata correctly while building;
            also so that "exists" conditions can evaluate relative paths.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectInternalContinue(Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.BuildEngine.ProjectBuildState,Microsoft.Build.BuildEngine.TaskExecutionContext,Microsoft.Build.BuildEngine.Project)">
            <summary>
            This method will continue a project build which is in progress
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.StartRootProjectBuild(Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Engine.BuildProject gets called recursively when projects use the
            MSBuild *task* to build other child projects.  If "numberOfProjectsInProgress"
            is 0, then we know we are currently NOT in a recursive call.  We
            are really being called at the top level.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String)">
            <summary>
            Loads a project file from disk, and builds the default targets.
            </summary>
            <owner>RGoel</owner>
            <param name="projectFile"></param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String,System.String)">
            <summary>
            Loads a project file from disk, and builds the specified target.
            </summary>
            <owner>RGoel</owner>
            <param name="projectFile"></param>
            <param name="targetName">Can be null, if caller wants to build the default targets for the project.</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String,System.String[])">
            <summary>
            Loads a project file from disk, and builds the specified list of targets.
            </summary>
            <owner>RGoel</owner>
            <param name="projectFile"></param>
            <param name="targetNames">Can be null, if caller wants to build the default targets for the project.</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String,System.String[],Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Loads a project file from disk, and builds the specified list of targets.  This overload
            takes a set of global properties to use for the build.
            </summary>
            <owner>RGoel</owner>
            <param name="projectFile"></param>
            <param name="targetNames">Can be null, if caller wants to build the default targets for the project.</param>
            <param name="globalProperties">Can be null if no global properties are needed.</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String,System.String[],Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.IDictionary)">
            <summary>
            Loads a project file from disk, and builds the specified list of targets.  This overload
            takes a set of global properties to use for the build and returns the target outputs.
            </summary>
            <owner>RGoel</owner>
            <param name="projectFile"></param>
            <param name="targetNames">Can be null, if caller wants to build the default targets for the project.</param>
            <param name="globalProperties">Can be null if no global properties are needed.</param>
            <param name="targetOutputs">Can be null if outputs are not needed.</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String,System.String[],Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.IDictionary,Microsoft.Build.BuildEngine.BuildSettings)">
            <summary>
            Loads a project file from disk, and builds the specified list of targets.  This overload
            takes a set of global properties to use for the build, returns the target outputs, and also
            allows the caller to specify additional build flags.
            </summary>
            <remarks>
            If this project file is already in our list of in-progress projects, we use the
            existing Project object instead of instantiating a new one. Always use this method to 
            build projects within projects, otherwise the build won't be optimized.
            </remarks>
            <param name="projectFile"></param>
            <param name="targetNames">Can be null, if caller wants to build the default targets for the project.</param>
            <param name="globalProperties">Can be null if no global properties are needed.</param>
            <param name="targetOutputs">Can be null if outputs are not needed.</param>
            <param name="buildFlags">Specifies additional options to alter the behavior of the build.</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFile(System.String,System.String[],Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.IDictionary,Microsoft.Build.BuildEngine.BuildSettings,System.String)">
            <summary>
            Loads a project file from disk, and builds the specified list of targets.  This overload
            takes a set of global properties to use for the build, returns the target outputs, and also
            allows the caller to specify additional build flags.
            </summary>
            <remarks>
            If this project file is already in our list of in-progress projects, we use the
            existing Project object instead of instantiating a new one. Always use this method to 
            build projects within projects, otherwise the build won't be optimized.
            </remarks>
            <param name="projectFile"></param>
            <param name="targetNames">Can be null, if caller wants to build the default targets for the project.</param>
            <param name="globalProperties">Can be null if no global properties are needed.</param>
            <param name="targetOutputs">Can be null if outputs are not needed.</param>
            <param name="buildFlags">Specifies additional options to alter the behavior of the build.</param>
            <param name="toolsVersion">Tools version to impose on the project in this build</param>
            <returns>true, if build succeeds</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFiles(System.String[],System.String[][],Microsoft.Build.BuildEngine.BuildPropertyGroup[],System.Collections.IDictionary[],Microsoft.Build.BuildEngine.BuildSettings,System.String[])">
            <summary>
            Loads a set of project files from disk, and builds the given list of targets for each one. This overload
            takes a set of global properties for each project to use for the build, returns the target outputs, 
            and also allows the caller to specify additional build flags.
            </summary>
            <param name="projectFiles">Array of project files to build (can't be null)</param>
            <param name="targetNamesPerProject">Array of targets for each project(can't be null)</param>
            <param name="globalPropertiesPerProject">Array of properties for each project (can't be null)</param>
            <param name="targetOutputsPerProject">Array of tables for target outputs (can't be null)</param>
            <param name="buildFlags"></param>
            <param name="toolsVersions">Tools version to impose on the project in this build</param>
            <returns>True if all given project build successfully</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.CreateLocalBuildRequest(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.Project,System.String,System.String[],Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.IDictionary,Microsoft.Build.BuildEngine.BuildSettings,System.String)">
            <summary>
            Create a build request which will be posted to the local engine queue, having a HandleId of -1 meaning it came from the local 
            engine rather than an engine call back 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.BuildProjectFileInternal(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            Loads a project file from disk, and builds the specified list of targets.  This overload
            takes a set of global properties to use for the build, returns the target outputs, and also
            allows the caller to specify additional build flags.
            </summary>
            <remarks>
            If this project file is already in our list of in-progress projects, we use the
            existing Project object instead of instantiating a new one. Always use this method to 
            build projects within projects, otherwise the build won't be optimized.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.ProcessCachedResult(Microsoft.Build.BuildEngine.BuildRequest,System.IO.FileInfo,System.Collections.ArrayList,Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            Pretend we're actually building a project when really we're just retrieving the results from the cache.
            </summary>
            <param name="buildRequest"></param>
            <param name="projectFileInfo"></param>
            <param name="actuallyBuiltTargets"></param>
            <param name="cachedResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.GetMatchingProject(Microsoft.Build.BuildEngine.Project,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.String[],Microsoft.Build.Framework.BuildEventContext,System.Boolean)">
            <summary>
            Returns a project object that matches the full path and global properties passed in.
            First, it checks our cache of building projects to see if such a project already exists.
            If so, we reuse that.  Otherwise, we create a new Project object with the specified
            full path and global properties.  The "existingProject" parameter passed in is just
            so we can reuse the Xml if there's already a project available with the same full path.
            </summary>
            <param name="existingProject"></param>
            <param name="projectFullPath"></param>
            <param name="globalPropertiesToUse"></param>
            <param name="buildEventContext"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.MergeGlobalProperties(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.Collections.IDictionary)">
            <summary>
            When using the MSBuild task to build a child project, we need to figure out the set of 
            global properties that the child should be built with.  It is a merge of whatever
            properties the parent project was being built with, plus whatever properties were
            actually passed into the MSBuild task (in the "Properties" parameter).  However,
            the slightly wrinkle is the child project may have actually been one that is 
            currently loaded in the IDE, and the IDE controls what Configuration/Platform each
            project should be built with, so we have to honor that too.  So, the order in which
            we look at global properties are:
            
                1.  Whatever global properties the parent project was building with.  (The parent
                    project is the one that called the &lt;MSBuild&lt; task.
                2.  If the child project was already previously loaded by the host, whatever global 
                    properties were sent into the child project by the host (via Project.GlobalProperties).
                3.  Whatever properties were passed into the "Properties" parameter of the &lt;MSBuild&lt;
                    task.
            
            </summary>
            <param name="parentProjectGlobalProperties"></param>
            <param name="childProjectFile"></param>
            <param name="globalPropertiesPassedIntoTask"></param>
            <owner>RGoel</owner>
            <returns>merged PropertyGroup</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.RequestStatus(System.Int32)">
            <summary>
            This function collects status about the inprogress targets and engine operations. 
            This function should always run from the engine domain because it touch engine data
            structures.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Engine.ResetPerBuildDataStructures">
            <summary>
            Reset the cache of loaded projects and all other per build data
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EngineCallback">
            <summary>
            This class is an external representation of engine communication with the TEM or child nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.#ctor(Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Creates a callback class. There should only be one callback per engine under normal 
            circumstances.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.PostBuildRequestsToHost(Microsoft.Build.BuildEngine.BuildRequest[])">
            <summary>
            This method is called by the node to request evaluation of a target that was
            requested by a task via IBuildEngine interface. It posts the
            request into a queue in the engine
            </summary>
            <param name="buildRequests"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.PostCacheEntriesToHost(System.Int32,Microsoft.Build.BuildEngine.CacheEntry[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Called on the main node only.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetCachedEntriesFromHost(System.Int32,System.String[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Called on the main node only.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.ConvertToInvalidProjectException(Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.BuildEngine.Project,System.Exception)">
            <summary>
            If there is an exception in process build request we will wrap it in an invalid project file exception as any exceptions caught here are really problems with a project file
            this exception will be handled in the engine and logged
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.PostTaskOutputs(System.Int32,System.Boolean,System.Exception,System.Int64)">
            <summary>
            This method is used by the node to post the task outputs to the engine.
            Items and properties output by the task return to the engine thread via the Lookup the
            TaskEngine was passed, not via posting to the queue here.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.PostBuildResultToHost(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method is used by the child node to post results of a build request back to the
            parent node. The parent node then decides if need to re-route the results to another node
            that requested the evaluation or if it will consume the result locally
            </summary>
            <param name="buildResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.SetCacheEntries(System.Int32,Microsoft.Build.BuildEngine.CacheEntry[],System.String,System.String,System.String,Microsoft.Build.BuildEngine.CacheContentType,System.Boolean)">
            <summary>
            Called either on the main or child node. This is the routing method for setting cache entries.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetCacheEntries(System.Int32,System.String[],System.String,System.String,System.String,Microsoft.Build.BuildEngine.CacheContentType,System.Boolean)">
            <summary>
            Called either on the main or child node. This is the routing method for getting cache entries.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.PostLoggingMessagesToHost(System.Int32,Microsoft.Build.BuildEngine.NodeLoggingEvent[])">
            <summary>
            Submit the logging message to the engine queue. Note that we are currently not utilizing the 
            handleId, but plan to do so in the future to fill out the data structure passed to the engine
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetLineColumnOfXmlNode(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Figure out the line and column number of the task XML node in the original
            project context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetEngineTaskRegistry(System.Int32)">
            <summary>
            Gets the default engine task registry. If the TEM runs out-of proc with the engine we should send the task declarations for all the default tasks parsed out of the *.tasks XML instead.
            </summary>
            <returns>The default engine task registry.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetProjectTaskRegistry(System.Int32)">
            <summary>
            Gets the project task registry. If the TEM runs out-of proc with the engine we should send the task declarations for all the using tasks parsed out of project XML instead.
            </summary>
            <returns>The default engine task registry.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetToolsPath(System.Int32)">
            <summary>
            Get the version of the toolset used by the project
            </summary>
            <param name="handleId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.PostStatus(System.Int32,Microsoft.Build.BuildEngine.NodeStatus,System.Boolean)">
            <summary>
            This method is called to post the status of the node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetParentEngine">
            <summary>
            This method is only used in by the inproc node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetListOfTargets(System.Int32[])">
            <summary>
            This method converts a list handles to inprogress contexts into a list of target objects
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetExecutionContextFromHandleId(System.Int32)">
            <summary>
            Given a handleId, this method returns the corresponding ExecutionContext. This
            context contains only value type data and can be used from any domain.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetTaskContextFromHandleId(System.Int32)">
            <summary>
            Given a handleId, this method returns the corresponding RequestRoutingContext. This context
            contains some data (such as parent projet or parent target) which should only be accessed from
            within the engine domain.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.GetRoutingContextFromHandleId(System.Int32)">
            <summary>
            Given a handleId, this method returns the corresponding RequestRoutingContext. This
            context contains only value type data and can be used from any domain
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.CreateTaskContext(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.ProjectBuildState,System.Xml.XmlElement,System.Int32,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            This method creates a new TaskExecutionContext and return a integer token that maps to it.
            This method is not thread safe and must be called only from the engine thread.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.CreateRoutingContext(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Build.BuildEngine.CacheScope,Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            This method creates a new routing context. This method is not thread safe and must be called
            only from the engine thread.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineCallback.ClearContextState(System.Int32)">
            <summary>
            This method maps the given handleId to null. The entry will be later removed by the engine thread.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.invalidEngineHandle">
            <summary>
            Number assigned to an invalid engine handle, This handleId is used by Buildrequests 
            to show they are a routing context
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.inProcNode">
            <summary>
            NodeId for an inproc node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.parentNode">
            <summary>
            NodeId for the parent node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.invalidNode">
            <summary>
            Invalid NodeId
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.executionContexts">
            <summary>
            This hashtable contains the all the executionContexts for the current process
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.freedContexts">
            <summary>
            List of contexts that should be removed from the hashtable by the engine thread
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.nextContextId">
            <summary>
            The counter used to generate unique identifiers for each context
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.parentEngine">
            <summary>
            The pointer to the engine to which this callback class corresponds
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineCallback.freeListThreshold">
            <summary>
            The count of objects on the free list which triggers a deletion
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EngineLoggingServicesInProc">
            <summary>
            This class implements the in-proc (engine process) logging services, provided by the engine for
            internal logging purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesInProc.#ctor">
            <summary>
            Private default constructor -- do not allow instantation w/o parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesInProc.#ctor(Microsoft.Build.BuildEngine.EventSource,System.Boolean,System.Threading.ManualResetEvent)">
            <summary>
            Creates an instance of this class for the given engine event source.
            </summary>
            <param name="eventSource"></param>
            <param name="onlyLogCriticalEvents"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesInProc.ProcessPostedLoggingEvents">
            <summary>
            This function logs out all the messages currently posted to the queue. The active queue is swapped
            with the secondary queue to enable posting of messages while this function is running
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesInProc.ProcessBuildEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            This method process a single BuildEvent argument, it will raise the event to registered loggers and 
            check to see if the there are forwarding loggers who need to see the event also, if so the message will
            be posted to another logger
            </summary>
            <param name="buildEventArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesInProc.Shutdown">
            <summary>
            Shutdown the logging service as appropriate
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc">
            <summary>
            This class implements the out-of-proc (node process) logging services, provided by the engine
            for internal logging purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.#ctor">
            <summary>
            Private default constructor -- do not allow instantation w/o parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.#ctor(Microsoft.Build.BuildEngine.Node,System.Threading.ManualResetEvent)">
            <summary>
            Creates an instance of this class for the given engine event source.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.ProcessPostedLoggingEvents">
            <summary>
            The out of proc logging service is concerned with flushing the events out to the node provider
            to be sent to the parent engine. Events which are not marked with a logger id end up being wrapped 
            in a NodeLoggingEvent which was a default loggerId of 0. All events posted as BuildEventArgs fall
            into this category. Events with a loggerId need be posted as NodeLoggerEventWithLoggerId objects.
            This function is thread safe and is called both from the engine thread and communication threads to 
            ensure that the events are delivered in coherent order.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.AddToCurrentArray(Microsoft.Build.BuildEngine.NodeLoggingEvent)">
            <summary>
            Adds an event to an array. If the array is full it is posted to the parent and a new array is created
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.Shutdown">
            <summary>
            Shutdown the logging service as appropriate
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.ReportLoggingFailure(System.Exception)">
            <summary>
            Reports an exception thrown while sending logging event to the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.loggingQueueReadLock">
            <summary>
            This mutex protects the queue from multiple readers, which may happen in the
            out of proc implementation
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.parentNode">
            <summary>
            If this engine is running in child mode the parent node is used to post logging messages
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.current">
            <summary>
            Current count of items in the array of events (access should be protected with loggingQueueReadLock)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.eventArray">
            <summary>
            Array of events to be send to the parent (access should be protected with loggingQueueReadLock)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc.eventArrayChunkSize">
            <summary>
            The number of events in one array posted to the parent.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EngineProxy">
            <summary>
            This class serves as a surrogate for the build engine. It limits access to the build engine by implementing only a subset
            of all public methods on the Engine class.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.parentProjectFullFileName">
            <summary>
            The full path to the project that's currently building.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.projectFileOfTaskNode">
            <summary>
            The project file that contains the XML for task. This may be an import file and not the primary
            project file
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.handleId">
            <summary>
            The token identifing the context of this evaluation 
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.continueOnError">
            <summary>
            Continue on error value per batch exposed via IBuildEngine
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.parentModule">
            <summary>
            The module within which this class has been created. Used for all callbacks to 
            engine.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.buildEventContext">
            <summary>
            Event contextual information, this tells the loggers where the task events were fired from
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.activeProxy">
            <summary>
            True if the task connected to this proxy is alive
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.callbackMonitor">
            <summary>
            This reference type is used to block access to a single entry methods of the interface
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.sponsor">
            <summary>
            A client sponsor is a class
            which will respond to a lease renewal request and will
            increase the lease time allowing the object to stay in memory
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.buildErrorEventArgsType">
            <summary>
            Will hold cached copy of typeof(BuildErrorEventArgs) used by each call to LogError
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineProxy.buildWarningEventArgsType">
            <summary>
            Will hold cached copy of typeof(BuildErrorEventArgs) used by each call to LogError
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.#ctor">
            <summary>
            Private default constructor disallows parameterless instantiation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.#ctor(Microsoft.Build.BuildEngine.TaskExecutionModule,System.Int32,System.String,System.String,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Create an instance of this class to represent the IBuildEngine2 interface to the task
            including the event location where the log messages are raised
            </summary>
            <param name="parentModule">Parent Task Execution Module</param>
            <param name="handleId"></param>
            <param name="parentProjectFullFileName">the full path to the currently building project</param>
            <param name="projectFileOfTaskNode">the path to the actual file (project or targets) where the task invocation is located</param>
            <param name="loggingServices"></param>
            <param name="buildEventContext">Event Context where events will be seen to be raised from. Task messages will get this as their event context</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.GetUpdatedMessage(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="file">File field from the original BuildEventArgs</param>
            <param name="message">Message field from the original BuildEventArgs</param>
            <param name="parentProjectFullFileName">Full file name of the parent (building) project.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.LogCustomEvent(Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.ContinueOnError">
            <summary>
            Returns true if the ContinueOnError flag was set to true for this particular task
            in the project file.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.UpdateContinueOnError(System.Boolean)">
            <summary>
            Called by the task engine to update the value for each batch
            </summary>
            <param name="shouldContinueOnError"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.LineNumberOfTaskNode">
            <summary>
            Retrieves the line number of the task node withing the project file that called it.
            </summary>
            <remarks>This method is expensive in terms of perf.  Do not call it in mainline scenarios.</remarks>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.ColumnNumberOfTaskNode">
            <summary>
            Retrieves the line number of the task node withing the project file that called it.
            </summary>
            <remarks>This method is expensive in terms of perf.  Do not call it in mainline scenarios.</remarks>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.ProjectFileOfTaskNode">
            <summary>
            Returns the full path to the project file that contained the call to this task.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.ComputeProjectFileLocationOfTaskNode">
            <summary>
            Computes the line/column number of the task node in the project file (or .TARGETS file)
            that called it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
            <param name="projectFileName"></param>
            <param name="targetNames"></param>
            <param name="globalProperties"></param>
            <param name="targetOutputs"></param>
            <returns>result of call to engine</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
            <param name="projectFileName"></param>
            <param name="targetNames"></param>
            <param name="globalProperties"></param>
            <param name="targetOutputs"></param>
            <param name="toolsVersion">Tools Version to override on the project. May be null</param>
            <returns>result of call to engine</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
            <param name="projectFileNames"></param>
            <param name="targetNames"></param>
            <param name="globalProperties"></param>
            <param name="targetOutputsPerProject"></param>
            <param name="toolsVersions">Tools Version to overrides per project. May contain null values</param>
            <param name="unloadProjectsOnCompletion"></param>
            <returns>result of call to engine</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.Yield">
            <summary>
            Not implemented for the proxy 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.Reacquire">
            <summary>
            Not implemented for the proxy
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)">
            <summary>
            Stub implementation -- forwards to engine being proxied.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            
            </remarks>
            <param name="projectFileNames">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">An array of hashtables of additional global properties to apply
                to the child project (array entries can be null). 
                The key and value in the hashtable should both be strings.</param>
            <param name="removeGlobalProperties">A list of global properties which should be removed.</param>
            <param name="toolsVersions">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <param name="returnTargetOutputs">Should the target outputs be returned in the BuildEngineResults</param>
            <returns>Returns a structure containing the success or failures of the build and the target outputs by project.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.InitializeLifetimeService">
            <summary>
            InitializeLifetimeService is called when the remote object is activated. 
            This method will determine how long the lifetime for the object will be.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineProxy.MarkAsInActive">
            <summary>
            Indicates to the EngineProxy that it is no longer needed.
            Called by TaskEngine when the task using the EngineProxy is done.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.BuildEventContext">
            <summary>
            Provide a way to change the BuildEventContext of the engine proxy. This is important in batching where each batch will need its own buildEventContext.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.IsRunningMultipleNodes">
            <summary>
            This property allows a task to query whether or not the system is running in single process mode or multi process mode.
            Single process mode is where the engine is initialized with the number of cpus = 1 and the engine is not a child engine.
            The engine is in multi process mode when the engine is initialized with a number of cpus > 1 or the engine is a child engine.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.BuildErrorEventArgsType">
            <summary>
            Cached copy of typeof(BuildErrorEventArgs) used during each call to LogError
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineProxy.BuildWarningEventArgsType">
            <summary>
            Cached copy of typeof(BuildWarningEventArgs) used during each call to LogWarning
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EventSource">
            <summary>
            This class raises events on behalf of the build engine to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.#ctor">
            <summary>
            Default constructor.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.UnregisterAllLoggers">
            <summary>
            Clears out all events.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseMessageEvent(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Raises a message event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseErrorEvent(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Raises an error event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseWarningEvent(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Raises a warning event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseBuildStartedEvent(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            Raises a "build started" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseBuildFinishedEvent(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            Raises a "build finished" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseProjectStartedEvent(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            Raises a "project build started" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseProjectFinishedEvent(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            Raises a "project build finished" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseTargetStartedEvent(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            Raises a "target build started" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseTargetFinishedEvent(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            Raises a "target build finished" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseTaskStartedEvent(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            Raises a "task execution started" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseTaskFinishedEvent(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            Raises a "task finished executing" event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseCustomEvent(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Raises a custom event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseStatusEvent(System.Object,Microsoft.Build.Framework.BuildStatusEventArgs)">
            <summary>
            Raises a catch-all build status event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseAnyEvent(System.Object,Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Raises a catch-all build event to all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EventSource.RaiseStronglyTypedEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Raises the given event to all registered loggers. This method up-cast the events
            extracted from the queue.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.MessageRaised">
            <summary>
            This event is raised to log a message.
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.ErrorRaised">
            <summary>
            This event is raised to log an error.
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.WarningRaised">
            <summary>
            This event is raised to log a warning.
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.BuildStarted">
            <summary>
            this event is raised to log the start of a build
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.BuildFinished">
            <summary>
            this event is raised to log the end of a build
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.ProjectStarted">
            <summary>
            this event is raised to log the start of a project build
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.ProjectFinished">
            <summary>
            this event is raised to log the end of a project build
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.TargetStarted">
            <summary>
            this event is raised to log the start of a target build
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.TargetFinished">
            <summary>
            this event is raised to log the end of a target build
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.TaskStarted">
            <summary>
            this event is raised to log the start of task execution
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.TaskFinished">
            <summary>
            this event is raised to log the end of task execution
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.CustomEventRaised">
            <summary>
            this event is raised to log a custom event
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.StatusEventRaised">
            <summary>
            this event is raised to log build status events, such as 
            build/project/target/task started/stopped 
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="E:Microsoft.Build.BuildEngine.EventSource.AnyEventRaised">
            <summary>
            This event is raised to log that some event has
            occurred.  It is raised on every event.
            </summary>
            <owner> t-jeffv, sumedhk </owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.enableAllPropertyFunctions">
            <summary>
            Debugging aid and emergency exit for customers.
            Allows any functions to be used not just the safe list.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Expander.ItemMetadata">
            <summary>
            Accessor for the item metadata used for metadata expansion (not counting metadata
            referenced inside a transform).
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Special cased constructor. Where we are only going to expand properties,
            it's a waste of memory to use a lookup. Just use the property group.
            PERF: This improves the EvaluateAllPropertyGroups codepath.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Special cased constructor. Where we are only going to expand properties and metadata,
            it's a waste of memory to use a lookup. Just use the property group.
            PERF: This improves the EvaluateAllItemDefinitions codepath.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.#ctor(Microsoft.Build.BuildEngine.Expander,Microsoft.Build.BuildEngine.ExpanderOptions)">
            <summary>
            Create an expander from another expander, but with different
            options
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.SetMetadataInMetadataTable(System.String,System.String,System.String)">
            <summary>
            Adds metadata to the table being used by this expander.
            This is useful when expanding metadata definitions that may refer to other values defined
            immediately above: as each value is expanded, it is added to the table in the expander.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoBuildItems(System.String,System.Xml.XmlAttribute)">
            <summary>
            Expands item metadata, properties, and items (in that order), and produces a list of TaskItems.
            </summary>
            <param name="expression"></param>
            <param name="expressionAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoTaskItems(System.String,System.Xml.XmlAttribute)">
            <summary>
            Expands item metadata, properties, and items (in that order), and produces a list of TaskItems.
            
            All data accessed through the TaskItem (ItemSpec and metadata) is going to be unescaped, so it's nice 
            and ready for a task to consume.
            </summary>
            <param name="expression"></param>
            <param name="expressionAttribute"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoString(System.Xml.XmlAttribute)">
            <summary>
            An overload of ExpandAllIntoString that conveniently only takes in an XmlAttribute whose
            value we should expand.
            </summary>
            <param name="expressionAttribute"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoString(System.String,System.Xml.XmlNode)">
            <summary>
            Expands embedded item metadata, properties, and embedded item lists (in that order)
            within an expression.
            </summary>
            <param name="expression"></param>
            <param name="expressionNode">The XML attribute containing the string we're trying to expand here.  Solely
            for the purposes of providing line/column number information when there's an error.</param>
            <returns>fully expanded string</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoStringLeaveEscaped(System.Xml.XmlAttribute)">
            <summary>
            An overload of ExpandAllIntoString that conveniently only takes in an XmlAttribute whose
            value we should expand.
            </summary>
            <param name="expressionAttribute"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoStringLeaveEscaped(System.String,System.Xml.XmlNode)">
            <summary>
            Expands embedded item metadata, properties, and embedded item lists (in that order)
            within an expression.
            </summary>
            <param name="expression"></param>
            <param name="expressionNode">The XML attribute containing the string we're trying to expand here.  Solely
            for the purposes of providing line/column number information when there's an error.</param>
            <returns>fully expanded string</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoStringList(System.String,System.Xml.XmlNode)">
            <summary>
            Expands metadata, properties, and items (in that order) into a list of strings.
            </summary>
            <param name="expression"></param>
            <param name="expressionNode">The XML attribute containing the string we're trying to expand here.  Solely
            for the purposes of providing line/column number information when there's an error.</param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoStringList(System.Xml.XmlAttribute)">
            <summary>
            Expands metadata, properties, and items (in that order) into a list of strings.
            </summary>
            <param name="expressionAttribute"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoStringListLeaveEscaped(System.String,System.Xml.XmlNode)">
            <summary>
            Expands metadata, properties, and items (in that order) into a list of strings.
            </summary>
            <param name="expression"></param>
            <param name="expressionNode">The XML attribute containing the string we're trying to expand here.  Solely
            for the purposes of providing line/column number information when there's an error.</param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandAllIntoStringListLeaveEscaped(System.Xml.XmlAttribute)">
            <summary>
            Expands metadata, properties, and items (in that order) into a list of strings.
            </summary>
            <param name="expressionAttribute"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandPropertiesLeaveEscaped(System.String,System.Xml.XmlNode)">
             <summary>
             This method takes a string which may contain any number of
             "$(propertyname)" tags in it.  It replaces all those tags with
             the actual property values, and returns a new string.  For example,
            
                 string processedString =
                     propertyBag.ExpandProperties("Value of NoLogo is $(NoLogo).");
            
             This code might produce:
            
                 processedString = "Value of NoLogo is true."
            
             If the sourceString contains an embedded property which doesn't
             have a value, then we replace that tag with an empty string.
            
             This method leaves the expression escaped.  Callers may need to unescape on their own as appropriate.
             This method leaves the result escaped.  Callers may need to unescape on their own as appropriate.
             </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandPropertiesLeaveTypedAndEscaped(System.String,System.Xml.XmlNode)">
             <summary>
             This method takes a string which may contain any number of
             "$(propertyname)" tags in it.  It replaces all those tags with
             the actual property values, and returns a new string.  For example,
            
                 string processedString =
                     propertyBag.ExpandProperties("Value of NoLogo is $(NoLogo).");
            
             This code might produce:
            
                 processedString = "Value of NoLogo is true."
            
             If the sourceString contains an embedded property which doesn't
             have a value, then we replace that tag with an empty string.
            
             This method leaves the expression escaped.  Callers may need to unescape on their own as appropriate.
             </summary>
             <param name="expression"></param>
             <returns></returns>
             <owner>RGoel, JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ConvertToString(System.Object)">
            <summary>
            Convert the object into an MSBuild friendly string
            Arrays are supported.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ScanForClosingParenthesis(System.String,System.Int32)">
            <summary>
            Scan for the closing bracket that matches the one we've already skipped;
            essentially, pushes and pops on a stack of parentheses to do this.
            Takes the expression and the index to start at.
            Returns the index of the matching parenthesis, or -1 if it was not found.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ScanForClosingParenthesis(System.String,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Scan for the closing bracket that matches the one we've already skipped;
            essentially, pushes and pops on a stack of parentheses to do this.
            Takes the expression and the index to start at.
            Returns the index of the matching parenthesis, or -1 if it was not found.
            Also returns flags to indicate if a propertyfunction or registry property is likely
            to be found in the expression
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandPropertyBody(System.String,System.Object,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ExpanderOptions)">
            <summary>
            Expand the body of the property, including any functions that it may contain
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.LookupProperty(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.Xml.XmlNode)">
            <summary>
            Look up a simple property reference by the name of the property, e.g. "Foo" when expanding $(Foo)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.IsValidPropertyName(System.String)">
            <summary>
            Returns true if the supplied string contains a valid property name
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandRegistryValue(System.String,System.Xml.XmlNode)">
            <summary>
            Given a string like "Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation", return the value at that location
            in the registry. If the value isn't found, returns String.Empty.
            Properties may refer to a registry location by using the syntax for example
            "$(Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation)", where "HKEY_LOCAL_MACHINE\Software\Vendor\Tools" is the key and
            "TaskLocation" is the name of the value.  The name of the value and the preceding "@" may be omitted if
            the default value is desired.
            </summary>
            <param name="registryLocation">Expression to expand, eg "Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation"</param>
            <param name="node">Location associated with the expression, for purposes of good error messages</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Expander.Function">
            <summary>
            This class represents the function as extracted from a property expression
            It is also responsible for executing the function
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.objectType">
            <summary>
            The type that this function will act on
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.name">
            <summary>
            The name of the function
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.arguments">
            <summary>
            The arguments for the function
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.expression">
            <summary>
            The expression that constitutes this function
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.expressionRootName">
            <summary>
            The property name that is the context for this function
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.bindingFlags">
            <summary>
            The binding flags that will be used during invocation of this function
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Expander.Function.remainder">
            <summary>
            The remainder of the body once the function and arguments have been extracted
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.#ctor(System.Type,System.String,System.String,System.String,System.String[],System.Reflection.BindingFlags,System.String)">
            <summary>
            Construct a function that will be executed during property evaluation
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Expander.Function.ExpressionRootName">
            <summary>
            Part of the extraction may result in the name of the property
            This accessor is used by the Expander
            Examples of expression root:
                [System.Diagnostics.Process]::Start
                SomeMSBuildProperty
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Expander.Function.ObjectType">
            <summary>
            The type of the instance on which this function acts
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.ExtractPropertyFunction(System.String,System.Object)">
            <summary>
            Extract the function details from the given property function expression
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.Execute(Microsoft.Build.BuildEngine.Expander,System.Object,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ExpanderOptions)">
            <summary>
            Execute the function on the given instance
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.GenerateStringOfMethodExecuted(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Make an attempt to create a string showing what we were trying to execute when we failed.
            This will show any intermediate evaluation which may help the user figure out what happened.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.GetTypeForStaticMethod(System.String)">
            <summary>
            Return a Type object for the type we're trying to call static methods on
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.GetTypeFromAssemblyUsingNamespace(System.String)">
            <summary>
            Gets the specified type using the namespace to guess the assembly that its in
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.GetTypeFromAssembly(System.String,System.String)">
            <summary>
            Get the specified type from the assembly partial name supplied
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.ConstructFunction(System.String,System.String,System.Type,System.Int32,System.Int32)">
            <summary>
            Factory method to construct a function for property evaluation
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.ExtractFunctionArguments(System.String,System.String)">
            <summary>
            Extract the first level of arguments from the content.
            Splits the content passed in at commas.
            Returns an array of unexpanded arguments.
            If there are no arguments, returns an empty array.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.ScanForClosingQuote(System.Char,System.String,System.Int32)">
            <summary>
            Skip all characters until we find the matching quote character
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.AddArgument(System.Collections.Generic.List{System.String},System.Text.StringBuilder)">
            <summary>
            Add the argument in the StringBuilder to the arguments list, handling nulls
            appropriately
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.CoerceArguments(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Coerce the arguments according to the parameter types
            Will only return null if the coercion didn't work due to an InvalidCastException
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.IsStaticMethodAvailable(System.Type,System.String)">
            <summary>
            For this initial implementation of inline functions, only very specific static methods on specific types are
            available
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.Function.LateBindExecute(System.Exception,System.Reflection.BindingFlags,System.Object,System.Object[],System.Boolean)">
            <summary>
            Construct and instance of objectType based on the constructor or method arguments provided.
            Arguments must never be null.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandMetadataLeaveEscaped(System.String)">
            <summary>
            Expands all embedded item metadata in the given string, using the bucketed items.
            
            This method leaves the expression escaped.  Callers may need to unescape on their own as appropriate.
            </summary>
            <remarks>
            This method is marked internal only for unit-testing purposes. Ideally
            it should be private.
            </remarks>
            <owner>SumedhK</owner>
            <param name="expression"></param>
            <returns>the expanded string</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandSingleMetadata(System.Text.RegularExpressions.Match)">
            <summary>
            Expands a single item metadata.
            </summary>
            <remarks>This method is a callback for Regex.Replace().</remarks>
            <owner>SumedhK</owner>
            <param name="itemMetadataMatch"></param>
            <returns>the expanded item metadata</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.GetValueFromMetadataTable(System.String,System.String,System.String)">
            <summary>
            Retrieves any value we have in our metadata table for the metadata name specified.
            If no value is available, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.GetDefaultMetadataValue(System.String,System.String,System.String)">
            <summary>
            Retrieves any value we have for the specified metadata in any table of default metadata we've been assigned.
            If no value is available, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandItemsIntoStringLeaveEscaped(System.String,System.Xml.XmlNode)">
             <summary>
             Takes the specified string and expands all item vectors embedded in it. The expansion is done in 2 passes:
             1) the first pass expands only the item vectors that refer to the bucketed items
             2) the second pass expands out the remaining item vectors using the project items
            
             This method leaves the expression escaped.  Callers may need to unescape on their own as appropriate.
             </summary>
             <param name="expression"></param>
             <param name="expressionNode">The XML attribute containing the string we're trying to expand here.  Solely
             for the purposes of providing line/column number information when there's an error.</param>
             <returns>expanded string</returns>
             <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandSingleItemListExpressionIntoItemsLeaveEscaped(System.String,System.Xml.XmlAttribute)">
            <summary>
            Attempts to extract the contents of the given item vector. Returns a virtual BuildItemGroup.
            This method leaves all the items escaped.  Caller may need to unescape them himself if appropriate.
            </summary>
            <param name="singleItemVectorExpression"></param>
            <param name="itemVectorAttribute">The XML attribute that contains the thing we're expanding here.  (Only needed
            for the purpose of logging good error messages with line/column information.</param>
            <returns>a virtual BuildItemGroup containing the items resulting from the expression, or null if the expression was invalid.</returns>
            <owner>SumedhK;RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Expander.ExpandSingleItemListExpressionIntoItemsLeaveEscaped(System.String,System.Xml.XmlAttribute,System.Text.RegularExpressions.Match@)">
            <summary>
            Attempts to extract the contents of the given item vector.
            </summary>
            <param name="singleItemVectorExpression"></param>
            <param name="itemVectorAttribute">The XML attribute that contains the thing we're expanding here.  (Only needed
            for the purpose of logging good error messages with line/column information.</param>
            <param name="itemVectorMatch"></param>
            <returns>a virtual BuildItemGroup containing the items resulting from the expression, or null if the expression was invalid.</returns>
            <owner>SumedhK;RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ExpanderOptions">
            <summary>
            Indicates to an expander what exactly it should expand
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.EngineLoggingServices">
            <summary>
            This abstract class defines a logging service, provided by the engine, for internal logging 
            purposes. This class is very different from the IBuildEngine interface which provides logging
            services for tasks. This class allows for better encapsulation by making it clear when only
            logging services are needed and not the rest of the engine data and methods. This class allows
            us to provide different implementations of logging services for engine components that are
            either in-proc (engine process) or out-of-proc (node process).
            </summary>
            <remarks>
            We have made this an abstract class and not an interface to avoid forcing the "public" access
            modifier on the implementation of the internal logging services.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.Initialize(System.Threading.ManualResetEvent)">
            <summary>
            Initializes the base class data. Sub-classes must call this method in their constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.BeginEatingEvents">
            <summary>
            Causes all events to be discarded until EndEatingEvents() is called.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.EndEatingEvents">
            <summary>
            Ensures events are no longer discarded if BeginEatingEvents() had been called.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.Shutdown">
            <summary>
            Shutdown the logging service as appropriate
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.PostLoggingEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Called to add a logging event to the posting queue.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.PostLoggingEvents(Microsoft.Build.Framework.BuildEventArgs[])">
            <summary>
            Called to add logging events to the posting queue.
            </summary>
            <param name="eventArray"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.PostLoggingEvent(Microsoft.Build.BuildEngine.NodeLoggingEvent)">
            <summary>
            Called to add a logging event to the posting queue.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.PostLoggingEvents(Microsoft.Build.BuildEngine.NodeLoggingEvent[])">
            <summary>
            Called to add logging events to the posting queue.
            </summary>
            <param name="eventArray"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.ProcessPostedLoggingEvents">
            <summary>
            Abstract method that must be implemented for either in-proc or out-of-proc logging.
            This method is called to process the events batched up in the reading queue. In the
            in-proc implementation, this will actually raise the events. In the out-of-proc
            implementation, this will send the events from the node process to the engine.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.ProcessBuildEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            This method is to process a single build event, by default if this method is used
            the event should be posted and processed
            </summary>
            <param name="buildEventArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.NeedsFlush(System.Int64)">
            <summary>
            Return true if the queue needs to be flushed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Raises ErrorEvent and AnyEvent at all registered loggers.
            </summary>
            <owner>t-jeffv, SumedhK</owner>
            <param name="e"></param> 
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Raises MessageEvent and AnyEvent at all registered loggers.
            </summary>
            <owner>t-jeffv, SumedhK</owner>
            <param name="e"></param> 
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Raises WarningEvent and AnyEvent at all registered loggers.
            </summary>
            <owner>t-jeffv, SumedhK</owner>
            <param name="e"></param> 
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogCustomEvent(Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Raises CustomEvent and AnyEvent at all registered loggers.
            </summary>
            <owner>t-jeffv, SumedhK</owner>
            <param name="e"></param> 
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogComment(Microsoft.Build.Framework.BuildEventContext,System.String,System.Object[])">
            <summary>
            Logs a low-priority comment with all registered loggers using the specified resource string.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogComment(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.MessageImportance,System.String,System.Object[])">
            <summary>
            Logs a custom-priority comment with all registered loggers using the specified resource string.
            </summary>
            <owner>SumedhK</owner>
            <param name="importance"></param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogCommentFromText(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.MessageImportance,System.String)">
            <summary>
            Logs a custom-priority comment with all registered loggers using the given text.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogError(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            Logs an error with all registered loggers using the specified resource string.
            </summary>
            <owner>SumedhK</owner>
            <param name="file"></param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogError(Microsoft.Build.Framework.BuildEventContext,System.String,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            Logs an error with all registered loggers using the specified resource string.
            </summary>
            <owner>SumedhK</owner>
            <param name="subcategoryResourceName">Can be null.</param>
            <param name="file"></param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogErrorFromText(Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.String,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String)">
            <summary>
            Logs an error with all registered loggers using the given text.
            </summary>
            <owner>SumedhK</owner>
            <param name="subcategoryResourceName">Can be null.</param>
            <param name="errorCode">Can be null.</param>
            <param name="helpKeyword">Can be null.</param>
            <param name="file"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogInvalidProjectFileError(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.InvalidProjectFileException)">
            <summary>
            Logs an error regarding an invalid project file with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="invalidProjectFileException"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogFatalBuildError(Microsoft.Build.Framework.BuildEventContext,System.Exception,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo)">
            <summary>
            Logs an error regarding an unexpected build failure with all registered loggers.
            This will include a stack dump.
            </summary>
            <owner>SumedhK</owner>
            <param name="exception"></param>
            <param name="file"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogFatalTaskError(Microsoft.Build.Framework.BuildEventContext,System.Exception,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String)">
            <summary>
            Logs an error regarding an unexpected task failure with all registered loggers.
            This will include a stack dump.
            </summary>
            <owner>SumedhK</owner>
            <param name="exception"></param>
            <param name="file"></param>
            <param name="taskName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogFatalError(Microsoft.Build.Framework.BuildEventContext,System.Exception,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            Logs an error regarding an unexpected failure with all registered loggers using the specified resource string.
            This will include a stack dump.
            </summary>
            <owner>SumedhK</owner>
            <param name="exception"></param>
            <param name="file"></param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogTaskWarningFromException(Microsoft.Build.Framework.BuildEventContext,System.Exception,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String)">
            <summary>
            Logs an warning regarding an unexpected task failure with all registered loggers.
            This will include a stack dump.
            </summary>
            <owner>RGoel</owner>
            <param name="exception"></param>
            <param name="file"></param>
            <param name="taskName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogWarning(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            Logs a warning with all registered loggers using the specified resource string.
            </summary>
            <owner>SumedhK</owner>
            <param name="file"></param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogWarning(Microsoft.Build.Framework.BuildEventContext,System.String,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            Logs a warning with all registered loggers using the specified resource string.
            </summary>
            <owner>SumedhK</owner>
            <param name="subcategoryResourceName">Can be null.</param>
            <param name="file"></param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogWarningFromText(Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.String,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String)">
            <summary>
            Logs a warning with all registered loggers using the given text.
            </summary>
            <owner>SumedhK</owner>
            <param name="subcategoryResourceName">Can be null.</param>
            <param name="warningCode">Can be null.</param>
            <param name="helpKeyword">Can be null.</param>
            <param name="file"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogBuildStarted">
            <summary>
            Logs that the build has started with all loggers (only called on the main node)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogBuildStarted(System.Int32)">
            <summary>
            Logs that the build has finished with all loggers, except for forwarding loggers.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogBuildFinished(System.Boolean)">
            <summary>
            Logs that the build has finished with all registered loggers.
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogBuildFinished(System.Boolean,System.Int32)">
            <summary>
            Logs that the build has finished to a particular logger Id
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogProjectStarted(System.Int32,Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Logs that a project build has started with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="projectFile">project file</param>
            <param name="targetNames">target names</param>
            <param name="properties">properties list</param>
            <param name="items">items list</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogProjectFinished(Microsoft.Build.Framework.BuildEventContext,System.String,System.Boolean)">
            <summary>
            Logs that a project build has finished with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="projectFile"></param>
            <param name="success"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogTargetStarted(Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.String)">
            <summary>
            Logs that a target build has started with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="targetName">Name of target</param>
            <param name="projectFile">Main project file</param>
            <param name="projectFileOfTargetElement">Project file actually containing the target</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogTargetFinished(Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Logs that a target build has finished with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="targetName"></param>
            <param name="projectFile">main project file</param>
            <param name="success"></param>
            <param name="projectFileOfTargetElement">project file actually containing the target</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogTaskStarted(Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.String)">
            <summary>
            Logs that task execution has started with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="taskName"></param>
            <param name="projectFile"></param>
            <param name="projectFileOfTaskNode">project file actually containing the task</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineLoggingServices.LogTaskFinished(Microsoft.Build.Framework.BuildEventContext,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Logs that a task has finished executing with all registered loggers.
            </summary>
            <owner>SumedhK</owner>
            <param name="taskName"></param>
            <param name="projectFile"></param>
            <param name="success"></param>
            <param name="projectFileOfTaskNode">project file actually containing the task</param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineLoggingServices.OnlyLogCriticalEvents">
            <summary>
            When true, only log critical events such as warnings and errors.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineLoggingServices.ForwardingService">
            <summary>
            Chains another logging service to this service. All incoming local events will be forwarded to the
            chained logging service.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.EngineLoggingServices.FlushBuildEventsImmediatly">
            <summary>
            When true, only log critical events such as warnings and errors.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.onlyLogCriticalEvents">
            <summary>
            Use to optimize away status messages. When this is set to true, only "critical"
            events like errors are logged.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.paused">
            <summary>
            Whether the loggers are paused. If they are paused, we do not pass on any events.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.loggingQueueOfBuildEvents">
            <summary>
            A dual queue which allows for one reader multiple writer access (used to receive events from 
            the engine and the TEM)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.loggingQueueOfNodeEvents">
            <summary>
            A dual queue which allows for one reader multiple writer access (used to receive events from
            other nodes)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.forwardingService">
            <summary>
            If there are multiple logging services hooked up to an engine, the events
            are forwarding from the top service down.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.lastFlushTime">
            <summary>
            Last timestamp when the queue was flushed
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.requestedQueueFlush">
            <summary>
            If the number of items in the queue goes up in a spike the logging service can request
            a flush of the queue. To prevent multiple requests this flag is used to indicate that
            flush request has already been posted
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.EngineLoggingServices.flushRequestEvent">
            <summary>
            An event used to request a flush of the logging service. Typically triggered due to 
            a spike in logging activity.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.IItemPropertyGrouping">
            <summary>
            Just an empty interface that is "implemented" by BuildPropertyGroup, BuildItemGroup, and Choose.
            It's just so we can pass these objects around as similar things.  The other alternative would
            have been just to use "Object", but that's even less strongly typed.
            </summary>
            <owner>DavidLe, RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Import">
            <summary>
            This class represents a single Import element in a project file
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.ParentProject">
            <summary>
            Returns the parent MSBuild Project object.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.ImportElement">
            <summary>
            Returns the source XmlElement this Import is based on.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.IsImported">
            <summary>
            Returns true if this Import came from an imported project
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.ProjectPath">
            <summary>
            Returns the original import path from the Import element
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.ProjectPathAttribute">
            <summary>
            Internal accessor for the project path XML attribute
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.EvaluatedProjectPath">
            <summary>
            Returns the full evaluated import path
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.Condition">
            <summary>
            The condition string for this UsingTask
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Import.ConditionAttribute">
            <summary>
            Internal accessor for the condition XML attribute
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Import.#ctor(System.Xml.XmlElement,Microsoft.Build.BuildEngine.Project,System.Boolean)">
            <summary>
            Internal constructor
            </summary>
            <param name="importElement"></param>
            <param name="isImported"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Import.SetEvaluatedProjectPath(System.String)">
            <summary>
            Sets the full evaluated project path for this import.
            </summary>
            <param name="newEvaluatedProjectPath"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ImportCollection">
            <summary>
            This class represents a collection of all Import elements in a given project file
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.#ctor(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Constructor exposed to the outside world
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.GetEnumerator">
            <summary>
            IEnumerable member method for returning the enumerator
            </summary>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection member method for copying the contents of this collection into an array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ImportCollection.Count">
            <summary>
            ICollection member property for returning the number of items in this collection
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ImportCollection.IsSynchronized">
            <summary>
            ICollection member property for determining whether this collection is thread-safe
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ImportCollection.SyncRoot">
            <summary>
            ICollection member property for returning this collection's synchronization object
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ImportCollection.ParentProject">
            <summary>
            Read-only accessor for the Project instance that this ImportCollection belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.Clear">
            <summary>
            Removes all Imports from this collection. Does not alter the parent project's XML.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ImportCollection.Item(System.String)">
            <summary>
            Gets the Import object with the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.CopyTo(Microsoft.Build.BuildEngine.Import[],System.Int32)">
            <summary>
            Copy the contents of this collection into a strongly typed array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.AddNewImport(System.String,System.String)">
            <summary>
            Adds a new import to the project ,and adds a corresponding &lt;Import&gt; element to the end of the project.
            </summary>
            <param name="projectFile">Project file to add the import to</param>
            <param name="condition">Condition. If null, no condition is added.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportCollection.RemoveImport(Microsoft.Build.BuildEngine.Import)">
            <summary>
            Removes an import from the project, and removes the corresponding &lt;Import&gt; element
            from the project's XML.
            </summary>
            <param name="importToRemove"></param>
            <owner>JeffCal</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ImportedProject">
            <summary>
            This class represents a project that has been imported into another project with the &lt;Import&gt; tag.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportedProject.#ctor(System.String)">
            <summary>
            Creates an instance of this class for the specified project file.
            </summary>
            <owner>SumedhK</owner>
            <param name="projectFile">The imported project file.</param>
            <exception cref="T:System.Xml.XmlException">Thrown when the project file contains invalid XML.</exception>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ImportedProject.Xml">
            <summary>
            Gets the XML for the imported project.
            </summary>
            <owner>SumedhK</owner>
            <value>The parsed XML from the imported project file.</value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ImportedProject.HasChangedOnDisk(System.String)">
            <summary>
            Checks if the imported project file has changed on disk.
            </summary>
            <remarks>
            PERF NOTE: This method deliberately requires the project file path to be passed in, to avoid caching the path string
            as part of this class. Alternatively, the path could be retrieved from the XmlDocument.BaseURI property (see the
            <see cref="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.GetXmlNodeFile(System.Xml.XmlNode,System.String)"/> method), but again that would be unnecessary work, since the path is
            available to the calling code.
            </remarks>
            <owner>SumedhK</owner>
            <param name="projectFile">The imported project file.</param>
            <returns>true, if project file has changed on disk</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IEngineCallback.PostBuildRequestsToHost(Microsoft.Build.BuildEngine.BuildRequest[])">
            <summary>
            This method is called by a child engine or node provider to request the parent engine
            to build a certain part of the tree which is needed to complete an earlier request
            received from the parent engine. The parent engine is expected to
            pass back buildResult once the build is completed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IEngineCallback.PostBuildResultToHost(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method is called to send results to the parent engine in response to an earlier 
            build request.
            </summary>
            <param name="buildResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IEngineCallback.PostLoggingMessagesToHost(System.Int32,Microsoft.Build.BuildEngine.NodeLoggingEvent[])">
            <summary>
            This method is used to send logging events to the parent engine
            </summary>
            <param name="nodeId"></param>
            <param name="nodeLoggingEventArray"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IEngineCallback.PostCacheEntriesToHost(System.Int32,Microsoft.Build.BuildEngine.CacheEntry[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Posts the given set of cache entries to the parent engine.
            </summary>
            <param name="nodeId"></param>
            <param name="entries"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
            <param name="scopeToolsVersion"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IEngineCallback.GetCachedEntriesFromHost(System.Int32,System.String[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Retrieves the requested set of cache entries from the engine.
            </summary>
            <param name="nodeId"></param>
            <param name="names"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
            <param name="scopeToolsVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IEngineCallback.PostStatus(System.Int32,Microsoft.Build.BuildEngine.NodeStatus,System.Boolean)">
            <summary>
            This method is called to post current status to the parent
            </summary>
            <param name="nodeId"> The identifer for the node </param>
            <param name="nodeStatus">The filled out status structure</param>
            <param name="blockUntilSent">If true the call will not return until the data has been
                                         written out.</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.INodeProvider">
            <summary>
            This interface is used by to provide an engine coordinating a build with access
            to child engines which can execute parts of the build. The provider is entirely 
            responsible for establishing and maintaining the communication between the parent
            engine and the child engines. The provider is also responsible for describing the 
            capabilities of the communication channel and the machines on which the child engines 
            are running so that the parent engine can schedule and coordinate the work appropriately
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.Initialize(System.String,Microsoft.Build.BuildEngine.IEngineCallback,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations,System.String)">
            <summary>
            This method is called by the NodeManager at the engine start up to initialize
            each provider. The configuration string is passed verbatim from the command line
            to the node provider.
            </summary>
            <param name="configuration">Configuration string</param>
            <param name="engineCallback">Interface to use to make engine callbacks</param>
            <param name="parentGlobalProperties">Properties to be passed to the child engine</param>
            <param name="toolsetSearchLocations">Locations to search to toolset paths</param>
            <param name="startupDirectory">Directory from which the parent msbuild.exe was originally invoked</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.QueryNodeDescriptions">
            <summary>
            This method is called by the NodeManager after the Initialize method to query 
            the provider about number and capability of the nodes that it can make available to
            the parent engine. 
            </summary>
            <returns>Description of nodes that this provider</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.AssignNodeIdentifiers(System.Int32[])">
            <summary>
            This method is called by the NodeManager after it queries the provider via QueryNodeDescription
            to provider a unique identifier for each node exposed by the provider. This method can only be called
            after Initialize method has been called.
            </summary>
            <param name="nodeIdentifiers">An array of integer tokens which identify each node</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.RegisterNodeLogger(Microsoft.Build.BuildEngine.LoggerDescription)">
            <summary>
            This method is called by the NodeManager to pass in a description of a forwarding logger 
            that should be loaded on the nodes exposed by the provider. This method can only be called
            after Initialize method has been called.
            </summary>
            <param name="loggerDescription"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.PostBuildRequestToNode(System.Int32,Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            This method is called by the scheduler to request one of the nodes exposed by
            this node provider to build a certain part of the tree. The node is expected to
            pass back buildResult once the build is completed on the remote node
            </summary>
            <param name="nodeIndex">The token indicating which node to use</param>
            <param name="buildRequest">Description of the build request</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.PostBuildResultToNode(System.Int32,Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method is called by the coordinating engine to send results requested by a 
            node during intermediate evaluation
            </summary>
            <param name="nodeIndex"></param>
            <param name="buildRequest"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.RequestNodeStatus(System.Int32,System.Int32)">
            <summary>
            This method is called by the coordinating engine to request the current status of the node.
            This method is used as both a "ping" and to measure the load on the node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.ShutdownNodes(Microsoft.Build.BuildEngine.Node.NodeShutdownLevel)">
            <summary>
            This method is called by the NodeManager when the parent engine indicates that is no
            longer needs the node (typically this is done when the parent engine is shutting down)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.INodeProvider.UpdateSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Tell the nodes to use central logging, UNDONE
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.IntrinsicFunctions">
            <summary>
            The Intrinsic class provides static methods that can be accessed from MSBuild's
            property functions using $([MSBuild]::Function(x,y))
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Add(System.Double,System.Double)">
            <summary>
            Add two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Add(System.Int64,System.Int64)">
            <summary>
            Add two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Subtract(System.Double,System.Double)">
            <summary>
            Subtract two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Subtract(System.Int64,System.Int64)">
            <summary>
            Subtract two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Multiply(System.Double,System.Double)">
            <summary>
            Multiply two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Multiply(System.Int64,System.Int64)">
            <summary>
            Multiply two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Divide(System.Double,System.Double)">
            <summary>
            Divide two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Divide(System.Int64,System.Int64)">
            <summary>
            Divide two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Modulo(System.Double,System.Double)">
            <summary>
            Modulo two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Modulo(System.Int64,System.Int64)">
            <summary>
            Modulo two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Escape(System.String)">
            <summary>
            Escape the string according to MSBuild's escaping rules
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.Unescape(System.String)">
            <summary>
            Unescape the string according to MSBuild's escaping rules
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.BitwiseOr(System.Int32,System.Int32)">
            <summary>
            Perform a bitwise OR on the first and second (first | second) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.BitwiseAnd(System.Int32,System.Int32)">
            <summary>
            Perform a bitwise AND on the first and second (first &amp; second) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.BitwiseXor(System.Int32,System.Int32)">
            <summary>
            Perform a bitwise XOR on the first and second (first ^ second) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.BitwiseNot(System.Int32)">
            <summary>
            Perform a bitwise NOT on the first and second (~first) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.GetRegistryValue(System.String,System.String)">
            <summary>
            Get the value of the registry key and value, default value is null
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.GetRegistryValue(System.String,System.String,System.Object)">
            <summary>
            Get the value of the registry key and value
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.GetRegistryValueFromView(System.String,System.String,System.Object,System.Object[])">
            <summary>
            Get the value of the registry key from one of the RegistryView's specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.MakeRelative(System.String,System.String)">
            <summary>
            Given the absolute location of a file, and a disc location, returns relative file path to that disk location. 
            Throws UriFormatException.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.  
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path.
            If the path cannot be made relative to the base path (for example, it is on another drive), it is returned verbatim.
            </param>
            <returns>relative path (can be the full path)</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.GetDirectoryNameOfFileAbove(System.String,System.String)">
            <summary>
            Locate a file in either the directory specified or a location in the
            direcorty structure above that directory.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.ValueOrDefault(System.String,System.String)">
            <summary>
            Return the string in parameter 'defaultValue' only if parameter 'conditionValue' is empty
            else, return the value conditionValue
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.DoesTaskHostExist(System.String,System.String)">
            <summary>
            Returns true if a task host exists that can service the requested runtime and architecture
            values, and false otherwise. 
            </summary>
            <comments>
            The old engine ignores the concept of the task host entirely, so it shouldn't really
            matter what we return.  So we return "true" because regardless of the task host parameters, 
            the task will be successfully run (in-proc).
            </comments>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.__GetListTest">
            <summary>
            returns if the string contains escaped wildcards
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicFunctions.GetBaseKeyFromKeyName(System.String,Microsoft.Win32.RegistryView,System.String@)">
            <summary>
            Following function will parse a keyName and returns the basekey for it.
            It will also store the subkey name in the out parameter.
            If the keyName is not valid, we will throw ArgumentException.
            The return value shouldn't be null.
            Taken from: \ndp\clr\src\BCL\Microsoft\Win32\Registry.cs
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ItemBucket">
            <summary>
            This class represents a collection of items that are homogeneous w.r.t.
            a certain set of metadata.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ItemBucket.expander">
            <summary>
            This single object contains all of the data necessary to perform expansion of metadata, properties,
            and items.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ItemBucket.lookup">
            <summary>
            The items for this bucket.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ItemBucket.bucketSequenceNumber">
            <summary>
            When buckets are being created for batching purposes, this indicates which order the 
            buckets were created in, so that the target/task being batched gets called with the items
            in the same order as they were declared in the project file.  For example, the first
            bucket created gets bucketSequenceNumber=0, the second bucket created gets 
            bucketSequenceNumber=1, etc.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemBucket.#ctor">
            <summary>
            Private default constructor disallows parameterless instantiation.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemBucket.#ctor(System.Collections.ICollection,System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Build.BuildEngine.Lookup,System.Int32)">
            <summary>
            Creates an instance of this class using the given bucket data.
            </summary>
            <param name="itemNames">Item types being batched on: null indicates no batching is occurring</param>
            <param name="itemMetadata">Hashtable of item metadata values: null indicates no batching is occurring</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemBucket.CompareTo(System.Object)">
            <summary>
            Compares this item bucket against the given one. The comparison is
            solely based on the values of the item metadata in the buckets.
            </summary>
            <owner>SumedhK</owner>
            <param name="obj"></param>
            <returns>
            -1, if this bucket is "less than" the second one
             0, if this bucket is equivalent to the second one
            +1, if this bucket is "greater than" the second one
            </returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemBucket.GetDummyBucketForComparisons(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructs a token bucket object that can be compared against other
            buckets. This dummy bucket is a patently invalid bucket, and cannot
            be used for any other operations besides comparison.
            </summary>
            <remarks>
            PERF NOTE: A dummy bucket is intentionally very light-weight, and it
            allocates a minimum of memory compared to a real bucket.
            </remarks>
            <owner>SumedhK</owner>
            <param name="itemMetadata"></param>
            <returns>An item bucket that is invalid for everything except comparisons.</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ItemBucket.Expander">
            <summary>
            Returns the object that knows how to handle all kinds of expansion for this bucket.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ItemBucket.BucketSequenceNumber">
            <summary>
            When buckets are being created for batching purposes, this indicates which order the 
            buckets were created in, so that the target/task being batched gets called with the items
            in the same order as they were declared in the project file.  For example, the first
            bucket created gets bucketSequenceNumber=0, the second bucket created gets 
            bucketSequenceNumber=1, etc.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ItemBucket.Lookup">
            <summary>
            The items for this bucket.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemBucket.AddItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Adds a new item to this bucket.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Node">
            <summary>
            This class is a representation of a possible remote work item processing subsystem.
            Currently wrapped by LocalNode.
            Owns the Engine on a child node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.#ctor(System.Int32,Microsoft.Build.BuildEngine.LoggerDescription[],Microsoft.Build.BuildEngine.IEngineCallback,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations,System.String)">
            <summary>
            Initialize the node with the id and the callback object
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Node.TotalTaskTime">
            <summary>
            This property returns 0 if profiling is not enabled and otherwise returns the
            total time spent inside user task code
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.PostBuildResultToHost(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method posts outputs of a build to the node that made the request
            </summary>
            <param name="buildResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.PostCacheEntriesToHost(Microsoft.Build.BuildEngine.CacheEntry[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Posts the given set of cache entries to the parent engine.
            </summary>
            <param name="entries"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.GetCachedEntriesFromHost(System.String[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Retrieves the requested set of cache entries from the engine.
            </summary>
            <param name="names"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.PostStatusThrow(Microsoft.Build.BuildEngine.NodeStatus,System.Boolean)">
            <summary>
            A variation of PostStatus that throws instead of calling ReportUnhandledError
            if there's a problem. This allows ReportUnhandledError itself to post status 
            without the possibility of a loop.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.PostBuildRequest(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            This method lets the host request an evaluation of a build request. A local engine
            will be created if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.PostBuildResult(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method lets the engine provide node with results of an evaluation it was waiting on.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.ShutdownNode(Microsoft.Build.BuildEngine.Node.NodeShutdownLevel)">
            <summary>
            Causes the node to safely shutdown and exit
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.UpdateNodeSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function is used to update the settings of the engine running on the node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.RequestStatus(System.Int32)">
            <summary>
            The coordinating engine is requesting status
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.ReportUnhandledError(System.Exception)">
            <summary>
            This function can be used by the node provider to report a failure which doesn't prevent further
            communication with the parent node. The node will attempt to notify the parent of the failure,
            send all outstanding logging events and shutdown.
            </summary>
            <param name="originalException"></param>
            <exception cref="T:System.Exception">Throws exception (with nested original exception) if reporting to parent fails.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Node.ReportFatalCommunicationError(System.Exception,System.IO.TextWriter)">
            <summary>
            This method can be used by the node provider to report a fatal communication error, after
            which further communication with the parent node is no longer possible. The node provider
            can optionally provide a stream to which the current node state will be logged in order
            to assist with debugging of the problem.
            </summary>
            <param name="originalException"></param>
            <param name="loggingStream"></param>
            <exception cref="T:System.Exception">Re-throws exception passed in</exception>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Node.NodeShutdownLevel.BuildCompleteSuccess">
            <summary>
            Notify the engine that a build has completed an reset all data structures
            that should be reset between builds
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Node.NodeShutdownLevel.PoliteShutdown">
            <summary>
            Wait for in progress operations to finish before returning
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Node.NodeShutdownLevel.ErrorShutdown">
            <summary>
            Cancel all in progress operations and return
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NodeManager">
            <summary>
            This class is resposible for managing the node providers - starting, stopping and sharing them.
            Although child nodes have a NodeManager, theirs do nothing as they never has any NodeProviders registered with them.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.#ctor(System.Int32,System.Boolean,Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.RegisterNodeProvider(Microsoft.Build.BuildEngine.INodeProvider)">
            <summary>
            Register an instantiated INodeProvider with the node manager. The node manager will query the nodeprovider
            for a list of its node descriptions, and add these nodes to a master list of nodes which can be used
            by the scheduler. QUESTION: Do we allow duplicate Node Providers?
            </summary>
            <param name="providerToRegister"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.GetNodeDescriptions">
            <summary>
            Provide an array of INodeDescriptionsof the node provided by the node provider for the node. The index of the description
            is the node index to which the description matches
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.RegisterNodeLogger(Microsoft.Build.BuildEngine.LoggerDescription)">
            <summary>
            Register node logger with all currently available providers
            </summary>
            <param name="loggerDescription"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.RequestStatusForNodes(System.Int32)">
            <summary>
            Request status from all nodes in the system
            </summary>
            <param name="responseTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.ShutdownNodes(Microsoft.Build.BuildEngine.Node.NodeShutdownLevel)">
            <summary>
            Shut down each of the nodes for all providers registered to the node manager.
            Shuts down the TEM.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.PostBuildResultToNode(System.Int32,Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            Post a build result to a node, the node index is an index into the list of nodes provided by all node providers
            registered to the node manager, the 0 in index is a local call to taskexecutionmodule
            </summary>
            <param name="nodeIndex"></param>
            <param name="buildResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.PostBuildRequestToNode(System.Int32,Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            Post a build request to a node, the node index is an index into the list of nodes provided by all node providers
            registered to the node manager, the 0 in index is a local call to taskexecutionmodule
            </summary>
            <param name="nodeIndex"></param>
            <param name="buildRequest"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.ExecuteTask(Microsoft.Build.BuildEngine.TaskExecutionState)">
            <summary>
            Execute a task on the local node
            </summary>
            <param name="taskState"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeManager.UpdateSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            TEMPORARY
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeManager.TaskExecutionModule">
            <summary>
            Getter access to the local node
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeManager.MaxNodeCount">
            <summary>
            Number of Nodes being managed by NodeManager
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.parentEngine">
            <summary>
            Pointer to the parent engine
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.nodeList">
            <summary>
            List of node information of nodes provided by registered node providers
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.nodeProviders">
            <summary>
            List of registered node providers
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.statusForNodes">
            <summary>
            Array of status summaries from the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.statusReplyCount">
            <summary>
            Count of status replies recieved
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.statusMessageReceived">
            <summary>
            An event activated when status message arrives
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.NodeManager.taskExecutionModule">
            <summary>
            Local TEM used for executing tasks within the current process
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProvidersNodeInformation">
            <summary>
            Class which contains, information about each of the nodes provided by each of the node providers registered to node manager
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProvidersNodeInformation.NodeProvider">
            <summary>
            Node provider for node
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProvidersNodeInformation.Description">
            <summary>
            Node description for node
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProvidersNodeInformation.NodeIndex">
            <summary>
            Node index relative to the node provider to which it is attached
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProvidersNodeInformation.NodeId">
            <summary>
            The nodeId issued by the engine to this node
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NodeRequestMapping">
            <summary>
            This class is used to store information needed to interpret the response from
            the parent engine when it completes the requested evaluation
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NodeLoggingEvent">
            <summary>
            This class wraps BuildEventArgs and used for sending BuildEventArgs across the node boundary
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeLoggingEvent.#ctor">
            <summary>
            This new constructor is required for custom serialization
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeLoggingEvent.#ctor(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Create an instance of this class wrapping given BuildEventArgs
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeLoggingEvent.BuildEvent">
            <summary>
            The BuildEventArgs wrapped by this class
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeLoggingEvent.LoggerId">
            <summary>
            The ID of the central logger to which this event should be forwarded. By default 
            all regular non-forwarded events are sent to all loggers registered on the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeLoggingEvent.GetLoggingEventId(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Converts a BuildEventArg into its associated enumeration Id.
            Any event which is a derrived event not in the predefined list will be
            considered a custom event and use .net serialization
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeLoggingEvent.GetBuildEventArgFromId(Microsoft.Build.BuildEngine.NodeLoggingEvent.LoggingEventType)">
            <summary>
            Takes in a id (LoggingEventType as an int) and creates the correct specific logging class
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NodeLoggingEventWithLoggerId">
            <summary>
            This class is used to associate wrapped BuildEventArgs with a loggerId which
            identifies which central logger this event should be delivered to.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeLoggingEventWithLoggerId.#ctor(Microsoft.Build.Framework.BuildEventArgs,System.Int32)">
            <summary>
            Create a wrapper for a given event associated with a particular loggerId
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeLoggingEventWithLoggerId.LoggerId">
            <summary>
            The ID of the central logger to which this event should be forwarded
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.PropertyPosition">
            <summary>
            The position of a property to be set inside a project file.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.PropertyPosition.UseExistingOrCreateAfterLastPropertyGroup">
            <summary>
            Replace existing compatible property if present.
            Otherwise, if possible, create a new property in an existing compatible property group.
            If necessary, create a new compatible property group right after the last one in the project.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.PropertyPosition.UseExistingOrCreateAfterLastImport">
            <summary>
            Replace existing compatible property if present.
            Otherwise, create the property after the last imported project.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProcessingPass">
            <summary>
            Whether we are in the first (properties) pass, or the second (items) pass.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProcessingPass.Pass1">
            <summary>
            First pass (evaluating properties)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProcessingPass.Pass2">
            <summary>
            Second pass (evaluating items)
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Project">
             <summary>
             This class represents an MSBuild project.  It is a container for items,
             properties, and targets.  It can load in project content from in-memory
             XML or from an XML file, and it can save to an XML file, preserving
             most whitespace and all XML comments.
            
             All Project objects must be associated with an Engine object, in order
             to get at the loggers and other shared information.  Also, when doing
             a "build", the Engine needs to keep track of which projects are currently
             building.
             </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Project.evaluatedItems">
            <summary>
            A single virtual BuildItemGroup containing all the items in the project, after
            wildcard and property expansion.  This list is what is actually used to
            feed items into the build process (the tasks).  It represents true reality,
            and therefore it gets re-computed every time something in the project changes
            (like a property value for example).
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Project.buildingCount">
            0 means not building; >=1 means building.
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Project.overridingToolsVersion">
            true if the ToolsVersion of this project was overridden; false otherwise.
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Project.perThreadProjectDirectory">
            <summary>
            Items need the project directory in order to evaluate their built-in
            metadata (like "%(FullPath)") when their itemspec is relative. We store this 
            here in thread-local-storage because we cannot modify the public constructors
            to require it, and also it can change during the life of a BuildItem
            (when the item is passed to another project).
            This is also used when evaluating conditions.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.#ctor(Microsoft.Build.BuildEngine.Engine,System.String)">
            <summary>
            Creates an instance of this class for the given engine, specifying a tools version to
            use during builds of this project.
            </summary>
            <owner>RGoel</owner>
            <param name="engine">Engine that will build this project. May be null if the global engine is expected.</param>
            <param name="toolsVersion">Tools version to use during builds of this project instance. May be null,
            in which case we will use the value in the Project's ToolsVersion attribute, or else the engine
            default value.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.#ctor(Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Creates an instance of this class for the given engine.
            </summary>
            <param name="engine">Engine that will build this project.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.#ctor">
            <summary>
            This default constructor creates a new Project object associated with
            the global Engine object.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.PerThreadProjectDirectory">
            <summary>
            The directory of this project. This is needed for evaluating conditions,
            and for evaluating itemspecs. It's easier to share it via TLS than to access
            it directly from every item.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ItemDefinitionLibrary">
            <summary>
            The one and only item definition library for this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.EvaluatedItemsByName">
            <summary>
            Returns the table of evaluated items by type.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.FullFileName">
            <summary>
            Gets or sets the fully qualified path + filename of the project file. This could be empty-string if the project
            doesn't have a file associated with it -- for example, if we were given the XML in memory.
            </summary>
            <owner>RGoel</owner>
            <value>The full path of the project file.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.DefaultTargets">
            <summary>
            Read-write accessor for the "DefaultTargets" attribute of the
            &lt;Project&gt; element.  This is passed in and out as a semicolon-separated
            list of target names.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.DefaultBuildTargets">
            <summary>
            Returns the array of actual target names that will be built by default. First choice is 
            the defaultTargets attribute on the Project node, if not present we fall back to the first target
            in the project file. Return value is null if there are no targets in the project file.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.InitialTargets">
            <summary>
            Read-write accessor for the "InitialTargets" attribute of the
            &lt;Project&gt; element.  This is passed in and out as a semicolon-separated
            list of target names.  The "get" returns all of the initial targets in both
            the main project and all imported projects (after property expansion).  The 
            "set" only sets the initial targets for the main project.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.CombinedInitialTargetNames">
            <summary>
            Returns an ArrayList containing strings which are all of the target names that are considerd
            "initial targets" -- those targets that get run every time before any other targets.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ParentEngine">
            <summary>
            Gets the parent engine object.
            </summary>
            <owner>RGoel</owner>
            <value>Engine object.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.IsLoadedByHost">
            <summary>
            This property indicates whether a particular project was loaded by the host
            (e.g., the IDE) and therefore needs to be kept around permanently, or whether
            this is just a project that is only being built and thus can be discarded
            when the build is complete.  The default is "true", and any Project instantiated
            directly by the host will always have a value of "true", because there's no
            way for the host to change it.  The only entity that should every be changing
            this to "false" is the Engine itself because it knows that we're just building
            this project and don't need to keep it around for design-time scenarios.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.IsValidated">
            <summary>
            Indicates if the project (file) is to be validated against a schema.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.IsBuilding">
            <summary>
            Is this project in the process of building?
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.SchemaFile">
            <summary>
            The schema against which the project (file) and all its imported files are validated.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.BuildEnabled">
            <summary>
            This controls whether or not the building of targets/tasks is enabled for this
            project.  This is for security purposes in case a host wants to closely
            control which projects it allows to run targets/tasks.  By default, for a newly
            created project, we will use whatever setting is in the parent engine.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ToolsVersion">
            <summary>
            When gotten, returns the effective tools version being used by this project.
            If the tools version is being overridden, the overriding value will be the effective tools version. 
            Otherwise, if there is a ToolsVersion attribute on the Project element, that is the effective tools version. 
            Otherwise, the default tools version of the parent engine is the effective tools version.
            
            When set, overrides the current tools version of this project with the provided value.
            
            NOTE: This is distinct to the ToolsVersion attribute, if any, on the Project element.
            To get and set the ToolsVersion attribute on the Project element use the Project.DefaultToolsVersion
            property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.OverridingToolsVersion">
            <summary>
            Returns true if the ToolsVersion of this project is being overridden; false otherwise.
            </summary>
            <owner>JeffCal</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.DefaultToolsVersion">
            <summary>
            Public read-write accessor for the ToolsVersion xml attribute found on the 
            &lt;Project /&gt; element.  If this attribute is not present on the &lt;Project/&gt;
            element, getting the value will return the default tools version of the parent Engine.
            
            NOTE: This value is distinct from the effective tools version used during a build,
            as that value may be overridden during construction of the Project instance or
            by setting the Project.ToolsVersion property. Setting this attribute value will not change the 
            effective tools version if it has been overridden. To change the effective tools version, 
            set the Project.ToolsVersion property.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.HasToolsVersionAttribute">
            <summary>
            Public read  accessor to determine if the Project file has the ToolsVersion xml attribute
            e.g. &lt;Project ToolsVersion="3.5"/&gt; . This is different to knowing the inherited
            value and allows us to spot Whidbey (VS 8.0) projects.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.Toolset">
            <summary>
            This private property is here for convenience so that the error checking needn't be duplicated throughout
            the project object.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.TaskRegistry">
            <summary>
            The project's task registry.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ProjectDirectory">
            <summary>
            The project directory where the project file is in, this can be empty if the project is constructed in memory and does 
            not come from a file location
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.GlobalProperties">
            <summary>
            Read-write accessor for the project's global properties collection.
            To set or modify global properties, a caller can hand us an entire
            new BuildPropertyGroup here, or can simply modify the properties in the
            BuildPropertyGroup that is already here.  Global properties are those
            defined via the "/p:" switch on the MSBuild.exe command-line, or
            properties like "Configuration" set by the IDE prior to invoking MSBuild.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.EnvironmentProperties">
            <summary>
            Read-write internal accessor for the property group containing
            environment variables.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ReservedProperties">
            <summary>
            Read-only internal accessor for the property group containing
            MSBuild reserved properties (like "MSBuildProjectName", for example).
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.EvaluatedProperties">
             <summary>
             Read-only accessor for the final set of evaluated properties for
             this project.  This takes into account all conditions and property
             expansions, and gives back a single linear collection of project-level
             properties, which includes global properties, environment variable
             properties, reserved properties, and normal/imported properties.
             Through this collection, the caller can modify any normal
             properties, and the changes will be reflected in the project file
             when it is saved again.  However, adding or deleting properties
             from this collection will not impact the project.
            
             PERF WARNING: cloning a BuildPropertyGroup can be very expensive -- use
             only when a copy of the entire property bag is strictly necessary
             </summary>
             <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ProjectBuildEventContext">
            <summary>
            Get the event context information for this project instance
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.EvaluatedItems">
            <summary>
            Read-only accessor for the final collection of evaluated items, taking
            into account all conditions and property expansions.  Through this
            collection, the caller can modify any of the items present, and it
            will be reflected in the project file the next time it is saved.
            However, adding or deleting items from this collection will not impact
            the project.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.EvaluatedItemsIgnoringCondition">
             <summary>
             Read-only accessor for the collection of evaluated items, taking into
             account property expansions and wildcards, but ignoring "Condition"s.
             This way, an IDE can display all items regardless of whether they're
             relevant for a particular build flavor or not.  Through this
             collection, the caller can modify any of the items present, and it
             will be reflected in the project file the next time it is saved.
             However, adding or deleting items from this collection will not impact
             the project.
            
             See the comments for the "evaluatedItemsIgnoringCondition" member
             variable up above.
             </summary>
             <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.PropertyGroups">
            <summary>
            Read-only accessor for the raw property groups of this project.
            This is essentially a reflection of the data in the XML for this
            project's properties as well as any &lt;Import&gt;'d projects.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.Targets">
            <summary>
            Read-only accessor for the target groups of this project.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.UsingTasks">
            <summary>
            Read-only accessor for the UsingTask elements of this project.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.Imports">
            <summary>
            Read-only accessor for the imported projects of this project
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ItemGroups">
            <summary>
            Read-only accessor for the raw item groups of this project.
            This is essentially a reflection of the data in the XML for this
            project's items as well as any &lt;Import&gt;'d projects.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.Xml">
            <summary>
            Read-only accessor for the string of Xml representing this project.
            Used for verification in unit testing.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.XmlDocument">
            <summary>
            Read-only accessor for the XmlDocument representing this project.
            Used for verification in unit testing.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ProjectElement">
            <summary>
            Read-only accessor for main &lt;Project&gt; element.
            </summary>
            <value></value>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.IsReset">
            <summary>
            Is this project currently in a reset state in terms of the build?  That is,
            is it ready to be built?  A project that is reset means that all of the
            targets are marked "NotStarted", and there are no output items or output
            properties present in the evaluated lists.
            </summary>
            <remarks>
            This accessor is really just here for unit-testing purposes only.
            </remarks>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.ConditionedProperties">
            <summary>
            Read-only accessor for conditioned properties table.
            </summary>
            <value></value>
            <owner>DavidLe</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.IsDirty">
            <summary>
            Tells you whether this project file is dirty such that it would need
            to get saved to disk.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.IsDirtyNeedToReevaluate">
            <summary>
            Tells you whether this project file is dirty such that it would need
            to get reevaluated.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.TimeOfLastDirty">
            <summary>
            Returns the timestamp of when the project was last touched in a way
            that would require it to need to be saved.
            </summary>
            <value>The DateTime object indicating when project was dirtied.</value>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.XmlDeclarationNode">
            <summary>
            Returns the project file's ?xml node, or null if it's not present
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.Encoding">
            <summary>
            Internal method for getting the project file encoding. When we have the managed vsproject assembly, this should be made public.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Project.LoadSettings">
            <summary>
            Load settings for this project
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.GetEvaluatedProperty(System.String)">
            <summary>
            Returns a single evaluated property value.
            Call this to retrieve a few properties. If you need to retrieve many properties
            use EvaluatedProperty accessor.
            </summary>
            <param name="propertyName">Name of the property to retrieve.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetDefaultTargets(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Sets the project's default targets from the given list of semi-colon-separated target names after expanding all
            embedded properties in the list.
            </summary>
            <owner>SumedhK</owner>
            <param name="defaultTargetsList"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.IsEquivalentToProject(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            Determines whether a project file can be considered equivalent to this Project, taking into account
            the set of global properties and the tools version (if any) that that project file 
            is going to be built with.
            </summary>
            <param name="projectFullPath"></param>
            <param name="projectGlobalProperties"></param>
            <param name="projectToolsVersion">May be null, indicating the value from the project attribute, or the global default, should be used</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ClearParentEngine">
            <summary>
            For internal use only by the Engine object when it lets go of a project.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.MarkProjectAsDirty">
            <summary>
            This forces a re-evaluation of the project the next time somebody
            calls EvaluatedProperties or EvaluatedItems.  It is also a signal
            that the project file is dirty and needs to be saved to disk.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.MarkProjectAsDirtyForReevaluation">
            <summary>
            This forces a re-evaluation of the project the next time somebody
            calls EvaluatedProperties or EvaluatedItems.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.MarkProjectAsDirtyForSave">
            <summary>
            This marks a project as needing to be saved to disk.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.MarkProjectAsDirtyForReprocessXml">
            <summary>
            Indicates to the project that on the next build, we actually need to walk the
            entire XML structure from scratch.  It's pretty rare that this is required.
            Examples include changes to &lt;Import&gt; or &lt;Target&gt; tags.  These kinds of changes
            can require us to re-compute some of our data structures, and in some cases,
            there's no easy way to do it, except to walk the XML again.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.GetConditionedPropertyValues(System.String)">
            <summary>
            This returns a list of possible values for a particular property.  It
            gathers this list by looking at all of the "Condition" attributes
            in the project file.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.GetEvaluatedItemsByName(System.String)">
            <summary>
            Retrieves a group of evaluated items of a particular item type.
            </summary>
            <owner>RGoel</owner>
            <param name="itemName"></param>
            <returns>items of requested type</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.GetEvaluatedItemsByNameIgnoringCondition(System.String)">
            <summary>
            Retrieves a group of evaluated items of a particular item type. This is really just about the items that are persisted
            in the project file, ignoring all "Condition"s, so that an IDE can display all items regardless of whether they're
            relevant for a particular build flavor or not.
            </summary>
            <owner>RGoel</owner>
            <remarks>See the comments for the "evaluatedItemsByNameIgnoringCondition" member variable up above.</remarks>
            <param name="itemName"></param>
            <returns>items of requested type</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ProcessToolsVersionDependentProperties">
            <summary>
            Prepares the MSBuildToolsPath and MSBuildBinPath reserved properties
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetProjectFileReservedProperties">
            <summary>
            Sets the filename for this project, and sets the appropriate MSBuild
            reserved properties accordingly.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ResetBuildStatus">
            <summary>
            Resets the state of each target in this project back to "NotStarted",
            so that a subsequent build will actually build those targets again.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Load(System.String)">
            <summary>
            Reads in the contents of this project from a project XML file on disk.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Load(System.String,Microsoft.Build.BuildEngine.ProjectLoadSettings)">
            <summary>
            Reads in the contents of this project from a project XML file on disk.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Load(System.String,Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.ProjectLoadSettings)">
            <summary>
            Reads in the contents of this project from a project XML file on disk.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Load(System.IO.TextReader)">
            <summary>
            Reads in the contents of this project from a string containing the Xml contents.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Load(System.IO.TextReader,Microsoft.Build.BuildEngine.ProjectLoadSettings)">
            <summary>
            Reads in the contents of this project from a string containing the Xml contents.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.LoadXml(System.String)">
            <summary>
            Reads in the contents of this project from a string containing the Xml contents.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.LoadXml(System.String,Microsoft.Build.BuildEngine.ProjectLoadSettings)">
            <summary>
            Reads in the contents of this project from a string containing the Xml contents.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.LoadFromXmlDocument(System.Xml.XmlDocument,Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.ProjectLoadSettings)">
            <summary>
            Reads in the contents of this project from an in-memory XmlDocument handed to us.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.InternalLoadFromXmlDocument(System.Xml.XmlDocument,Microsoft.Build.BuildEngine.ProjectLoadSettings)">
            <summary>
            Reads in the contents of this project from an in-memory XmlDocument.
            </summary>
            <remarks>This method throws exceptions -- it is the responsibility of the caller to handle them.</remarks>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Save(System.String)">
            <summary>
            Saves the current contents of the project to an XML project file on disk.
            This method will NOT add the ?xml node if it's not already present
            </summary>
            <param name="projectFileName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the current contents of the project to an XML project file on
            disk using the supplied encoding.
            </summary>
            <param name="projectFileName"></param>
            <param name="encoding"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Save(System.IO.TextWriter)">
            <summary>
            Saves the current contents of the project to a TextWriter object.
            </summary>
            <param name="textWriter"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewPropertyGroup(System.Boolean)">
            <summary>
            Adds a new &lt;PropertyGroup&gt; element to the project, and returns the
            corresponding BuildPropertyGroup object which can then be populated with
            properties.
            </summary>
            <param name="insertAtEndOfProject"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewImportedPropertyGroup(System.String,System.String)">
            <summary>
            Adds a new &lt;PropertyGroup&gt; element to the project, and returns the
            corresponding BuildPropertyGroup object which can then be populated with
            properties.
            </summary>
            <owner>DavidLe</owner>
            <param name="importedFilename"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetProperty(System.String,System.String)">
            <summary>
            Sets (or adds) a property to the project at a sensible location.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetProperty(System.String,System.String,System.String)">
             <summary>
             This method is called from the IDE to set a particular property at
             the project level.  The IDE doesn't care which property group it's
             in, as long as it gets set.  This method will search the existing
             property groups for a property with this name.  If found, it will
             change the value in place.  Otherwise, it will either add a new
             property to that property group, or possibly even add a new property
             group to the project.
            
             This method also takes the "Condition" string for the property group
             that the IDE wants this property placed under.
             </summary>
             <owner>RGoel, DavidLe</owner>
             <param name="propertyName"></param>
             <param name="propertyValue"></param>
             <param name="condition"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetImportedProperty(System.String,System.String,System.String,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Sets the value of a property that comes from an imported project.
            Updates the current project (the one this method is called on) with
            a property that has no Xml behind it, and updates the imported project
            with a real backed property.
            </summary>
            <owner>DavidLe</owner>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="condition"></param>
            <param name="importProject"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetProperty(System.String,System.String,System.String,Microsoft.Build.BuildEngine.PropertyPosition)">
            <summary>
            Set a property at a particular position inside the project file.
            The property will be in a group that has the specified condition.
            If necessary, a new property or property group will be created.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="propertyValue">Property value.</param>
            <param name="condition">The condition for this property.</param>
            <param name="position">Specifies the position within the project file for the property.</param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetProperty(System.String,System.String,System.String,Microsoft.Build.BuildEngine.PropertyPosition,System.Boolean)">
            <summary>
            Sets a property, and optionally escapes it so that it will be treated as a literal 
            value despite any special characters that may be in it.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="condition"></param>
            <param name="position"></param>
            <param name="treatPropertyValueAsLiteral"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetImportedProperty(System.String,System.String,System.String,Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.PropertyPosition)">
            <summary>
            Set a property at a particular position inside an imported project file.
            The property will be in a group that has the specified condition.
            If necessary, a new property or property group will be created.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="propertyValue">Property value.</param>
            <param name="condition">The condition for this property.</param>
            <param name="importedProject">Specifies the project the property is imported from.</param>
            <param name="position">Specifies the position within the project file for the property.</param>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetImportedProperty(System.String,System.String,System.String,Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.PropertyPosition,System.Boolean)">
            <summary>
            Set a property at a particular position inside an imported project file.
            The property will be in a group that has the specified condition.
            If necessary, a new property or property group will be created.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="propertyValue">Property value.</param>
            <param name="condition">The condition for this property.</param>
            <param name="importedProject">Specifies the project the property is imported from.</param>
            <param name="position">Specifies the position within the project file for the property.</param>
            <param name="treatPropertyValueAsLiteral"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetPropertyAtHelper(System.String,System.String,System.String,System.Boolean,Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.PropertyPosition)">
            <summary>
            Set a property at a particular position inside the project file.
            The property will be in a group that has the specified condition.
            If necessary, a new property or property group will be created.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="propertyValue">Property value.</param>
            <param name="condition">The condition for this property.</param>
            <param name="importedProperty">Is the property an imported property.</param>
            <param name="importedProject">The project from which the property is imported, if it is an imported property.</param>
            <param name="position">Specifies the position within the project file for the property.</param>
            <owner>RGoel, JomoF, DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.FindMatchingPropertyPosition(System.String,System.String,System.Boolean,System.Boolean,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup@,Microsoft.Build.BuildEngine.BuildProperty@)">
            <summary>
            This method will attempt to find an existing property group and property that matches the requirements.
            If no property is found then matchingProperty will be null.
            If no property group is found then matchingPropertyGroup will be null.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <param name="condition">The condition on the property to match.</param>
            <param name="matchOnlyAfterImport">If true, then the matching property must be after the last import.</param>
            <param name="importedPropertyGroup">Is the BuildPropertyGroup imported or not.</param>
            <param name="importedFilename">Name of the imported project (if BuildPropertyGroup is imported).</param>
            <param name="matchingPropertyGroup">Receives the matching property group. Null if none found.</param>
            <param name="matchingProperty">Receives the matching property. Null if none found.</param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveAllPropertyGroups">
            <summary>
            Removes all &lt;PropertyGroup&gt;'s from the main project file, but doesn't
            touch anything in any of the imported project files.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemovePropertyGroupsWithMatchingCondition(System.String,System.Boolean)">
            <summary>
            Removes all &lt;PropertyGroup&gt;'s from the main project file that have a
            specific "Condition".  This will not remove any property groups from
            imported project files.
            </summary>
            <param name="matchCondition">Condition on the PropertyGroups</param>
            <param name="includeImportedPropertyGroups"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemovePropertyGroupsWithMatchingCondition(System.String)">
            <summary>
            Removes all &lt;PropertyGroup&gt;'s from the main project file that have a
            specific "Condition".  This will not remove any property groups from
            imported project files.
            </summary>
            <param name="matchCondition">Condition on the PropertyGroups</param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemovePropertyGroup(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Removes a &lt;PropertyGroup&gt; from the main project file.
            </summary>
            <param name="propertyGroupToRemove"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveImportedPropertyGroup(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Removes a &lt;PropertyGroup&gt; from the main project file.
            </summary>
            <param name="propertyGroupToRemove"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewItemGroup">
            <summary>
            Adds a new &lt;ItemGroup&gt; element to the project, and returns the
            corresponding BuildItemGroup object which can then be populated with
            items or anything else that might belong inside an &lt;ItemGroup&gt;.
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewItem(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new item to the project, and optionally escapes the Include value so it's treated as a literal value.
            </summary>
            <param name="itemName"></param>
            <param name="itemInclude"></param>
            <param name="treatItemIncludeAsLiteral"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewItem(System.String,System.String)">
            <summary>
            Called from the IDE to add a new item of a particular type to the project file. This method tries to add the new item
            near the other items of the same type.
            </summary>
            <owner>RGoel</owner>
            <param name="itemName">The name of the item list this item belongs to.</param>
            <param name="itemInclude">The value of the item's <c>Include</c> attribute i.e. the item-spec</param>
            <returns>The new item after evaluation.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveAllItemGroups">
            <summary>
            Removes all &lt;ItemGroup&gt;'s from the main project file, but doesn't
            touch anything in any of the imported project files.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveItemGroupsWithMatchingCondition(System.String)">
            <summary>
            Removes all &lt;ItemGroup&gt;'s from the main project file that have a
            specific "Condition".  This will not remove any item groups from
            imported project files.
            </summary>
            <param name="matchCondition"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveItemGroup(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Removes a &lt;ItemGroup&gt; from the main project file.
            </summary>
            <param name="itemGroupToRemove"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveItemsByName(System.String)">
            <summary>
            Removes all items of a particular type from the main project file.
            </summary>
            <param name="itemName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RemoveItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Removes an item from the main project file.
            </summary>
            <param name="itemToRemove"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewImport(System.String,System.String)">
            <summary>
            Adds a new &lt;Import&gt; element to the end of the project.
            </summary>
            <param name="projectFile"></param>
            <param name="condition"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewUsingTaskHelper(System.String,System.String,System.Boolean)">
            <summary>
            Helper for AddNewUsingTaskFromAssemblyName and AddNewUsingTaskFromAssemblyFile
            </summary>
            <param name="taskName"></param>
            <param name="assembly"></param>
            <param name="assemblyFile"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewUsingTaskFromAssemblyName(System.String,System.String)">
            <summary>
            Adds a new &lt;UsingTask&gt; element to the end of the project
            </summary>
            <param name="taskName"></param>
            <param name="assemblyName"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddNewUsingTaskFromAssemblyFile(System.String,System.String)">
            <summary>
            Adds a new &lt;UsingTask&gt; element to the end of the project
            </summary>
            <param name="taskName"></param>
            <param name="assemblyFile"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.SetProjectExtensions(System.String,System.String)">
            <summary>
            Sets the project extensions string.
            </summary>
            <owner>JomoF</owner>
            <param name="id"></param>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.GetProjectExtensions(System.String)">
            <summary>
            Returns the project extensions string for the given ID.
            </summary>
            <owner>JomoF</owner>
            <param name="id"></param>
            <returns>String value of specified ID.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Build">
            <summary>
            Builds the default targets in this project.
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Build(System.String)">
            <summary>
            Builds the specified target in this project.
            </summary>
            <param name="targetName"></param>
            <returns></returns>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Build(System.String[])">
            <summary>
            Builds the specified list of targets in this project.
            </summary>
            <remarks>
            This is the public method that host IDEs can call to build a project.
            It just turns around and calls "BuildProject" on the engine object.
            All builds must go through the engine object, because it needs to
            keep track of the projects that are currently in progress, so that
            we don't end up in infinite loops when we have circular project-to-
            project dependencies.
            </remarks>
            <param name="targetNames"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Build(System.String[],System.Collections.IDictionary)">
            <summary>
            Builds the specified list of targets in this project, and returns the target outputs.
            </summary>
            <remarks>
            This is the public method that host IDEs can call to build a project.
            It just turns around and calls "BuildProject" on the engine object.
            All builds must go through the engine object, because it needs to
            keep track of the projects that are currently in progress, so that
            we don't end up in infinite loops when we have circular project-to-
            project dependencies.
            </remarks>
            <param name="targetNames"></param>
            <param name="targetOutputs"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.Build(System.String[],System.Collections.IDictionary,Microsoft.Build.BuildEngine.BuildSettings)">
            <summary>
            Builds the specified list of targets in this project using the specified
            flags, and returns the target outputs.
            </summary>
            <remarks>
            This is the public method that host IDEs can call to build a project.
            It just turns around and calls "BuildProject" on the engine object.
            All builds must go through the engine object, because it needs to
            keep track of the projects that are currently in progress, so that
            we don't end up in infinite loops when we have circular project-to-
            project dependencies.
            </remarks>
            <param name="targetNames"></param>
            <param name="targetOutputs"></param>
            <param name="buildFlags"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.BuildInternal(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            This internal method actually performs the build of the specified targets
            in the project.  If no targets are specified, then we build the
            "defaultTargets" as specified in the attribute of the &lt;Project&gt; element
            in the XML.
            </summary>
            <param name="buildRequest"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.RefreshProjectIfDirty">
            <summary>
            Checks the dirty flags and calls the necessary methods to update the
            necessary data structures, etc.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ProcessMainProjectElement">
            <summary>
            Process the attributes and all the children of the &lt;Project&gt; tag.
            This basically just parses through the XML and instantiates the
            appropriate internal objects.  It doesn't actually do any evaluation
            or building.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ProcessProjectAttributes(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Deal with all of the attributes on the &lt;Project&gt; element of the
            XML project file.
            </summary>
            <param name="projectElement"></param>
            <param name="importedProject"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ProcessProjectChildren(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Process each of the direct children beneath the &gt;Project&lt; element.
            These include things like &lt;PropertyGroup&gt;, &lt;ItemGroup&gt;, &lt;Target&gt;, etc.
            This method is simply capturing the data in the form of our own
            internal objects.  It is not actually evaluating any of the properties
            or other data.
            </summary>
            <param name="projectElement"></param>
            <param name="projectDirectoryLocation"></param>
            <param name="importedProject"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.ProcessImportElement(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Process the &lt;Import&gt; element by loading the child project file, and processing its &lt;Project&gt; element. In a
            given main project, the same file cannot be imported twice -- this is to prevent circular imports.
            </summary>
            <owner>RGoel</owner>
            <param name="importElement"></param>
            <param name="projectDirectoryLocation"></param>
            <param name="importedProject"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.LoadImportedProject(Microsoft.Build.BuildEngine.Import)">
            <summary>
            Loads the XML for the specified project that is being imported into the main project.
            </summary>
            <owner>RGoel, SumedhK</owner>
            <param name="import">The project being imported</param>
            <returns>XML for imported project; null, if duplicate import.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.OnRenameOfImportedFile(System.String,System.String)">
            <summary>
            This method gets called by the engine when any loaded project gets renamed (e.g.,
            saved to a different location, etc.).  This method should be responsible for updating
            all internal data structures to reflect the new name of the imported file.
            </summary>
            <param name="oldFileName"></param>
            <param name="newFileName"></param>
            <owner>RGoel, LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.EvaluateProject(System.Boolean)">
            <summary>
            Here, we use the internal objects we created during processing of the
            XML to actually evaluate the properties, items, targets, etc.  We
            will be evaluating the conditions, and expanding property/item
            references, etc.  We don't actually build though.
            </summary>
            <remarks>
            If this has been called by <see cref="M:Microsoft.Build.BuildEngine.Project.ProcessMainProjectElement"/> we don't evaluate properties
            again, since that's already been done. We don't evaluate import tags again, for the same reason.
            In such a case, this method represents only evaluation "Pass 2".
            </remarks>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.EvaluateAllPropertyGroups">
            <summary>
            Walk through all of the PropertyGroups in the project (including
            imported PropertyGroups) in order, and evaluate the properties.
            We end up producing a final linear evaluated property collection
            called this.evaluatedProperties.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.EvaluateAllItemGroups(System.Boolean,System.Boolean)">
            <summary>
            Evaluate all the &lt;ItemGroup&gt;'s in the project (including imported
            &lt;ItemGroup&gt;'s) in order, producing a final list of evaluated items.
            </summary>
            <param name="ignoreCondition"></param>
            <param name="honorCondition"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.EvaluateAllUsingTasks">
            <summary>
            This processes the &lt;UsingTask&gt; elements in the project file as well
            as the imported project files, by adding the necessary data to the
            task registry.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddToItemListByNameIgnoringCondition(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Adds an item to the appropriate project's evaluated items collection.  This method is 
            NOT to be used during the build process to add items that are emitted by tasks.
            This is only for the purposes of adding statically-declared items in the logical
            project file, or items added to the project file by an IDE modifying the project contents.
            </summary>
            <param name="itemToInclude">The specific item to add to the project</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.AddToItemListByName(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Adds an item to the appropriate project's evaluated items collection.  This method is 
            NOT to be used during the build process to add items that are emitted by tasks.
            This is only for the purposes of adding statically-declared items in the logical
            project file, or items added to the project file by an IDE modifying the project contents.
            </summary>
            <param name="itemToInclude">The specific item to add to the project</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.IsSolutionFilename(System.String)">
            <summary>
            This method returns true if the specified filename is a solution file (.sln), otherwise
            it returns false.
            </summary>
            <param name="filename"></param>
            <returns></returns>
            <owner>jomof</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Project.IsVCProjFilename(System.String)">
            <summary>
            Returns true if the specified filename is a VC++ project file, otherwise returns false
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectBuildState">
            <summary>
            This class is used to maintain a state of execution of a build request. Once a build request is
            received it is wrapped in this class 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.#ctor(Microsoft.Build.BuildEngine.BuildRequest,System.Collections.ArrayList,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Create a build request from the list of targets to build and build request object
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.CurrentBuildContextState">
            <summary>
            Current state of the context
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.BuildComplete">
            <summary>
            True if the project build context has been completed either successfully or with a failure
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.BuildResult">
            <summary>
            True if the project build context has been completed successfully, false otherwise
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.NameOfBlockingTarget">
            <summary>
            Name of the target that blocks the in progress target. Null there is no target
            blocking the inprogress target
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.NameOfTargetInProgress">
            <summary>
            Name of the target currently in progress
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.TargetNamesToBuild">
            <summary>
            List of targets that need to be completed in order to complete the context
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.BuildRequest">
            <summary>
            Build request that caused the context to come into existance (either from the host or generated)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.GetNextTarget">
            <summary>
            Move to the next target in the context. Return null if there is no next target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.RemoveBlockingTarget">
            <summary>
            Remove the top blocking target 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.AddBlockingTarget(System.String)">
            <summary>
            Add another blocking target 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.RecordBuildCompletion(System.Boolean)">
            <summary>
            Marks the build context and build result as complete with the given result
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.RecordBuildException">
            <summary>
            Marks the build context and build result appropriate for an exception thrown within
            a build context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.ContainsCycle(System.String)">
            <summary>
            This method returns true if the top blocking target appears in the stack of
            blocking targets more than once, thus forming a cycle.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.ContainsBlockingTarget(System.String)">
            <summary>
            This method return true if a given target name appears anywhere in the list of 
            blocking targets
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectBuildState.GetParentTarget(System.String)">
            <summary>
            This method is used by the target cycle detector to find the parent target for
            the given target. The parent only exists if there is at least 1 
            blocking target. If there is less than 1 blocking target the parent is determined
            by the orgin of the build request that caused this build context.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ProjectBuildState.ProjectBuildEventContext">
            <summary>
            Contains the event context for the build context, this is created when the ProjectBuildState is created
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState">
            <summary>
            States of execution of a build request
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.StartingFirstTarget">
            <summary>
            Starting the first target within the request. Default initial state.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.StartingBlockingTarget">
            <summary>
            Starting a target due to a depends on or on error relationship
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.WaitingForTarget">
            <summary>
            The target which is needed is already in progress due to another request, so wait for a result
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.BuildingCurrentTarget">
            <summary>
            Currently in progress of building a needed target
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.CycleDetected">
            <summary>
            Cycle is detected and is caused by this request
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.ExceptionThrown">
            <summary>
            There is an exception thrown during the execution of this request
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.BuildComplete">
            <summary>
            All needed target have been completed or an error terminating the request has occured
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ProjectBuildState.BuildContextState.RequestFilled">
            <summary>
            The result of the request has been sent back to the requesting party
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.#ctor">
            <summary>
            Default constructor.  Just instantiates the hash table.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.AddProject(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Adds the specified Project object to our data structure, if it's not already present.
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.RemoveProjects(System.String)">
            <summary>
            Removes all projects with the specified full path from our manager.
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.RemoveProject(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Searches our tables for a project with same full path, tools version, and global property settings 
            Removes particular project from the project manager.
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetProject(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            Searches our tables for a project with same full path and global property settings 
            as those passed in to the method.  
            </summary>
            <param name="projectFileFullPath"></param>
            <param name="globalProperties"></param>
            <param name="toolsVersion">Tools version a matching project must have</param>
            <returns>Project object if found, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetProject(System.Int32)">
            <summary>
            Searches our tables for a project with same project id
            as the one passed in to the method. Note this method is currently O(n) 
            with the number of projects, so if it used on a hot code path it needs to 
            use an extra hashtable to achieve O(1).
            </summary>
            <param name="projectId"></param>
            <returns>Project object if found, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetFirstProject(System.String)">
            <summary>
            Gets the first project contained in the ProjectManager that matches the full path
            specified.
            </summary>
            <param name="projectFileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetInProgressProjects">
            <summary>
            Gets the list of projects which are currently in process of being build (i.e have at least
            one build request inside the project)
            </summary>
            <returns>List of in progress projects</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.ResetBuildStatusForAllProjects">
            <summary>
            Resets the build status of every single project in our ProjectManager.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.Clear">
            <summary>
            Clears all references to all projects from this ProjectManager.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.AddRemoteProject(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.Int32)">
            <summary>
            Store a record indicating that project with the given name is assigned to the given node,
            it's not already present.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetRemoteProject(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            Get a node that the project has been assigned to
            </summary>
            <returns>Index of the node the project is assigned to and 0 otherwise</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.AddUnloadedProjectRecord(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            This function adds the project to the table of previously loaded projects, if it's 
            not already present.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.HasProjectBeenLoaded(System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            This functions returns true if a project with the same properties, toolset version and filename has been previously loaded. It
            will return false for currently loaded projects and projects that have never been loaded.
            </summary>
            <returns>True if exact same instance has been loaded before </returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.AddProject(System.Collections.Hashtable,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Adds a project to the specified table, if it isn't already present.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.AddProjectEntry(System.Collections.Hashtable,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,System.Int32)">
            <summary>
            Add a project entry to the specified table, if it isn't already present.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetProject(System.Collections.Hashtable,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            Retrieve any project from the table that has the same file name, global properties, and tools version.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectManager.GetProjectEntry(System.Collections.Hashtable,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String)">
            <summary>
            Retrieve the project entry from the entry table based on project file name, globalProperties, and toolsVersion. 
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler">
            <summary>
            This class is used for validating projects against a designated schema.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler.#ctor">
            <summary>
            Private constructor because real constructor needs a file name.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler.#ctor(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.EngineLoggingServices,System.String)">
            <summary>
            This constructor initializes all required data.
            </summary>
            <owner>JomoF</owner>
            <param name="loggingServices"></param>
            <param name="binPath"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler.VerifyProjectFileSchema(System.String,System.String)">
            <summary>
            Validates a project file against the given schema.
            </summary>
            <owner>JomoF</owner>
            <param name="projectFile"></param>
            <param name="schemaFile">Can be null.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler.VerifyProjectSchema(System.String,System.String)">
            <summary>
            Validates a project in an XML string against the given schema.
            </summary>
            <owner>JomoF</owner>
            <param name="projectXml"></param>
            <param name="schemaFile">Can be null.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler.VerifyProjectSchema(System.IO.TextReader,System.String,System.String)">
            <summary>
            Validates a project against the given schema -- if no schema is provided, uses the default schema.
            </summary>
            <owner>JomoF</owner>
            <param name="contentReader"></param>
            <param name="schemaFile">Can be null.</param>
            <param name="projectFile"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler.OnSchemaValidationError(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Receives any errors that occur while validating the project's schema.
            </summary>
            <owner>RGoel</owner>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.RegistryKeyWrapper">
            <summary>
            Thin wrapper around Microsoft.Win32.RegistryKey that can be 
            subclassed for testing purposes
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.#ctor(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey)">
            <summary>
            Initializes this RegistryKeyWrapper to wrap the specified key.
            Does not check for a null key.
            </summary>
            <param name="wrappedKey"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.#ctor(System.String)">
            <summary>
            Initializes this RegistryKeyWrapper to wrap the key at the specified path
            and assumes the key is underneath HKLM
            Note that registryKeyPath should be relative to HKLM.
            </summary>
            <param name="registryKey"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.#ctor(System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            Initializes this RegistryKeyWrapper to wrap the key at the specified path
            </summary>
            <param name="registryKey"></param>
            <param name="registryHive"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RegistryKeyWrapper.Name">
            <summary>
            Name of the registry key
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.GetValue(System.String)">
            <summary>
            Gets the value with name "name" stored under this registry key
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.GetValueNames">
            <summary>
            Gets the names of all values underneath this registry key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.GetSubKeyNames">
            <summary>
            Gets the names of all sub keys immediately below this registry key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.OpenSubKey(System.String)">
            <summary>
            Returns the RegistryKeyWrapper around the sub key with name "name". If that does
            not exist, returns a RegistryKeyWrapper around null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.Exists">
            <summary>
            Returns true if the wrapped registry key exists.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RegistryKeyWrapper.WrappedKey">
            <summary>
            Lazy getter for the root tools version registry key: means that this class
            will never throw registry exceptions from the constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryKeyWrapper.NotExpectedException(System.Exception)">
            <summary>
            Returns false if this is a known exception thrown by the registry API.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.RequestRoutingContext">
            <summary>
            This context is created to contain information about a build request that has been forwarded to
            a child node for execution. All further communication from the child with regard to the build 
            request (such a logging messages, errors, follow up build requests or build result) will be
            processing using information from this context.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RequestRoutingContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Build.BuildEngine.CacheScope,Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Default constructor for a routing context
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RequestRoutingContext.ParentHandleId">
            <summary>
            The handle to the parent context which maybe invalidHandle if the request
            originated from the host.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RequestRoutingContext.ParentNodeIndex">
            <summary>
            The node from the triggering build request (overwritten on the build request during routing)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RequestRoutingContext.ParentRequestId">
            <summary>
            The request Id from the triggering build request (overwritten on the build request during routing)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RequestRoutingContext.CacheScope">
            <summary>
            The cache scope where the result should be stored
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RequestRoutingContext.TriggeringBuildRequest">
            <summary>
            The build request being routed
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Router">
            <summary>
            This call interfaces with the scheduler and notifies it of events of interest such as build results or
            build requests. It also routes the build results appropriately depending on if it is running on the child or
            on the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Router.#ctor">
            <summary>
            Private constructor to avoid parameterless instantiation
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Router.#ctor(Microsoft.Build.BuildEngine.Engine,Microsoft.Build.BuildEngine.Scheduler)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Router.ChildMode">
            <summary>
            Returns true on the child engine and false otherwise. this is used by the engine to determine if the engine is running on a child 
            process or not. The childMode is set to true in the NodeLocalEngineLoop which is only executed on a child process.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Router.ParentNode">
            <summary>
            Returns null on the parent engine and a pointer to the node hosting the engine on the child
            engines
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Router.SingleThreadedMode">
            <summary>
            Used by the engine to choose more effecient code path for single proc
            execution. In general the usage should be minimized by using inheretence and
            different classes in single proc and multiproc cases
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Router.PostDoneNotice(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            This method creates a BuildResult using the information contained in a completed build request and
            then routes it to the right node. On a child process, this means either consume the result localy,
            or send it to the parent node. On a parent node, this means either consume the result locally or 
            send it to a child node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Router.PostDoneNotice(System.Int32,Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            Route a given BuildResult to a given node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Router.PostBuildRequest(Microsoft.Build.BuildEngine.BuildRequest,System.Int32)">
            <summary>
            This method is called once the engine has decided to sent a build request to a child node.
            Route the given BuildRequest to the given node. If necessary a routing context is 
            created to manage future communication with the node regarding the build request.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Router.nodeManager">
            <summary>
            The node manager is used as a proxy for communication with child nodes
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Router.parentEngine">
            <summary>
            The parent engine who instantiated the router
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Router.scheduler">
            <summary>
            Scheduler who is responsible for determining which nodes a build request should be sent to.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Router.childMode">
            <summary>
            Is the router instantiated on a child process
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Router.parentNode">
            <summary>
            What is the parent Node on which the engine is hosted if we are a child process
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ScheduleRecord">
            <summary>
            This class is a container used by the scheduler to keep track of what work is being done by which node.
            This includes seeing which build requests are blocked waiting for another build request to complete and which
            are actively in progress
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.Blocked">
            <summary>
            Returns true if this request is blocked waiting for the child requests to 
            complete
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.EvaluationNode">
            <summary>
            Returns the node on which the request is being build
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.ParentKey">
            <summary>
            Key to the parent object
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.RecordKey">
            <summary>
            Key to the current object
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.ProjectName">
            <summary>
            Name of the project being build
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.ToolsVersion">
            <summary>
            The version of the project
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ScheduleRecord.TargetsBuild">
            <summary>
            Targets being build in the project
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ScheduleRecord.AddChildRecord(Microsoft.Build.BuildEngine.ScheduleRecord)">
            <summary>
            Add a child request to this record. Child requests block the parent.
            </summary>
            <param name="childRecord"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ScheduleRecord.ReportChildCompleted(Microsoft.Build.BuildEngine.ScheduleRecordKey)">
            <summary>
            Remove a completed child request possibly unblocking the parent
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ScheduleRecordKey">
            <summary>
            This class is used as a key combining both HandleId and RequestId into a single class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ScheduleRecordKey.Equals(System.Object)">
            <summary>
            Override the equals operator to give valuetype comparison semantics
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Scheduler">
            <summary>
            This class is responsible for determining on which node and when a task should be executed. It
            receives work requests from the Target class and communicates to the appropriate node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.#ctor(System.Int32,Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Create the scheduler.
            </summary>
            <param name="nodeId">the id of the node where the scheduler was instantiated on</param>
            <param name="parentEngine">a reference to the engine who instantiated the scheduler</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.Initialize(Microsoft.Build.BuildEngine.INodeDescription[])">
            <summary>
            Provide the scheduler with the information about the available nodes. This function has to be
            called after the NodeManager has initialzed all the node providers
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.CalculateNodeForBuildRequest(Microsoft.Build.BuildEngine.BuildRequest,System.Int32)">
            <summary>
            This method specifies which node a particular build request has to be evaluated on.
            </summary>>
            <returns>Id of the node on which the build request should be performed</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.NotifyOfSchedulingDecision(Microsoft.Build.BuildEngine.BuildRequest,System.Int32)">
            <summary>
            This method is called to update the datastructures to reflect that given request will
            be built on a given node.
            </summary>
            <param name="currentRequest"></param>
            <param name="nodeUsed"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.NotifyOfBuildResult(System.Int32,Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method is called when a build request is completed on a particular node. NodeId is never used instead we look up the node from the build request
            and the schedule record table
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.NotifyOfBuildRequest(System.Int32,Microsoft.Build.BuildEngine.BuildRequest,System.Int32)">
            <summary>
            Called when the engine is in the process of sending a buildRequest to a child node. The entire purpose of this method 
            is to switch the traversal strategy of the systems if there are nodes which do not have enough work availiable to them.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.NotifyOfBlockedRequest(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            Called by the engine to indicate that a particular request is blocked waiting for another
            request to finish building a target.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.NotifyOfUnblockedRequest(Microsoft.Build.BuildEngine.BuildRequest)">
            <summary>
            Called by the engine to indicate that a particular request is no longer blocked waiting for another
            request to finish building a target
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.NotifyOfBlockedNode(System.Int32)">
            <summary>
            Called by the engine to indicate that a node has run out of work
            </summary>
            <param name="nodeIndex"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Scheduler.DumpState">
            <summary>
            Used by the introspector to dump the state when the nodes are being shutdown due to an error.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.localNodeId">
            <summary>
            NodeId of the engine who instantiated the scheduler. This is used to determine if a 
            BuildRequest should be build locally as the project has already been loaded on this node.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.nodes">
            <summary>
            An array of nodes to which the scheduler can schedule work.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.totalRequestsPerNode">
            <summary>
            Counts the total number of outstanding requests (no result has been seen for the request) for a node.
            This is incremented in NotifyOfSchedulingDecision when a request it given to a node
            and decremented in NotifyOfBuildResult when results are returned (posted) from a node.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.blockedRequestsPerNode">
            <summary>
            The number of BuildRequests blocked waiting for results for each node. 
            This will be incremented once when a build request is scheduled which was generated as part of a msbuild callback
            and once for each call to NotifyOfBlockedRequest.
            
            It is decremented for each call to NotifyOfUnblockedRequest and once all of the child requests have been fullfilled.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.postBlockCount">
            <summary>
            Keeps track of how many projects need to be sent to a node after the node has told the scheduler it has run out of work.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.useLoadBalancing">
            <summary>
            Indicates the scheduler should balance work accross nodes.
            This is only true when the environment variable MSBUILDLOADBALANCE is not 0
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.scheduleTableLock">
            <summary>
            Lock object for the handleIdToScheduleRecord dictionary
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.handleIdToScheduleRecord">
            <summary>
            Keep track of build requsts to determine how many requests are blocked waiting on other build requests to complete.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.childMode">
            <summary>
            Indicates the scheduler is instantiated on a child node. This is being determined by 
            initializaing the variable to true in the constructor and then setting it to false in the 
            initialize method (the initialize method will only be called on the parent engine)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.parentEngine">
            <summary>
            Reference to the engine who instantiated the scheduler
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.nodeWorkLoadProjectCount">
            <summary>
            Number of requests a node should have in an unblocked state before the system switches to a depth first traversal strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Scheduler.lastUsedNode">
            <summary>
            Used to calculate which node a build request should be sent to if the scheduler is operating in a round robin fashion.
            Each time a build request is scheduled to a node in CalculateNodeForBuildRequest the lastUsedNode is incremented.
            This value is then mod'd (%) with the number of nodes to alternate which node the next build request goes to.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Target">
            <summary>
            This class represents a single target in its parent project.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Target.BuildState">
            <summary>
            This enumeration contains a list of the possible states that the target could be in, in terms of the build process.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.#ctor(System.Xml.XmlElement,Microsoft.Build.BuildEngine.Project,System.Boolean)">
            <summary>
            Initializes a persisted target from an existing &lt;Target&gt; element which exists either in the main parent project
            file or one of the imported files.
            </summary>
            <param name="targetElement"></param>
            <param name="project"></param>
            <param name="importedFromAnotherProject"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.Id">
            <summary>
            Id for the target
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.Name">
            <summary>
            Gets the target's name as specified in the "Name" attribute. The value of this attribute is never evaluated.
            </summary>
            <value>The target name string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.DependsOnTargets">
            <summary>
            Gets the target's unevaluated "DependsOnTargets" string.
            Returns unevaluated.
            </summary>
            <value>The raw "DependsOnTargets" string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.Inputs">
            <summary>
            Gets the target's unevaluated "Inputs" string.
            Returns unevaluated.
            </summary>
            <value>The raw "Inputs" string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.Outputs">
            <summary>
            Gets the target's unevaluated "Outputs" string.
            Returns unevaluated.
            </summary>
            <value>The raw "Outputs" string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.Condition">
            <summary>
            Accessor for the item's "condition". Returned unevaluated.
            </summary>
            <returns>Condition string.</returns>
            <value>The raw condition string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.ConditionAttribute">
            <summary>
            Read-only accessor for accessing the XML attribute for "Condition".  Callers should
            never try and modify this.  Go through this.Condition to change the condition.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.TargetElement">
            <summary>
            Gets the XML representing this target.
            </summary>
            <value>The XmlElement for the target.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.DependsOnTargetsAttribute">
            <summary>
            Gets the target's unevaluated "DependsOnTargets" XML element.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.ProjectFileOfTargetElement">
            <summary>
            Gets the filename/path of the project this target was defined in. This file could be different from the file of this
            target's parent project, because the target could be imported. If the target is only defined in-memory, then it may
            not have a filename associated with it.
            </summary>
            <value>The filename/path string of this target's original project, or empty string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.ParentProject">
            <summary>
            Read-only accessor for this target's parent Project object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.ParentEngine">
            <summary>
            Read-only accessor for this target's parent Project object.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.GetBatchableTargetParameters">
            <summary>
            Calculates the batchable target parameters, which can be changed if inputs and outputs are
            set after target creation.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Target.IsImported">
            <summary>
            This returns a boolean telling you whether this particular target
            was imported from another project, or whether it was defined
            in the main project.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.GetEnumerator">
            <summary>
            Allows the caller to use a foreach loop to enumerate through the individual 
            BuildTask objects contained within this Target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.ResetBuildStatus">
            <summary>
            Sets the build state back to "NotStarted".
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.UpdateTargetStateOnBuildCompletion(Microsoft.Build.BuildEngine.Target.BuildState,System.Collections.Generic.List{Microsoft.Build.BuildEngine.BuildItem})">
            <summary>
            Update the target data structures since the target has completed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.Build(Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Builds this target if it has not already been built as part of its parent project. Before we actually execute the
            tasks for this target, though, we first call on all the dependent targets to build themselves.
            This function may throw InvalidProjectFileException
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.ContinueBuild(Microsoft.Build.BuildEngine.ProjectBuildState,Microsoft.Build.BuildEngine.TaskExecutionContext)">
            <summary>
            This method is called repeatedly to execute the target in multi-threaded mode. In single
            threaded mode it is called once and it loops internally until the execution is finished.
            </summary>
            <param name="buildContext">Context within which the target is being executed</param>
            <param name="taskExecutionContext">Result of last execution (multi-threaded only)</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.ExecuteOneTask(System.Xml.XmlElement,Microsoft.Build.Framework.ITaskHost)">
            <summary>
            Executes a task within a target. This method initializes a task engine for the given task, and then executes the task
            using the engine.
            </summary>
            <param name="taskNode"></param>
            <param name="hostObject"></param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.MarkTargetAsDirty">
            <summary>
            Indicates that something has changed within the &lt;Target&gt; element, so the project
            needs to be saved and re-evaluated at next build.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.SetOrRemoveTargetAttribute(System.String,System.String)">
            <summary>
            Sets or removes an attribute from the target element. Marks the target dirty after the update
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
            <returns>XmlAttribute which has been updated</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.AddNewTask(System.String)">
            <summary>
            Adds a task with the specified name to the end of this target.  This method
            does all of the work to manipulate the project's XML content.
            </summary>
            <param name="taskName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Target.RemoveTask(Microsoft.Build.BuildEngine.BuildTask)">
            <summary>
            Removes the specified BuildTask from the target.  This method correctly updates
            the project's XML content, so the task will no longer show up when the project
            is saved out.
            </summary>
            <param name="taskElement"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetExecutionWrapper">
            <summary>
            This class is responsible for executing the target. Target only executs once within a project,
            so this class comes into existance for the execution and is thrown away once the execution is
            complete. It wraps all of the data and methods needed to execute a target. The execution
            is done via state machine with three primary states - BuildingDependencies, RunningTasks,
            BuildingErrorClause. This states map to the primary actions that are performed during target
            execution. The execution is blocking in single threaded mode and is iterative in multi-threaded
            mode.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.NotifyBuildCompletion(Microsoft.Build.BuildEngine.Target.BuildState,Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Mark the target data structures and notify waiting targets since the target has completed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.InitializeOnErrorClauseExecution">
            <summary>
            Creates a list of targets to execute for the OnErrorClause
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.InitializeForRunningFirstNonIntrinsicTask">
            <summary>
            Called before the first non-intrinsic task is run by this object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.ExecuteCurrentTask(Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Executes all tasks in the target linearly from beginning to end, for one batch of the target.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.PrepareBuildEventContext(System.Boolean)">
            <summary>
            Create a new build event context for tasks
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.SubmitNonIntrinsicTask(System.Xml.XmlElement,Microsoft.Build.Framework.ITaskHost,Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Create a TaskExecutionState structure which contains all the information necessary
            to execute the task and send this information over to the TEM for task execution
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.GatherTargetOutputs">
            <summary>
            Gathers the target's outputs, per its output specification (if any).
            </summary>
            <remarks>
            This method computes the target's outputs using the items currently available in the project; depending on when this
            method is called, it may compute a different set of outputs -- as a result, we only want to gather the target's
            outputs once, and cache them until the target's build state is reset.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.AddWaitingBuildContext(Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Add a build context that should get a result of the target once it is finished
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.GetWaitingBuildContexts">
            <summary>
            Get the list of build contexts currently waiting on the target
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetExecutionWrapper.NotifyWaitingTargets(Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Iterate over the contexts waiting for the target - triggering updates for each of them since the target 
            is complete
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetCollection">
            <summary>
            This class represents a collection of persisted &lt;Target&gt;'s.  Each
            MSBuild project has exactly one TargetCollection, which includes
            all the imported Targets as well as the ones in the main project file.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.#ctor(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Creates an instance of this class for the given project.
            </summary>
            <owner>RGoel</owner>
            <param name="parentProject"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetCollection.ParentProject">
            <summary>
            Read-only accessor for parent project object.
            </summary>
            <value></value>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetCollection.Count">
            <summary>
            Read-only property which returns the number of Targets contained
            in our collection.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized">
            <summary>
            This ICollection property tells whether this object is thread-safe.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetCollection.SyncRoot">
            <summary>
            This ICollection property returns the object to be used to synchronize
            access to the class.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetCollection.Item(System.String)">
            <summary>
            Gets the target with the given name, case-insensitively.
            Note that this also defines the .BuildItem() accessor automagically.
            </summary>
            <owner>RGoel</owner>
            <param name="index"></param>
            <returns>The target with the given name.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            This ICollection method copies the contents of this collection to an 
            array.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator">
            <summary>
            This IEnumerable method returns an IEnumerator object, which allows
            the caller to enumerate through the Target objects contained in
            this TargetCollection.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.AddOverrideTarget(Microsoft.Build.BuildEngine.Target)">
            <summary>
            Adds a new Target to our collection.  This method does nothing
            to manipulate the project's XML content.
            If a target with the same name already exists, it is replaced by 
            the new one.
            </summary>
            <param name="newTarget">target to add</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(System.String)">
            <summary>
            Adds a new &lt;Target&gt; element to the project file, at the very end.
            </summary>
            <param name="targetName"></param>
            <returns>The new Target object.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Microsoft.Build.BuildEngine.Target)">
            <summary>
            Removes a target from the project, and removes the corresponding &lt;Target&gt; element
            from the project's XML.
            </summary>
            <param name="targetToRemove"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.Exists(System.String)">
            <summary>
            Checks if a target with given name already exists
            </summary>
            <param name="targetName">name of the target we're looking for</param>
            <returns>true if the target already exists</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCollection.Clear">
            <summary>
            Removes all Targets from our collection.  This method does nothing
            to manipulate the project's XML content.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.DependencyAnalysisResult">
            <summary>
            Enumeration of the results of target dependency analysis.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer">
            <summary>
            This class is used for performing dependency analysis on targets to determine if they should be built/rebuilt/skipped.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.#ctor(System.String,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Creates an instance of this class for the given target.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.TargetToAnalyze">
            <summary>
            Gets the target to perform dependency analysis on.
            </summary>
            <owner>SumedhK</owner>
            <value>Target object.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.TargetInputSpecification">
            <summary>
            Gets the value of the target's "Inputs" attribute.
            </summary>
            <owner>SumedhK</owner>
            <value>Input specification string (can be empty).</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.TargetOutputSpecification">
            <summary>
            Gets the value of the target's "Outputs" attribute.
            </summary>
            <owner>SumedhK</owner>
            <value>Output specification string (can be empty).</value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.PerformDependencyAnalysis(Microsoft.Build.BuildEngine.ItemBucket,System.Collections.Hashtable@,System.Collections.Hashtable@)">
            <summary>
            Compares the target's inputs against its outputs to determine if the target needs to be built/rebuilt/skipped.
            </summary>
            <remarks>
            The collections of changed and up-to-date inputs returned from this method are valid IFF this method decides an
            incremental build is needed.
            </remarks>
            <owner>SumedhK</owner>
            <param name="bucket"></param>
            <param name="changedTargetInputs"></param>
            <param name="upToDateTargetInputs"></param>
            <returns>
            DependencyAnalysisResult.SkipUpToDate, if target is up-to-date;
            DependencyAnalysisResult.SkipNoInputs, if target has no inputs;
            DependencyAnalysisResult.SkipNoOutputs, if target has no outputs;
            DependencyAnalysisResult.IncrementalBuild, if only some target outputs are out-of-date;
            DependencyAnalysisResult.FullBuild, if target is out-of-date
            </returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.LogReasonForBuildingTarget(Microsoft.Build.BuildEngine.DependencyAnalysisResult)">
            <summary>
            Does appropriate logging to indicate why this target is being built fully or partially.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.GetFullBuildReason(Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail)">
            <summary>
            Returns a string indicating why a full build is occurring.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.GetIncrementalBuildReason(Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail)">
            <summary>
            Returns a string indicating why an incremental build is occurring.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.ExtractUniqueInputsAndOutputs(System.String@,System.String@)">
            <summary>
            Extract only the unique inputs and outputs from all the inputs and outputs gathered
            during depedency analysis
            </summary>
            <param name="inputs">[out] the unique inputs</param>
            <param name="outputs">[out] the unique outputs</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.ParseTargetInputOutputSpecifications(Microsoft.Build.BuildEngine.ItemBucket,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.ArrayList@)">
            <summary>
            Parses the target's "Inputs" and "Outputs" attributes and gathers up referenced items.
            </summary>
            <param name="bucket"></param>
            <param name="itemVectorsInTargetInputs"></param>
            <param name="itemVectorTransformsInTargetInputs"></param>
            <param name="discreteItemsInTargetInputs"></param>
            <param name="itemVectorsInTargetOutputs"></param>
            <param name="discreteItemsInTargetOutputs"></param>
            <param name="targetOutputItemSpecs"></param>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.PerformDependencyAnalysisIfNoOutputs">
            <summary>
            Determines if the target needs to be built/rebuilt/skipped if it has no outputs (because they evaluated to empty).
            </summary>
            <owner>SumedhK</owner>
            <returns>Indication of how to build the target.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.PerformDependencyAnalysisIfDiscreteInputs(System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Determines if the target needs to be built/rebuilt/skipped if it has discrete inputs.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemVectorsInTargetInputs"></param>
            <param name="itemVectorTransformsInTargetInputs"></param>
            <param name="discreteItemsInTargetInputs"></param>
            <param name="itemVectorsReferencedOnlyInTargetInputs"></param>
            <param name="targetOutputItemSpecs"></param>
            <returns>Indication of how to build the target.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.PerformDependencyAnalysisIfCorrelatedInputsOutputs(System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList,System.Collections.Hashtable@,System.Collections.Hashtable@)">
            <summary>
            Determines if the target needs to be built/rebuilt/skipped if its inputs and outputs can be correlated.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemVectorsInTargetInputs"></param>
            <param name="itemVectorsInTargetOutputs"></param>
            <param name="itemVectorsReferencedInBothTargetInputsAndOutputs"></param>
            <param name="changedTargetInputs"></param>
            <param name="upToDateTargetInputs"></param>
            <returns>Indication of how to build the target.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.PerformDependencyAnalysisIfDiscreteOutputs(System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Determines if the target needs to be built/rebuilt/skipped if it has discrete outputs.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemVectorsInTargetInputs"></param>
            <param name="itemVectorTransformsInTargetInputs"></param>
            <param name="discreteItemsInTargetInputs"></param>
            <param name="targetOutputItemSpecs"></param>
            <returns>Indication of how to build the target.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.SeparateItemVectorsFromDiscreteItems(System.Xml.XmlAttribute,System.Collections.Generic.List{System.String},Microsoft.Build.BuildEngine.ItemBucket,System.Collections.Hashtable@,System.Collections.Hashtable,System.Collections.Hashtable@)">
            <summary>
            Separates item vectors from discrete items, and discards duplicates. If requested, item vector transforms are also
            separated out. The item vectors (and the transforms) are partitioned by type, since there can be more than one item
            vector of the same type.
            </summary>
            <remarks>
            The item vector collection is a Hashtable of Hashtables, where the top-level Hashtable is indexed by item type, and
            each "partition" Hashtable is indexed by the item vector itself.
            </remarks>
            <owner>SumedhK</owner>
            <param name="attributeContainingItems">The XML attribute which we're operating on here.  
            The sole purpose of passing in this parameter is to be able to provide line/column number 
            information in the event there's an error.</param>
            <param name="items"></param>
            <param name="bucket"></param>
            <param name="itemVectors"></param>
            <param name="itemVectorTransforms"></param>
            <param name="discreteItems"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.GetItemSpecsFromItemVectors(System.Collections.Hashtable)">
            <summary>
            Retrieves the item-specs of all items in the given item vector collection.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemVectors"></param>
            <returns>list of item-specs</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.GetItemSpecsFromItemVectors(System.Collections.Hashtable,System.String)">
            <summary>
            Retrieves the item-specs of all items of the specified type in the given item vector collection.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemVectors"></param>
            <param name="itemType"></param>
            <returns>list of item-specs</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.DiffHashtables(System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Finds the differences in the keys between the two given hashtables.
            </summary>
            <owner>SumedhK</owner>
            <param name="h1"></param>
            <param name="h2"></param>
            <param name="commonKeys"></param>
            <param name="uniqueKeysInH1"></param>
            <param name="uniqueKeysInH2"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.IsAnyOutOfDate(Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail@,System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Compares the set of files/directories designated as "inputs" against the set of files/directories designated as
            "outputs", and indicates if any "output" file/directory is out-of-date w.r.t. any "input" file/directory.
            </summary>
            <remarks>
            NOTE: Internal for unit test purposes only.
            </remarks>
            <owner>danmose</owner>
            <param name="inputs"></param>
            <param name="outputs"></param>
            <returns>true, if any "input" is newer than any "output", or if any input or output does not exist.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.RecordUniqueInputsAndOutputs(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Record the unique input and output files so that the "up to date" message
            can list them in the log later.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.IsOutOfDate(System.String,System.String,System.String,System.String)">
            <summary>
            Compares the file/directory designated as "input" against the file/directory designated as "output", and indicates if
            the "output" file/directory is out-of-date w.r.t. the "input" file/directory.
            </summary>
            <remarks>
            If the "input" does not exist on disk, we treat its disappearance as a change, and consider the "input" to be newer
            than the "output", regardless of whether the "output" itself exists.
            </remarks>
            <owner>SumedhK</owner>
            <param name="input"></param>
            <param name="output"></param>
            <param name="inputItemName"></param>
            <param name="outputItemName"></param>
            <returns>true, if "input" is newer than "output"</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.RecordComparisonResults(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add timestamp comparison results to a list, to log them together later.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetDependencyAnalyzer.CompareLastWriteTimes(System.String,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Compares the last-write times of the given files/directories.
            </summary>
            <remarks>
            Existing files/directories are always considered newer than non-existent ones, and two non-existent files/directories
            are considered to have the same last-write time.
            </remarks>
            <owner>SumedhK</owner>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="path1DoesNotExist">[out] indicates if the first file/directory does not exist on disk</param>
            <param name="path2DoesNotExist">[out] indicates if the second file/directory does not exist on disk</param>
            <returns>
            -1  if the first file/directory is older than the second;
             0  if the files/directories were both last written to at the same time;
            +1  if the first file/directory is newer than the second
            </returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.OutofdateReason">
            <summary>
            Why TLDA decided this entry was out of date
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail">
            <summary>
            A logging detail entry. Describes what TLDA decided about inputs / outputs
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail.Reason">
            <summary>
            The reason that we are logging this entry
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail.InputItemName">
            <summary>
            The input item name (can be null)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail.OutputItemName">
            <summary>
            The output item name (can be null)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail.Input">
            <summary>
            The input file
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail.Output">
            <summary>
            The output file
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail.#ctor(System.String,System.String,System.String,System.String,Microsoft.Build.BuildEngine.OutofdateReason)">
            <summary>
            Construct a log detail element
            </summary>
            <param name="input">Input file</param>
            <param name="output">Output file</param>
            <param name="inputItemName">Input item name (can be null)</param>
            <param name="outputItemName">Output item name (can be null)</param>
            <param name="reason">The reason we are logging</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskExecutionMode">
            <summary>
            The manner in which a task engine runs its assigned task.
            </summary>
            <remarks>
            This enum is public because it is passed between processes i.e. the engine
            and the node process.
            </remarks>
            <owner>SumedhK</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionMode.Invalid">
            <summary>
            This entry is necessary to use the enum with binary math. It is never used outside 
            intermediate calculations.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionMode.ExecuteTaskAndGatherOutputs">
            <summary>
            In this mode, the task engine actually runs the task and retrieves its outputs.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionMode.InferOutputsOnly">
            <summary>
            In this mode, the task engine only infers the task's outputs from its &lt;Output&gt; tags.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskEngine">
            <summary>
            This class is used by targets to execute tasks. This class encapsulates the information needed to run a single task once.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.#ctor(System.Xml.XmlElement,Microsoft.Build.Framework.ITaskHost,System.String,System.String,Microsoft.Build.BuildEngine.EngineLoggingServices,System.Int32,Microsoft.Build.BuildEngine.TaskExecutionModule,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Creates an instance of this class for the specified task.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskEngine.TaskName">
            <summary>
            Gets the string name of the task.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskEngine.TaskClass">
            <summary>
            Gets the .NET class that defines the task.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.CreateListOfParameterValues">
            <summary>
            Build up a list of all parameters on the task, including those in any Output tags,
            in order to find batchable metadata references
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.FindTask">
            <summary>
            Given the task XML, this method tries to find the task. It uses the following search order:
            1) checks the tasks declared by the project, searching by exact name
            2) checks the global task declarations (in *.TASKS in MSbuild bin dir), searching by exact name
            3) checks the tasks declared by the project, searching by fuzzy match (missing namespace, etc.)
            4) checks the global task declarations (in *.TASKS in MSbuild bin dir), searching by fuzzy match (missing namespace, etc.)
            
            The search ordering is meant to reduce the number of assemblies we scan, because loading assemblies can be expensive.
            The tasks and assemblies declared by the project are scanned first, on the assumption that if the project declared
            them, they are likely used.
            </summary>
            <remarks>
            This is internal so that BuildTask.Type can call it.
            </remarks>
            <returns>true, if task was found</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.PrepareAppDomain">
            <summary>
            Sets up an app domain for the task batch, if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.ExecuteTask(Microsoft.Build.BuildEngine.TaskExecutionMode,Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Called to execute a task within a target. This method instantiates the task, sets its parameters, and executes it. 
            </summary>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.ExecuteBucket(Microsoft.Build.BuildEngine.EngineProxy,Microsoft.Build.BuildEngine.ItemBucket,System.Int32,Microsoft.Build.BuildEngine.TaskExecutionMode)">
            <summary>
            Execute a single bucket
            </summary>
            <returns>true if execution succeeded</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.UpdateContinueOnError(Microsoft.Build.BuildEngine.ItemBucket,Microsoft.Build.BuildEngine.EngineProxy)">
            <summary>
            Recomputes the task's "ContinueOnError" setting.
            </summary>
            <param name="bucket"></param>
            <param name="engineProxy"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InstantiateTask(System.AppDomain)">
            <summary>
            Tries to instantiate the task object
            </summary>
            <returns>task object, or null if it could not be instantiated</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InitializeTask(Microsoft.Build.Framework.ITask,Microsoft.Build.BuildEngine.ItemBucket,Microsoft.Build.BuildEngine.EngineProxy)">
            <summary>
            Given an instantiated task, this method initializes it, and sets all the task parameters (which are defined as
            properties of the task class).
            </summary>
            <remarks>
            This method is internal for unit-testing purposes only.
            </remarks>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InitializeTaskParameters(Microsoft.Build.Framework.ITask,Microsoft.Build.BuildEngine.ItemBucket)">
            <summary>
            Sets all the task parameters, using the provided bucket's lookup.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.GetNamesOfPropertiesWithRequiredAttribute">
            <summary>
            Finds all the task properties that are required.
            Returns them as keys in a dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.ExecuteInstantiatedTask(Microsoft.Build.BuildEngine.EngineProxy,Microsoft.Build.BuildEngine.ItemBucket,Microsoft.Build.BuildEngine.TaskExecutionMode,Microsoft.Build.Framework.ITask,System.Boolean@)">
            <summary>
            Execute a task object for a given bucket.
            </summary>
            <param name="engineProxy"></param>
            <param name="bucket"></param>
            <param name="howToExecuteTask"></param>
            <param name="task"></param>
            <param name="taskResult">Whether the task returned true from Execute</param>
            <returns>true if task executed successfully (possibly failed but continueOnError=true)</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.GatherTaskOutputs(Microsoft.Build.BuildEngine.TaskExecutionMode,Microsoft.Build.Framework.ITask,Microsoft.Build.BuildEngine.ItemBucket)">
            <summary>
            Gathers task outputs in two ways:
            1) Given an instantiated task that has finished executing, it extracts the outputs using .NET reflection.
            2) Otherwise, it parses the task's output specifications and (statically) infers the outputs.
            </summary>
            <param name="howToExecuteTask"></param>
            <param name="task"></param>
            <param name="bucket"></param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.GatherGeneratedTaskOutputs(Microsoft.Build.BuildEngine.Lookup,Microsoft.Build.BuildEngine.TaskOutput,System.String,System.String,System.String,Microsoft.Build.Framework.ITask)">
            <summary>
            Uses the given task output specification to grab the task's outputs using .NET reflection.
            </summary>
            <remarks>
            This method is "internal" for unit-testing purposes only.
            </remarks>
            <param name="taskOutputSpecification"></param>
            <param name="taskParameterName"></param>
            <param name="itemName">can be null</param>
            <param name="propertyName">can be null</param>
            <param name="task"></param>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InferTaskOutputs(Microsoft.Build.BuildEngine.Lookup,Microsoft.Build.BuildEngine.TaskOutput,System.String,System.String,System.String,Microsoft.Build.BuildEngine.ItemBucket)">
            <summary>
            Uses the given task output specification to (statically) infer the task's outputs.
            </summary>
            <param name="taskOutputSpecification"></param>
            <param name="taskParameterName"></param>
            <param name="itemName">can be null</param>
            <param name="propertyName">can be null</param>
            <param name="bucket"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.GetTaskOutputSpecifications(System.Boolean)">
            <summary>
            Parses the task element for its output specifications, which are declared using &lt;Output&gt; tags.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InitializeTaskParameter(Microsoft.Build.Framework.ITask,System.Xml.XmlAttribute,System.Boolean,Microsoft.Build.BuildEngine.ItemBucket,System.Boolean@)">
            <summary>
            Given an instantiated task, this helper method sets the specified parameter based on its type.
            </summary>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InitializeTaskScalarParameter(Microsoft.Build.Framework.ITask,System.Xml.XmlAttribute,System.Reflection.PropertyInfo,System.Type,System.String,Microsoft.Build.BuildEngine.ItemBucket,System.Boolean@)">
            <summary>
            Given an instantiated task, this helper method sets the specified scalar parameter based on its type.
            </summary>
            <remarks>This is "internal" only for the purpose of unit testing. Otherwise, it should be "private".</remarks>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.InitializeTaskVectorParameter(Microsoft.Build.Framework.ITask,System.Xml.XmlAttribute,System.Boolean,System.Reflection.PropertyInfo,System.Type,System.String,Microsoft.Build.BuildEngine.ItemBucket,System.Boolean@)">
             <summary>
             Given an instantiated task, this helper method sets the specified vector parameter. Vector parameters can be composed
             of multiple item vectors. The semicolon is the only separator allowed, and white space around the semicolon is
             ignored. Any item separator strings are not allowed, and embedded item vectors are not allowed.
             </summary>
             <remarks>This method is marked "internal" for unit-testing purposes only -- it should be "private" ideally.</remarks>
             <example>
             If @(CPPFiles) is a vector for the files a.cpp and b.cpp, and @(IDLFiles) is a vector for the files a.idl and b.idl:
            
                 "@(CPPFiles)"                               converts to     { a.cpp, b.cpp }
            
                 "@(CPPFiles); c.cpp; @(IDLFiles); c.idl"    converts to     { a.cpp, b.cpp, c.cpp, a.idl, b.idl, c.idl }
            
                 "@(CPPFiles,';')"                           converts to     &lt;error&gt;
            
                 "xxx@(CPPFiles)xxx"                         converts to     &lt;error&gt;
             </example>
             <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.SetTaskParameter(Microsoft.Build.Framework.ITask,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Given an instantiated task, this helper method sets the specified parameter.
            </summary>
            <returns>true, if successful</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngine.CreateBuildEventFileInfoForTask">
            <summary>
            This function correctly computes the line/column number of the task node 
            in the project file (or .TARGETS file) that called it. The XmlNode available 
            to the task engine lacks this information so we call back into the build engine
            to obtain it.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver">
            <summary>
            This is a helper class to install an AssemblyResolver event handler in whatever AppDomain this class is created in.
            </summary>
            <owner>lukaszg</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver.#ctor">
            <summary>
            This public default constructor is needed so that instances of this class can be created by NDP.
            </summary>
            <owner>lukasz</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver.Initialize(System.String)">
            <summary>
            Initializes the instance.
            </summary>
            <owner>lukaszg</owner>
            <param name="taskAssemblyFileToResolve"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver.InstallHandler">
            <summary>
            Installs an AssemblyResolve handler in the current AppDomain. This class can be created in any AppDomain, 
            so it's possible to create an AppDomain, create an instance of this class in it and use this method to install
            an event handler in that AppDomain. Since the event handler instance is stored internally, this method
            should only be called once before a corresponding call to RemoveHandler (not that it would make sense to do 
            anything else).
            </summary>
            <owner>lukaszg</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver.RemoveHandler">
            <summary>
            Removes the event handler.
            </summary>
            <owner>lukaszg</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver.ResolveAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            This is an assembly resolution handler necessary for fixing up types instantiated in different
            AppDomains and loaded with a Assembly.LoadFrom equivalent call. See comments in TaskEngine.ExecuteTask
            for more details.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
            <owner>lukaszg</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver.InitializeLifetimeService">
            <summary>
            Overridden to give this class infinite lease time. Otherwise we end up with a limited
            lease (5 minutes I think) and instances can expire if they take long time processing.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskExecutionContext">
            <summary>
            This class is used to wrap the context within which the task is executed. This includes the
            project within which the task is being executed, the target, the task success
            or failure and task outputs. This class is instantiated inside the engine and is directly
            accessed outside of the engine domain. It is used for sharing data between the engine domain
            and the TEM.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionContext.#ctor(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Target,System.Xml.XmlElement,Microsoft.Build.BuildEngine.ProjectBuildState,System.Int32,System.Int32,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Default constructor for creation of task execution wrapper
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.TaskExecutedSuccessfully">
            <summary>
            Returns true if the task completed successfully
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.ThrownException">
            <summary>
            Returns the exception thrown during the task execution. The exception will either be
            InvalidProjectException or some unexpected exception that occured in the engine code,
            because unexpected task exceptions are converted to logged errors.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.ParentProject">
            <summary>
            Project within which this task exists
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.ParentTarget">
            <summary>
            Target within which this task exists
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.BuildContext">
            <summary>
            Project build context within which this task is executing
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.TaskNode">
            <summary>
            XML node for the task
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionContext.TriggeringBuildRequest">
            <summary>
            The build request that triggered the execution of this task
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionContext.SetTaskOutputs(System.Boolean,System.Exception,System.Int64)">
            <summary>
            This method is used to set the outputs of the task once the execution is complete
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionContext.parentProject">
            <summary>
            The project within which the target containing the task was run
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionContext.parentTarget">
            <summary>
            The target withing which the task is contained
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionContext.taskNode">
            <summary>
            The XML node for the task
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionContext.buildContext">
            <summary>
            Context within which the task execution was requested
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionContext.taskExecutedSuccessfully">
            <summary>
            Task outputs
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskExecutionState">
            <summary>
            This class is a wrapper used to contain the data needed to execute a task. This class
            is initially instantiated on the engine side by the scheduler and submitted to the node.
            The node completes the class instantiating by providing the object with node side data.
            This class is distinct from the task engine in that it (possibly) travels cross process
            between the engine and the node carrying with it the data needed to instantiate the task
            engine. The task engine can't subsume this class because the task engine is bound to the 
            node process and can't travel cross process.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionState.#ctor(Microsoft.Build.BuildEngine.TaskExecutionMode,Microsoft.Build.BuildEngine.Lookup,Microsoft.Build.BuildEngine.Lookup,System.Xml.XmlElement,Microsoft.Build.Framework.ITaskHost,System.String,System.String,System.String,System.Int32,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            The constructor obtains the state information and the
            callback delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionState.ExecuteTask">
            <summary>
            The thread procedure executes the tasks and calls callback once it is done
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionState.NotifyOfWait(System.Int64)">
            <summary>
            This method is called to adjust the execution time for the task by subtracting the time
            spent waiting for results
            </summary>
            <param name="entryTime"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionState.TaskEngineExecuteTask(Microsoft.Build.BuildEngine.TaskEngine,Microsoft.Build.BuildEngine.TaskExecutionMode,Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Since we could not derrive from TaskEngine and have no Interface, we need to overide the method in here and 
            replace the calls when testing the class because of the calls to TaskEngine. If at a future time we get a mock task 
            engine, Interface or a non sealed TaskEngine these methods can disappear.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskExecutionModule">
            <summary>
            This class is responsible for representing the task execution subsystem to the engine. This
            class can be instantiated in a different appdomain from the engine and doesn't share
            any pointers/data with the engine(except for the argument to the functions).
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.#ctor(Microsoft.Build.BuildEngine.EngineCallback,Microsoft.Build.BuildEngine.TaskExecutionModule.TaskExecutionModuleMode,System.Boolean)">
            <summary>
            The TaskExecutionModule is a the external view into a subsystem responsible for executing user
            tasks. The subsystem consists of TaskWorkerThread, TaskEngine, TaskExecutionState and EngineProxy.
            The engine thread passes the TaskExecutionState to the TEM which after the task finishes passes the
            results back via the engineCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.SetBatchRequestSize">
            <summary>
            Sets the requestBatch size based on an environment variable set by the user.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionModule.IsRunningMultipleNodes">
            <summary>
            This property allows a task to query whether or not the system is running in single process mode or multi process mode.
            Single process mode (IsRunningMultipleNodes = false) is where the engine is initialized with the number of cpus = 1 and the engine is not a child engine.
            The engine is in multi process mode (IsRunningMultipleNodes = true) when the engine is initialized with a number of cpus > 1 or the engine is a child engine.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionModule.UseBreadthFirstTraversal">
            <summary>
            Specifies the traversal type for IBuildEngine callbacks. If true multiple build requests will be sent
            to the engine if false the requests will be sent one at a time.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionModule.IsIdle">
            <summary>
            Returns true if the TEM doesn't have a thread in user code and there are no pending 
            workitems
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskExecutionModule.TaskExecutionTime">
            <summary>
            Return total time spent executing the tasks by this TEM. This value is only valid if the TEM is created with 
            profileExecution set to true, otherwise this value will be 0
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.PostTaskOutputs(System.Int32,System.Boolean,System.Exception,System.Int64)">
            <summary>
            This method passes the task outputs to the engine, it is virtual for testing purposes to 
            create a mock TEM
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.BuildProjectFile(System.Int32,System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],Microsoft.Build.BuildEngine.EngineLoggingServices,System.String[],System.Boolean,System.Boolean,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            This function implements the callback via the IBuildEngine interface
            </summary>
            <returns>result of call to engine</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.WaitForBuildResults(System.Int32,Microsoft.Build.BuildEngine.BuildResult[],Microsoft.Build.BuildEngine.BuildRequest[])">
            <summary>
            Once the buildRequests from the EngineCallback have been created they are sent to this method which will
            post the build requests to the parent engine and then wait on the results to come back.
            This method uses either a breadthFirst or depthFirst traversal strategy when sending buildRequests to the parent engine.
            This method will start in breadthFirst traversal. It will continue to use this strategy until one of two events occur:
                1. The parent node sents a message indicating the TEM should switch to depthFirst traversal. 
                2. The number of buildRequests is larger than the batchRequestSize.
            In both of these cases the system will go from a breadthFirstTraversal to a depthFirst Traversal. In the second case
            a message will be sent to the parent engine to switch the system to depthFirst traversal as the system is starting to 
            be overloaded with work.
            In a depth first strategy the buildRequests will be sent to the parent engine one at a time and waiting for results for
            each buildRequest sent. In a breadthFirst traversal strategy some number of the buildrequests will be sent to the parent engine
            in a batch of requests. The system will then wait on the results of ALL the build requests sent before continuing
            to send more build requests.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetLineColumnOfXmlNode(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Call into the engine to figure out the line and column number of the task XML node in the original
            project context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetDefaultTasksRegistry(System.Int32)">
            <summary>
            Gets the global tasks registry defined by the *.tasks files.
            </summary>
            <returns>Global/default tasks registry.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetProjectTasksRegistry(System.Int32)">
            <summary>
            Gets the tasks registry for the given project.
            </summary>
            <returns>Project task registry.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetToolsPath(System.Int32)">
            <summary>
            Gets the path to the tools used for the particular task
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.ExecuteTask(Microsoft.Build.BuildEngine.TaskExecutionState)">
            <summary>
            Called to execute a task within a target. This method instantiates the task, sets its parameters, 
            and executes it. 
            </summary>
            <param name="taskState"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetNextTaskId">
            <summary>
            Uses the parent engine to get the next unique TaskID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.PostBuildResults(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method lets the engine provide node with results of an evaluation it was waiting on.
            </summary>
            <param name="buildResult"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.LastTaskActivity">
            <summary>
            This function returns the last time TEM was active executing a task
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetExecutionModuleMode">
            <summary>
            ONLY for unit testing
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskExecutionModule.GetWorkerThread">
            <summary>
             ONLY for unit testing
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.engineCallback">
            <summary>
            Callback interface to communicate with the engine
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.moduleMode">
            <summary>
            The mode in which the TEM is running
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.workerThread">
            <summary>
            The class used to execute user tasks.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.overallThreadCount">
            <summary>
            Total count of worker threads both active and inactive
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.threadOverallCountEvent">
            <summary>
            Event indicated a decrease in overallThreadCount due to an exit of a thread
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.activeThreadCount">
            <summary>
            Count of active thread (i.e. threads in user code). Has to be either 0 or 1
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.threadActiveCountEvent">
            <summary>
            Event indicating a decrease in activeThreadCount due to a thread leaving user code
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.lastTaskActivity">
            <summary>
            Time stamp of last execution of user code. Only valid if activeThreadCount == 0.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.breadthFirstTraversal">
            <summary>
            Specifies the traversal type for callbacks. If true multiple build requests will be sent
            to the engine if false the requests will be sent one at a time.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.profileExecution">
            <summary>
            Specifies if the timing data on task execution should be collected
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.totalTaskTime">
            <summary>
            Total time spent executing task code. Only valid if profileExecution is true.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.isRunningMultipleNodes">
            <summary>
            This property allows a task to query whether or not the system is running in single process mode or multi process mode.
            Single process mode (IsRunningMultipleNodes = false) is where the engine is initialized with the number of cpus = 1 and the engine is not a child engine.
            The engine is in multi process mode (IsRunningMultipleNodes = true) when the engine is initialized with a number of cpus > 1 or the engine is a child engine.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.defaultBatchRequestSize">
            <summary>
            In a multiproc build this is the maximum number of build requests which will be sent at a time to the parent engine
            A default of 10 was an arbitrary number but turned out to be a good balance between being too small 
            causing the system to run out of work too quickly and being too big and flooding the system with requests.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.nodeId">
            <summary>
            The nodeId of the node the TaskExecutionModule is running on
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.TaskExecutionModuleMode.SingleProcMode">
            <summary>
            In this mode the tasks should be executed on the calling thread
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskExecutionModule.TaskExecutionModuleMode.MultiProcFullNodeMode">
            <summary>
            In this mode the tasks should be executed on a different thread and the execute calls
            should return immediately. The messages due to the task are not flushed.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskOutput">
            <summary>
            This class encapsulates the data needed to specify outputs from a task.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskOutput.#ctor">
            <summary>
            Default constructor not supported.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskOutput.#ctor(System.Xml.XmlElement)">
            <summary>
            This constructor allows all output data to be initialized.
            </summary>
            <owner>SumedhK</owner>
            <param name="node">The XML element for the Output tag.</param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskOutput.IsItemVector">
            <summary>
            Indicates if the output is an item vector.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskOutput.IsProperty">
            <summary>
            Indicates if the output is a property.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskOutput.TaskParameterAttribute">
            <summary>
            The task parameter bound to this output.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskOutput.ItemNameAttribute">
            <summary>
            The item type, if the output is an item vector.
            </summary>
            <remarks>If PropertyName is already set, this property cannot be set.</remarks>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskOutput.PropertyNameAttribute">
            <summary>
            The property name, if the output is a property.
            </summary>
            <remarks>If ItemName is already set, this property cannot be set.</remarks>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskOutput.ConditionAttribute">
            <summary>
            The condition on the output.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskRegistry">
             <summary>
             This class is used to track tasks used by a project. Tasks are declared in project files with the &lt;UsingTask&gt; tag.
             Task and assembly names must be specified per .NET guidelines, however, the names do not need to be fully qualified if
             they provide enough information to locate the tasks they refer to. Assemblies can also be referred to using file paths --
             this is useful when it is not possible/desirable to place task assemblies in the GAC, or in the same directory as MSBuild.
             </summary>
             <remarks>
             1) specifying a task assembly using BOTH its assembly name (strong or weak) AND its file path is not allowed
             2) when specifying the assembly name, the file extension (usually ".dll") must NOT be specified
             3) when specifying the assembly file, the file extension MUST be specified
             </remarks>
             <example>
             &lt;UsingTask TaskName="Microsoft.Build.Tasks.Csc"                     ==> look for the "Csc" task in the
                        AssemblyName="Microsoft.Build.Tasks"/&gt;                       weakly-named "Microsoft.Build.Tasks" assembly
             
             &lt;UsingTask TaskName="t1"                                            ==> look for the "t1" task in the
                        AssemblyName="mytasks, Culture=en, Version=1.0.0.0"/&gt;        strongly-named "mytasks" assembly
            
             &lt;UsingTask TaskName="foo"                                           ==> look for the "foo" task in the
                        AssemblyFile="$(MyDownloadedTasks)\utiltasks.dll"/&gt;          "utiltasks" assembly file
            
             &lt;UsingTask TaskName="UtilTasks.Bar"                                 ==> invalid task declaration
                        AssemblyName="utiltasks.dll"
                        AssemblyFile="$(MyDownloadedTasks)\"/&gt;
             </example>
             <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.#ctor">
            <summary>
            Default constructor does no work because the tables are initialized lazily when a task is registered
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskRegistry.AllTaskDeclarations">
            <summary>
            Gets the collection of task declarations created by parsing the &lt;UsingTask&gt; XML.
            Used for unit tests only.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.Clear">
            <summary>
            Removes all entries from the registry.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.GetRegisteredTask(System.String,System.String,System.Xml.XmlNode,System.Boolean,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.Shared.LoadedType@)">
            <summary>
            Given a task name, this method retrieves the task class. If the task has been requested before, it will be found in
            the class cache; otherwise, &lt;UsingTask&gt; declarations will be used to search the appropriate assemblies.
            </summary>
            <param name="taskName"></param>
            <param name="taskProjectFile"></param>
            <param name="taskNode"></param>
            <param name="exactMatchRequired"></param>
            <param name="loggingServices"></param>
            <param name="buildEventContext"></param>
            <param name="taskClass"></param>
            <returns>true, if task is found</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.FindRegisteredTasks(System.String,System.Boolean,System.Collections.Hashtable@)">
            <summary>
            Searches all task declarations for the given task name. If no exact match is found, looks for partial matches.
            </summary>
            <remarks>
            It is possible to get multiple partial matches for a task name that is not fully qualified.
            NOTE: this method is marked internal for unit testing purposes only.
            </remarks>
            <param name="taskName"></param>
            <param name="exactMatchRequired"></param>
            <param name="registeredTasksFound"></param>
            <returns>true, if given task name matches one or more task declarations</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.GetTaskFromAssembly(System.String,System.Collections.ArrayList,System.String,System.Xml.XmlNode,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BuildEngine.Shared.LoadedType@)">
            <summary>
            Given a task name and a list of assemblies, this helper method checks if the task exists in any of the assemblies.
            </summary>
            <remarks>
            If the task name is fully qualified, then a match (if any) is unambiguous; otherwise, if there are multiple tasks with
            the same name in different namespaces/assemblies, the first task found will be returned.
            </remarks>
            <param name="taskName"></param>
            <param name="taskAssemblies"></param>
            <param name="taskProjectFile"></param>
            <param name="taskNode"></param>
            <param name="loggingServices"></param>
            <param name="buildEventContext"></param>
            <param name="taskClass"></param>
            <returns>true, if task is successfully loaded</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.RegisterTask(Microsoft.Build.BuildEngine.UsingTask,Microsoft.Build.BuildEngine.Expander,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Reads the given &lt;UsingTask&gt; tag and saves the task information specified in it.
            </summary>
            <param name="usingTask"></param>
            <param name="expander"></param>
            <param name="loggingServices"></param>
            <param name="buildEventContext"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskRegistry.IsTaskClass(System.Type,System.Object)">
            <summary>
            Checks if the given type is a task class.
            </summary>
            <remarks>This method is used as a TypeFilter delegate.</remarks>
            <owner>SumedhK</owner>
            <param name="type"></param>
            <param name="unused"></param>
            <returns>true, if specified type is a task</returns>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskRegistry.registeredTasks">
            <summary>
            Cache of task declarations i.e. the &lt;UsingTask&gt; tags fed to this registry.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskWorkerThread">
            <summary>
            This class is a wrapper around a worker thread that executes a task
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskWorkerThread.NodeLoopExecutionMode.BaseActiveThread">
            <summary>
            This is a mode of a thread that is not executing a task but is responsible for picking up
            work items as they arrive to the queue
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskWorkerThread.NodeLoopExecutionMode.WaitingActiveThread">
            <summary>
            This is a mode of a thread that was in BaseActiveThread mode and processes a callback via
            IBuildEngine interface. If a work item arrives while the thread is in this morning it will pass
            the ownership of the queue to another thread
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TaskWorkerThread.NodeLoopExecutionMode.WaitingPassiveThread">
            <summary>
            This is a mode of a thread that is not watching the work item queue and is waiting for
            results in order to return back to task execution.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.#ctor(Microsoft.Build.BuildEngine.TaskExecutionModule,System.Boolean)">
            <summary>
            This constructor creates a worker thread which is immediately ready to be activated. Once
            activated the thread will execute tasks as they appear in the work item queue. Once the
            thread is blocked from executing tasks it will pass the ownership of the work item queue to another
            thread
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.#ctor(Microsoft.Build.BuildEngine.TaskExecutionModule,System.Threading.ManualResetEvent,Microsoft.Build.BuildEngine.TaskWorkerThread.ExitTaskCache,System.Collections.Generic.Queue{Microsoft.Build.BuildEngine.TaskWorkerThread},System.Collections.Hashtable,System.Collections.Generic.Queue{Microsoft.Build.BuildEngine.TaskExecutionState},System.Threading.ManualResetEvent,System.Collections.Hashtable,System.Boolean)">
            <summary>
            This constructor is used by the class internally to create new instances when a thread
            becomes blocked by a user code callback.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskWorkerThread.LocalDoneNoticeEvent">
            <summary>
            This event is triggered by the node when a done notice is received
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.MainThreadLoop">
            <summary>
            This a base loop of a worker thread. The worker thread is asleep waiting for either an
            event indicating that it should shut down or that it should become active and take 
            ownership of the work item queue
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.WaitAnyFast(Microsoft.Build.BuildEngine.TaskWorkerThread.NodeLoopExecutionMode,System.Int32@)">
            <summary>
            Don't wait on system objects if we don't have to - see if we have work to do.
            </summary>
            <param name="executionMode"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.GetHandlesArray(Microsoft.Build.BuildEngine.TaskWorkerThread.NodeLoopExecutionMode)">
            <summary>
            This function calculates the array of events the thread should wait on depending on its
            execution mode
            </summary>
            <param name="executionMode">Current execution mode</param>
            <returns>Array of handles to wait on</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.NodeActionLoop(Microsoft.Build.BuildEngine.TaskWorkerThread.NodeLoopExecutionMode,System.Int32,Microsoft.Build.BuildEngine.BuildResult[])">
            <summary>
            This is the loop for all active threads. Depending on the current execution mode the thread
            will listen to different events. There is only one thread at the time that owns the workitem
            queue and listens for tasks to be executed. There is also only one thread at a time that is
            execution a task. That thread owns the current directory and the environment block.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.ActivateThread">
            <summary>
            This method is called to cause a thread to become active and take ownership of the workitem
            queue
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskWorkerThread.WaitForResults(System.Int32,Microsoft.Build.BuildEngine.BuildResult[],Microsoft.Build.BuildEngine.BuildRequest[])">
            <summary>
            This function is called when the task executes a callback via IBuildEngine interface. A thread
            that currently owns the workitem queue will continue to own it, unless a work item comes in while
            it is inside the callback. A thread that enters the callback no longer owns the current directory and
            environment block, but it will always regain them before returning to the task.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Toolset">
            <summary>
            Aggregation of a toolset version (eg. "2.0"), tools path, and optional set of associated properties
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Toolset.#ctor(System.String,System.String)">
            <summary>
            Constructor taking only tools version and a matching tools path
            </summary>
            <param name="toolsVersion">Name of the toolset</param>
            <param name="toolsPath">Path to this toolset's tasks and targets</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Toolset.#ctor(System.String,System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Constructor that also associates a set of properties with the tools version
            </summary>
            <param name="toolsVersion">Name of the toolset</param>
            <param name="toolsPath">Path to this toolset's tasks and targets</param>
            <param name="buildProperties">Properties that should be associated with the Toolset.
            May be null, in which case an empty property group will be used.</param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Toolset.ToolsVersion">
            <summary>
            Name of this toolset
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Toolset.ToolsPath">
            <summary>
            Path to this toolset's tasks and targets. Corresponds to $(MSBuildToolsPath) in a project or targets file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Toolset.BuildProperties">
            <summary>
            Properties associated with the toolset
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Toolset.Clone">
            <summary>
            Make a deep copy of the Toolset
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.#ctor(Microsoft.Build.BuildEngine.ReadApplicationConfiguration)">
            <summary>
            Constructor taking a delegate for unit test purposes only
            </summary>
            <param name="readApplicationConfiguration"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.ToolsVersions">
            <summary>
            Returns the list of tools versions
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.DefaultToolsVersion">
            <summary>
            Returns the default tools version, or null if none was specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.GetPropertyDefinitions(System.String)">
            <summary>
            Provides an enumerator over property definitions for a specified tools version
            </summary>
            <param name="toolsVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.ReadApplicationConfiguration">
            <summary>
            Reads the application configuration file.
            NOTE: this is abstracted into a method to support unit testing GetToolsetDataFromConfiguration().
            Unit tests wish to avoid reading (nunit.exe) application configuration file.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetConfigurationReader.ConfigurationSection">
            <summary>
            Lazy getter for the ToolsetConfigurationSection
            Returns null if the section is not present
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetConfigurationSection">
            <summary>
            This class is used to programmatically read msbuildToolsets section
            in from the configuration file.  An example of application config file:
            
            &lt;configuration&gt;
                &lt;msbuildToolsets default="2.0"&gt;
                    &lt;toolset toolsVersion="2.0"&gt;
                        &lt;property name="MSBuildBinPath" value="D:\windows\Microsoft.NET\Framework\v2.0.x86ret\"/&gt;
                        &lt;property name="SomeOtherProperty" value="SomeOtherPropertyValue"/&gt;
                    &lt;/toolset&gt;
                    &lt;toolset toolsVersion="3.5"&gt;
                        &lt;property name="MSBuildBinPath" value="D:\windows\Microsoft.NET\Framework\v3.5.x86ret\"/&gt;
                    &lt;/toolset&gt;
                &lt;/msbuildToolsets&gt;
            &lt;/configuration&gt;
            
            </summary>
            <remarks>
            Internal for unit testing only
            </remarks>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetConfigurationSection.Toolsets">
            <summary>
            toolsVersion element collection 
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetConfigurationSection.Default">
            <summary>
            default attribute on msbuildToolsets element, specifying the default ToolsVersion
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetElementCollection">
            <summary>
            Class representing the collection of toolset elements
            </summary>
            <remarks>
            Internal for unit testing only
            </remarks>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ToolsetElementCollection.previouslySeenToolsVersions">
            <summary>
            We use this dictionary to track whether or not we've seen a given
            toolset definition before, since the .NET configuration classes
            won't perform this check without respect for case.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.CreateNewElement">
            <summary>
            Creates a new element of the collection
            </summary>
            <returns>Created element</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
            <summary>
            overridden so we can track previously seen tools versions
            </summary>
            <param name="index"></param>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            overridden so we can track previously seen tools versions
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.UpdateToolsVersionMap(System.Configuration.ConfigurationElement)">
            <summary>
            Stores the name of the tools version in a case-insensitive map
            so we can detect if it is specified more than once but with
            different case
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key value for the given element
            </summary>
            <param name="element">element whose key is returned</param>
            <returns>key</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElementCollection.ThrowOnDuplicate">
            <summary>
            Throw exception if an element with a duplicate key is added to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElementCollection.CollectionType">
            <summary>
            Type of the collection
            This has to be public as cannot change access modifier when overriding
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElementCollection.ElementName">
            <summary>
            Name of the element
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.GetElement(System.String)">
            <summary>
            Gets an element with the specified name
            </summary>
            <param name="toolsVersion">toolsVersion of the element</param>
            <returns>element</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElementCollection.GetElement(System.Int32)">
            <summary>
            Gets an element based at the specified position
            </summary>
            <param name="index">position</param>
            <returns>element</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetElement">
            <summary>
            Class representing the Toolset element
            </summary>
            <remarks>
            Internal for unit testing only
            </remarks>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.toolsVersion">
            <summary>
            ToolsVersion attribute of the element
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElements">
            <summary>
            Property element collection 
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection">
            <summary>
            Class representing collection of property elements
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.previouslySeenPropertyNames">
            <summary>
            We use this dictionary to track whether or not we've seen a given
            property definition before, since the .NET configuration classes
            won't perform this check without respect for case.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.CreateNewElement">
            <summary>
            Creates a new element
            </summary>
            <returns>element</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
            <summary>
            overridden so we can track previously seen property names
            </summary>
            <param name="index"></param>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            overridden so we can track previously seen property names
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.UpdatePropertyNameMap(System.Configuration.ConfigurationElement)">
            <summary>
            Stores the name of the tools version in a case-insensitive map
            so we can detect if it is specified more than once but with
            different case
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key for the element
            </summary>
            <param name="element">element</param>
            <returns>key</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.CollectionType">
            <summary>
            Collection type
            This has to be public as cannot change access modifier when overriding  
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.ThrowOnDuplicate">
            <summary>
            Throw exception if an element with a duplicate is added
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.ElementName">
            <summary>
            name of the element
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.GetElement(System.String)">
            <summary>
            Gets an element with the specified name
            </summary>
            <param name="name">name of the element</param>
            <returns>element</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElementCollection.GetElement(System.Int32)">
            <summary>
            Gets an element at the specified position
            </summary>
            <param name="index">position</param>
            <returns>element</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElement">
            <summary>
            This class represents property element
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElement.Name">
            <summary>
            name attribute
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetElement.PropertyElement.Value">
            <summary>
            value attribute
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ReadApplicationConfiguration">
            <summary>
            Delegate for unit test purposes only
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetCollection">
            <summary>
            Implementation of ICollection&lt;Toolset&gt; that also supports
            key-based retrieval by passing the string value of the tools version
            corresponding with the desired Toolset.
            NOTE: This collection does not support ICollection&lt;Toolset&gt;'s
            Remove or Clear methods, and calls to these will generate exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.#ctor">
            <summary>
            Private default Ctor. Other classes should not be constructing 
            instances of this class without providing an Engine object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.#ctor(Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Ctor.  This is the only Ctor accessible to other classes.
            Third parties should not be creating instances of this class;
            instead, they should query an Engine object for one.
            </summary>
            <param name="parentEngine"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetCollection.ToolsVersions">
            <summary>
            The names of the toolsets stored in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetCollection.Item(System.String)">
            <summary>
            Gets the Toolset with matching toolsVersion.
            </summary>
            <param name="toolsVersion"></param>
            <returns>Toolset with matching toolsVersion, or null if none exists.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a Toolset with matching
            tools version.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetCollection.Count">
            <summary>
            Count of elements in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetCollection.IsReadOnly">
            <summary>
            Always returns false
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.Add(Microsoft.Build.BuildEngine.Toolset)">
            <summary>
            Adds the given Toolset to this collection, replacing any previous value
            with the same tools version.  Also notifies the parent Engine of the
            change.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.Clear">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.Contains(Microsoft.Build.BuildEngine.Toolset)">
            <summary>
            Determines whether or not this collection contains the given toolset.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.CopyTo(Microsoft.Build.BuildEngine.Toolset[],System.Int32)">
            <summary>
            Copies the contents of this collection to the given array, beginning
            at the given index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.GetEnumerator">
            <summary>
            Generic enumerator for the Toolsets in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic enumerator for the Toolsets in this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetCollection.Remove(Microsoft.Build.BuildEngine.Toolset)">
            <summary>
            This method is not supported.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.PropertyDefinition.Name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.PropertyDefinition.Value">
            <summary>
            The value of the property
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.PropertyDefinition.Source">
            <summary>
            A description of the location where the property was defined,
            such as a registry key path or a path to a config file and 
            line number.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ReadAllToolsets(Microsoft.Build.BuildEngine.ToolsetCollection,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Gathers toolset data from both the registry and configuration file, if any
            </summary>
            <param name="toolsets"></param>
            <param name="globalProperties"></param>
            <param name="initialProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ReadAllToolsets(Microsoft.Build.BuildEngine.ToolsetCollection,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Gathers toolset data from the registry and configuration file, if any:
            allows you to specify which of the registry and configuration file to
            read from by providing ToolsetInitialization
            </summary>
            <param name="toolsets"></param>
            <param name="globalProperties"></param>
            <param name="initialProperties"></param>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ReadAllToolsets(Microsoft.Build.BuildEngine.ToolsetCollection,Microsoft.Build.BuildEngine.ToolsetRegistryReader,Microsoft.Build.BuildEngine.ToolsetConfigurationReader,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations)">
            <summary>
            Gathers toolset data from the registry and configuration file, if any.
            NOTE:  this method is internal for unit testing purposes only.
            </summary>
            <param name="toolsets"></param>
            <param name="registryReader"></param>
            <param name="configurationReader"></param>
            <param name="globalProperties"></param>
            <param name="initialProperties"></param>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ConfigurationFileMayHaveToolsets">
            <summary>
            Creating a ToolsetConfigurationReader, and also reading toolsets from the 
            configuration file, are a little expensive. To try to avoid this cost if it's 
            not necessary, we'll check if the file exists first. If it exists, we'll scan for 
            the string "toolsVersion" to see if it might actually have any tools versions
            defined in it.
            </summary>
            <returns>True if there may be toolset definitions, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ReadToolsets(Microsoft.Build.BuildEngine.ToolsetCollection,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Boolean)">
            <summary>
            Populates the toolset collection passed in with the toolsets read from some location.
            </summary>
            <remarks>Internal for unit testing only</remarks>
            <param name="toolsets"></param>
            <param name="globalProperties"></param>
            <param name="initialProperties"></param>
            <param name="accumulateProperties"></param>
            <returns>the default tools version if available, or null otherwise</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ReadEachToolset(Microsoft.Build.BuildEngine.ToolsetCollection,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Boolean)">
            <summary>
            Reads all the toolsets and populates the given ToolsetCollection with them
            </summary>
            <param name="toolsets"></param>
            <param name="globalProperties"></param>
            <param name="initialProperties"></param>
            <param name="accumulateProperties"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ReadToolset(Microsoft.Build.BuildEngine.PropertyDefinition,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Boolean)">
            <summary>
            Reads the settings for a specified tools version
            </summary>
            <param name="toolsVersion"></param>
            <param name="globalProperties"></param>
            <param name="initialProperties"></param>
            <param name="accumulateProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ExpandProperty(Microsoft.Build.BuildEngine.PropertyDefinition,Microsoft.Build.BuildEngine.Expander)">
            <summary>
            Expands the given unexpanded property expression using the properties in the
            given BuildPropertyGroup.
            </summary>
            <param name="unexpandedProperty"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.SetProperty(Microsoft.Build.BuildEngine.PropertyDefinition,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Sets the given property in the given property group.
            </summary>
            <param name="property"></param>
            <param name="propertyGroup"></param>
            <param name="globalProperties"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.ExpandRelativePathsRelativeToExeLocation(System.String)">
            <summary>
            Given a path, de-relativizes it using the location of the currently
            executing .exe as the base directory. For example, the path "..\foo"
            becomes "c:\windows\microsoft.net\framework\foo" if the current exe is
            "c:\windows\microsoft.net\framework\v3.5.1234\msbuild.exe".
            If the path is not relative, it is returned without modification.
            If the path is invalid, it is returned without modification.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetReader.ToolsVersions">
            <summary>
            Returns the list of tools versions
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetReader.DefaultToolsVersion">
            <summary>
            Returns the default tools version, or null if none was specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetReader.GetPropertyDefinitions(System.String)">
            <summary>
            Provides an enumerator over property definitions for a specified tools version
            </summary>
            <param name="toolsVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetRegistryReader">
            <summary>
            Reads registry at the base key and returns a Dictionary keyed on ToolsVersion.
            Dictionary contains another dictionary of (property name, property value) pairs.
            If a registry value is not a string, this will throw a InvalidToolsetDefinitionException.
            An example of how the registry will look (note that the DefaultToolsVersion is per-MSBuild-version)
            [HKLM]\SOFTWARE\Microsoft
              msbuild
                3.5
                  @DefaultToolsVersion = 2.0
                ToolsVersions
                  2.0
                    @MSBuildToolsPath = D:\SomeFolder
                  3.5
                    @MSBuildToolsPath = D:\SomeOtherFolder
                    @MSBuildBinPath = D:\SomeOtherFolder
                    @SomePropertyName = PropertyOtherValue
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetRegistryReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetRegistryReader.#ctor(Microsoft.Build.BuildEngine.RegistryKeyWrapper)">
            <summary>
            Constructor overload accepting a registry wrapper for unit testing purposes only
            </summary>
            <param name="msbuildRegistryWrapper"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetRegistryReader.ToolsVersions">
            <summary>
            Returns the list of tools versions
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetRegistryReader.DefaultToolsVersion">
            <summary>
            Returns the default tools version, or null if none was specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetRegistryReader.GetPropertyDefinitions(System.String)">
            <summary>
            Provides an enumerator over property definitions for a specified tools version
            </summary>
            <param name="toolsVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetRegistryReader.GetValue(Microsoft.Build.BuildEngine.RegistryKeyWrapper,System.String)">
            <summary>
            Reads a string value from the specified registry key
            </summary>
            <param name="baseKeyWrapper">wrapper around key</param>
            <param name="valueName">name of the value</param>
            <returns>string data in the value</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ToolsetState">
            <summary>
            Encapsulates all the state associated with a tools version. Each ToolsetState
            aggregates a Toolset, which contains that part of the state that is externally visible.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.#ctor(Microsoft.Build.BuildEngine.Engine,Microsoft.Build.BuildEngine.Toolset)">
            <summary>
            Internal constructor
            </summary>
            <param name="engine"></param>
            <param name="toolset"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.#ctor(Microsoft.Build.BuildEngine.Engine,Microsoft.Build.BuildEngine.Toolset,Microsoft.Build.BuildEngine.GetFiles,Microsoft.Build.BuildEngine.LoadXmlFromPath)">
            <summary>
            Additional constructor to make unit testing the TaskRegistry support easier
            </summary>
            <remarks>
            Internal for unit test purposes only.
            </remarks>
            <param name="engine"></param>
            <param name="toolset"></param>
            <param name="getFiles"></param>
            <param name="loadXmlFromPath"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetState.Toolset">
            <summary>
            Associated Toolset (version name, toolset path, optional associated properties)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetState.ToolsVersion">
            <summary>
            Tools version for this toolset
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetState.ToolsPath">
            <summary>
            Tools path for this toolset
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ToolsetState.BuildProperties">
            <summary>
            Wrapper for the Toolset property group
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.SchemaValidator(Microsoft.Build.Framework.BuildEventContext)">
             <summary>
             Used for validating the project (file) and its imported files against a designated schema.
            
             PERF NOTE: this property helps to delay creation of the ProjectSchemaValidationHandler object
             </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.GetTaskRegistry(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Return a task registry stub for the tasks in the *.tasks file for this toolset
            </summary>
            <param name="buildEventContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.SetTaskRegistry(Microsoft.Build.BuildEngine.ITaskRegistry)">
            <summary>
            Sets the default task registry to the provided value.
            </summary>
            <param name="taskRegistry"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.LoadXmlDocumentFromPath(System.String)">
            <summary>
            Method extracted strictly to make unit testing easier.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ToolsetState.RegisterDefaultTasks(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Used to load information about default MSBuild tasks i.e. tasks that do not need to be explicitly declared in projects
            with the &lt;UsingTask&gt; element. Default task information is read from special files, which are located in the same
            directory as the MSBuild binaries.
            </summary>
            <remarks>
            1) a default tasks file needs the &lt;Project&gt; root tag in order to be well-formed
            2) the XML declaration tag &lt;?xml ...&gt; is ignored
            3) comment tags are always ignored regardless of their placement
            4) the rest of the tags are expected to be &lt;UsingTask&gt; tags
            </remarks>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.UsingTask">
            <summary>
            This class represents a single UsingTask element in a project file
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.IsImported">
            <summary>
            Returns true if this UsingTask was imported from another project
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.TaskName">
            <summary>
            The task name
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.TaskNameAttribute">
            <summary>
            Internal accessor for the task name XML attribute
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.AssemblyName">
            <summary>
            The name of the assembly containing the task
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.AssemblyNameAttribute">
            <summary>
            Internal accessor for the assembly name XML attribute
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.AssemblyFile">
            <summary>
            The assembly file containing the task
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.AssemblyFileAttribute">
            <summary>
            Internal accessor for the assembly file XML attribute
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.Condition">
            <summary>
            The condition string for this UsingTask
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTask.ConditionAttribute">
            <summary>
            Internal accessor for the condition XML attribute
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTask.#ctor(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates a new UsingTask object
            </summary>
            <param name="usingTaskNode"></param>
            <param name="isImported"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.UsingTaskCollection">
            <summary>
            This class represents a collection of all UsingTask elements in a given project file.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTaskCollection.#ctor">
            <summary>
            Constructor exposed to the outside world
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTaskCollection.GetEnumerator">
            <summary>
            IEnumerable member method for returning the enumerator
            </summary>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTaskCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection member method for copying the contents of this collection into an array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTaskCollection.Count">
            <summary>
            ICollection member property for returning the number of items in this collection
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTaskCollection.IsSynchronized">
            <summary>
            ICollection member property for determining whether this collection is thread-safe
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTaskCollection.SyncRoot">
            <summary>
            ICollection member property for returning this collection's synchronization object
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTaskCollection.Clear">
            <summary>
            Removes all UsingTasks from this collection. Does not alter the parent project's XML.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTaskCollection.Add(Microsoft.Build.BuildEngine.UsingTask)">
            <summary>
            Adds a new UsingTask to this collection. Does not alter the parent project's XML.
            </summary>
            <param name="usingTask"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.UsingTaskCollection.Item(System.Int32)">
            <summary>
            Gets the UsingTask object with the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.UsingTaskCollection.CopyTo(Microsoft.Build.BuildEngine.UsingTask[],System.Int32)">
            <summary>
            Copy the contents of this collection into a strongly typed array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Utilities">
            <summary>
            This class contains utility methods for the MSBuild engine.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.UpdateConditionedPropertiesTable(System.Collections.Hashtable,System.String,System.String)">
             <summary>
             Update our table which keeps track of all the properties that are referenced
             inside of a condition and the string values that they are being tested against.
             So, for example, if the condition was " '$(Configuration)' == 'Debug' ", we
             would get passed in leftValue="$(Configuration)" and rightValueExpanded="Debug".
             This call would add the string "Debug" to the list of possible values for the 
             "Configuration" property.
            
             This method also handles the case when two or more properties are being
             concatenated together with a vertical bar, as in '
                 $(Configuration)|$(Platform)' == 'Debug|x86'
             </summary>
             <param name="conditionedPropertiesTable"></param>
             <param name="leftValue"></param>
             <param name="rightValueExpanded"></param>
             <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.EvaluateCondition(System.String,System.Xml.XmlAttribute,Microsoft.Build.BuildEngine.Expander,Microsoft.Build.BuildEngine.ParserOptions,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Evaluates a string representing a condition from a "condition" attribute.
            If the condition is a malformed string, it throws an InvalidProjectFileException.
            This method uses cached expression trees to avoid generating them from scratch every time it's called.
            This method is thread safe and is called from engine and task execution module threads
            </summary>
            <param name="condition">Can be null</param>
            <param name="conditionAttribute">XML attribute on which the condition is evaluated</param>
            <param name="expander">All the data available for expanding embedded properties, metadata, and items</param>
            <param name="itemListOptions"></param>
            <returns>true, if the expression evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.EvaluateCondition(System.String,System.Xml.XmlAttribute,Microsoft.Build.BuildEngine.Expander,Microsoft.Build.BuildEngine.ParserOptions,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Evaluates a string representing a condition from a "condition" attribute.
            If the condition is a malformed string, it throws an InvalidProjectFileException.
            This method uses cached expression trees to avoid generating them from scratch every time it's called.
            This method is thread safe and is called from engine and task execution module threads
            </summary>
            <param name="condition">Can be null</param>
            <param name="conditionAttribute">XML attribute on which the condition is evaluated</param>
            <param name="expander">All the data available for expanding embedded properties, metadata, and items</param>
            <param name="itemListOptions"></param>
            <param name="loggingServices">Can be null</param>
            <param name="eventContext"> contains contextual information for logging events</param>
            <returns>true, if the expression evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.EvaluateCondition(System.String,System.Xml.XmlAttribute,Microsoft.Build.BuildEngine.Expander,System.Collections.Hashtable,Microsoft.Build.BuildEngine.ParserOptions,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Evaluates a string representing a condition from a "condition" attribute.
            If the condition is a malformed string, it throws an InvalidProjectFileException.
            This method uses cached expression trees to avoid generating them from scratch every time it's called.
            This method is thread safe and is called from engine and task execution module threads
            </summary>
            <param name="condition">Can be null</param>
            <param name="conditionAttribute">XML attribute on which the condition is evaluated</param>
            <param name="expander">All the data available for expanding embedded properties, metadata, and items</param>
            <param name="conditionedPropertiesTable">Can be null</param>
            <param name="itemListOptions"></param>
            <param name="loggingServices">Can be null</param>
            <param name="buildEventContext"> contains contextual information for logging events</param>
            <returns>true, if the expression evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.SetXmlNodeInnerContents(System.Xml.XmlNode,System.String)">
            <summary>
            Sets the inner XML/text of the given XML node, escaping as necessary.
            </summary>
            <owner>SumedhK</owner>
            <param name="node"></param>
            <param name="s">Can be empty string, but not null.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.GetXmlNodeInnerContents(System.Xml.XmlNode)">
            <summary>
            Extracts the inner XML/text of the given XML node, unescaping as necessary.
            </summary>
            <owner>SumedhK</owner>
            <param name="node"></param>
            <returns>Inner XML/text of specified node.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.ContainsNoTagsOtherThanComments(System.String,System.Int32)">
            <summary>
            Figure out whether there are any XML tags, other than comment tags,
            in the string.
            </summary>
            <remarks>
            We know the string coming in is a valid XML fragment. (The project loaded after all.)
            So for example we can ignore an open comment tag without a matching closing comment tag.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.RemoveXmlNamespace(System.String)">
            <summary>
            Removes the xmlns attribute from an XML string.
            </summary>
            <owner>SumedhK</owner>
            <param name="xml">XML string to process.</param>
            <returns>The modified XML string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.Escape(System.String)">
            <summary>
            Escapes given string, that is replaces special characters with escape sequences that allow MSBuild hosts
            to treat MSBuild-interpreted characters literally (';' becomes "%3b" and so on).
            </summary>
            <param name="unescapedExpression">string to escape</param>
            <returns>escaped string</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.CreateBuildEventFileInfo(System.Xml.XmlNode,System.String)">
            <summary>
            Instantiates a new BuildEventFileInfo object using an XML node (presumably from the project
            file).  The reason this isn't just another constructor on BuildEventFileInfo is because
            BuildEventFileInfo.cs gets compiled into multiple assemblies (Engine and Conversion, at least),
            and not all of those assemblies have the code for XmlUtilities.
            </summary>
            <param name="xmlNode"></param>
            <param name="defaultFile"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.CreateTableIfNecessary(System.Collections.Hashtable)">
            <summary>
            Helper useful for lazy table creation
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Utilities.CreateTableIfNecessary``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Helper useful for lazy table creation
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.XmlSearcher">
            <summary>
            This class has static methods to determine line numbers and column numbers for given
            XML nodes.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.XmlSearcher.GetLineColumnByNode(System.Xml.XmlNode,System.Int32@,System.Int32@)">
            <summary>
            Given an XmlNode belonging to a document that lives on disk, this method determines
            the line/column number of that node in the document.  It does this by re-reading the
            document from disk and searching for the given node.
            </summary>
            <param name="xmlNodeToFind">Any XmlElement or XmlAttribute node (preferably in a document that still exists on disk).</param>
            <param name="foundLineNumber">(out) The line number where the specified node begins.</param>
            <param name="foundColumnNumber">(out) The column number where the specified node begins.</param>
            <returns>true if found, false otherwise.  Should not throw any exceptions.</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.XmlSearcher.GetElementAndAttributeNumber(System.Xml.XmlNode,System.Int32@,System.Int32@)">
            <summary>
            Determines the element number and attribute number of a given XmlAttribute node,
            or just the element number for a given XmlElement node.
            </summary>
            <param name="xmlNodeToFind">Any XmlElement or XmlAttribute within an XmlDocument.</param>
            <param name="elementNumber">(out) The element number of the given node.</param>
            <param name="attributeNumber">(out) If the given node was an XmlAttribute node, then the attribute number of that node, otherwise zero.</param>
            <returns>true if found, false otherwise.  Should not throw any exceptions.</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.XmlSearcher.GetLineColumnByNodeNumber(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Read through the entire XML of a given project file, searching for the element/attribute 
            specified by element number and attribute number.  Return the line number and column 
            number where it was found.
            </summary>
            <param name="projectFile">Path to project file on disk.</param>
            <param name="xmlElementNumberToSearchFor">Which Xml element to search for.</param>
            <param name="xmlAttributeNumberToSearchFor">
                Which Xml attribute within the above Xml element to search for.  Pass in zero
                if you are searching for the Element as a whole and not a particular attribute.
            </param>
            <param name="foundLineNumber">(out) The line number where the given element/attribute begins.</param>
            <param name="foundColumnNumber">The column number where the given element/attribute begins.</param>
            <returns>true if found, false otherwise.  Should not throw any exceptions.</returns>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.InternalLoggerException">
            <summary>
            This exception is used to wrap an unhandled exception from a logger. This exception aborts the build, and it can only be
            thrown by the MSBuild engine.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both forward and backward compatibility
            </remarks>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use the rich constructor instead.
            </remarks>
            <owner>SumedhK</owner>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.#ctor(System.String)">
            <summary>
            Creates an instance of this exception using the specified error message.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use the rich constructor instead.
            </remarks>
            <owner>SumedhK</owner>
            <param name="message"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this exception using the specified error message and inner exception.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use the rich constructor instead.
            </remarks>
            <owner>SumedhK</owner>
            <param name="message"></param>
            <param name="innerException"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.#ctor(System.String,System.Exception,Microsoft.Build.Framework.BuildEventArgs,System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of this exception using rich error information.
            Internal for unit testing
            </summary>
            <remarks>This is the only usable constructor.</remarks>
            <owner>SumedhK</owner>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="e">Can be null.</param>
            <param name="errorCode"></param>
            <param name="helpKeyword"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for (de)serialization. 
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable method which we must override since Exception implements this interface
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.SetDefaultsBeforeSerialization(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Provide default values for optional members
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.SetValueAfterDeserialization(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Dont actually have anything to do in the method, but the method is required when implementing an optional field
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InternalLoggerException.BuildEventArgs">
            <summary>
            Gets the details of the build event (if any) that was being logged.
            </summary>
            <owner>SumedhK</owner>
            <value>The build event args, or null.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InternalLoggerException.ErrorCode">
            <summary>
            Gets the error code associated with this exception's message (not the inner exception).
            </summary>
            <owner>SumedhK</owner>
            <value>The error code string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InternalLoggerException.HelpKeyword">
            <summary>
            Gets the F1-help keyword associated with this error, for the host IDE.
            </summary>
            <owner>SumedhK</owner>
            <value>The keyword string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InternalLoggerException.InitializationException">
            <summary>
            True if the exception occured during logger initialization
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InternalLoggerException.Throw(System.Exception,Microsoft.Build.Framework.BuildEventArgs,System.String,System.Boolean,System.String[])">
            <summary>
            Throws an instance of this exception using rich error information.
            </summary>
            <param name="innerException"></param>
            <param name="e">Can be null.</param>
            <param name="messageResourceName"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.InvalidProjectFileException">
            <summary>
            This exception is thrown whenever there is a problem with the user's XML project file. The problem might be semantic or
            syntactical. The latter would be of a type typically caught by XSD validation (if it was performed by the project writer).
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both forward and backward compatibility
            </remarks>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use a rich constructor whenever possible.
            </remarks>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.#ctor(System.String)">
            <summary>
            Creates an instance of this exception using the specified error message.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use a rich constructor whenever possible.
            </remarks>
            <owner>SumedhK</owner>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this exception using the specified error message and inner exception.
            </summary>
            <owner>SumedhK</owner>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use a rich constructor whenever possible.
            </remarks>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for (de)serialization. 
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable method which we must override since Exception implements this interface
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.#ctor(System.Xml.XmlNode,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of this exception using rich error information.
            </summary>
            <remarks>This constructor is preferred over the basic constructors.</remarks>
            <owner>RGoel, SumedhK</owner>
            <param name="xmlNode">The XML node where the error is (can be null).</param>
            <param name="message">Error message for exception.</param>
            <param name="errorSubcategory">Error sub-category that describes the error (can be null).</param>
            <param name="errorCode">The error code (can be null).</param>
            <param name="helpKeyword">The F1-help keyword for the host IDE (can be null).</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidProjectFileException.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of this exception using rich error information.
            </summary>
            <remarks>This constructor is preferred over the basic constructors.</remarks>
            <owner>SumedhK</owner>
            <param name="projectFile">The invalid project file (can be empty string).</param>
            <param name="lineNumber">The invalid line number in the project (set to zero if not available).</param>
            <param name="columnNumber">The invalid column number in the project (set to zero if not available).</param>
            <param name="endLineNumber">The end of a range of invalid lines in the project (set to zero if not available).</param>
            <param name="endColumnNumber">The end of a range of invalid columns in the project (set to zero if not available).</param>
            <param name="message">Error message for exception.</param>
            <param name="errorSubcategory">Error sub-category that describes the error (can be null).</param>
            <param name="errorCode">The error code (can be null).</param>
            <param name="helpKeyword">The F1-help keyword for the host IDE (can be null).</param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.Message">
            <summary>
            Gets the exception message including the affected project file (if any).
            </summary>
            <owner>SumedhK</owner>
            <value>The complete message string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.BaseMessage">
            <summary>
            Gets the exception message not including the project file.
            </summary>
            <owner>SumedhK</owner>
            <value>The error message string only.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.ProjectFile">
            <summary>
            Gets the project file (if any) associated with this exception.
            </summary>
            <owner>SumedhK</owner>
            <value>Project filename/path string, or null.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.LineNumber">
            <summary>
            Gets the invalid line number (if any) in the project.
            </summary>
            <owner>SumedhK</owner>
            <value>The invalid line number, or zero.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.ColumnNumber">
            <summary>
            Gets the invalid column number (if any) in the project.
            </summary>
            <owner>SumedhK</owner>
            <value>The invalid column number, or zero.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.EndLineNumber">
            <summary>
            Gets the last line number (if any) of a range of invalid lines in the project.
            </summary>
            <owner>SumedhK</owner>
            <value>The last invalid line number, or zero.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.EndColumnNumber">
            <summary>
            Gets the last column number (if any) of a range of invalid columns in the project.
            </summary>
            <owner>SumedhK</owner>
            <value>The last invalid column number, or zero.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.ErrorSubcategory">
            <summary>
            Gets the error sub-category (if any) that describes the type of this error.
            </summary>
            <owner>SumedhK</owner>
            <value>The sub-category string, or null.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.ErrorCode">
            <summary>
            Gets the error code (if any) associated with the exception message.
            </summary>
            <owner>SumedhK</owner>
            <value>Error code string, or null.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.HelpKeyword">
            <summary>
            Gets the F1-help keyword (if any) associated with this error, for the host IDE.
            </summary>
            <owner>SumedhK</owner>
            <value>The keyword string, or null.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidProjectFileException.HasBeenLogged">
            <summary>
            Whether the exception has already been logged. Allows the exception to be logged at the 
            most appropriate location, but continue to be propagated.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException">
            <summary>
            Exception subclass that ToolsetReaders should throw.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.errorCode">
            <summary>
            The MSBuild error code corresponding with this exception.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.#ctor">
            <summary>
            Basic constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Basic constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Basic constructor.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes an MSBuild error code
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor that takes an MSBuild error code
            </summary>
            <param name="message"></param>
            <param name="errorCode"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable method which we must override since Exception implements this interface
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.ErrorCode">
            <summary>
            The MSBuild error code corresponding with this exception, or
            null if none was specified.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.Throw(System.String,System.Object[])">
            <summary>
            Throws an InvalidToolsetDefinitionException.
            
            PERF WARNING: calling a method that takes a variable number of arguments
            is expensive, because memory is allocated for the array of arguments -- do
            not call this method repeatedly in performance-critical scenarios
            </summary>
            <param name="resourceName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.Throw(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an InvalidToolsetDefinitionException including a specified inner exception,
            which may be interesting to hosts.
            
            PERF WARNING: calling a method that takes a variable number of arguments
            is expensive, because memory is allocated for the array of arguments -- do
            not call this method repeatedly in performance-critical scenarios
            </summary>
            <param name="resourceName"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.RegistryException">
            <summary>
            Generic exception used to wrap exceptions thrown during Registry access.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryException.#ctor">
            <summary>
            Basic constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryException.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryException.#ctor(System.String,System.Exception)">
            <summary>
            Basic constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryException.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes a string description of the registry
            key or value causing the error.
            </summary>
            <param name="message"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Since this class implements Iserializable this constructor is required to be implemented.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RegistryException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor that takes a string description of the registry
            key or value causing the error.
            </summary>
            <param name="message"></param>
            <param name="source"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.RemoteErrorException">
            <summary>
            This class is used to wrap exceptions that occur on a different node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RemoteErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for (de)serialization. 
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.RemoteErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable method which we must override since Exception implements this interface
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.RemoteErrorException.BuildEventContext">
            <summary>
            Gets the event context in which the remote exception occured
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.DetectDeadlock(System.Int32,System.Int64,System.Int32)">
            <summary>
            This method is called when the parent engine doesn't see activity for a preset time period to
            determine if the whole system is making forward progress. In order to that, status is collected
            from every node in the system. If no node is making forward progress then the graph of all the 
            inprogress targets is analyzed for cycles. If a cycle is found the appropriate node is instructed
            to break it. If no cause for deadlock can be determined the system is shutdown.
            </summary>
            <returns>New inactivity timeout</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.LogOrDumpError(System.String,System.Object[])">
            <summary>
            Logs an error, or if the loggers are not available, writes it to the console
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.AddTargetStatesToCycleDetector(Microsoft.Build.BuildEngine.NodeStatus[],Microsoft.Build.BuildEngine.TargetCycleDetector)">
            <summary>
            Adds a set of nodeStatus's to the cycle graph 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.GatherNodeInformationForShutdown(Microsoft.Build.BuildEngine.NodeStatus[],Microsoft.Build.BuildEngine.NodeStatus)">
            <summary>
            The system is not making forward progress for an unknown reason. The
            only recourse to is to collect as much data as possible and shutdown with
            an error message
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.SystemShutdown">
            <summary>
            This method is called to shutdown the system in case of fatal error
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.BreakCycle(Microsoft.Build.BuildEngine.TargetInProgessState,Microsoft.Build.BuildEngine.TargetInProgessState)">
            <summary>
            This function is called to break the link between two targets that creates a cycle. The link could be 
            due to depends/onerror relationship between parent and child. In that case both parent and child are
            on the same node and within the same project. Or the link could be formed by an IBuildEngine callback 
            (made such by tasks such as MSBuild or CallTarget) in which case there maybe multiple requests forming 
            same link between parent and child. Also in that case parent and child maybe on different nodes and/or in 
            different projects. In either case the break is forced by finding the correct builds states and causing
            them to fail.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.FindConnectingContexts(Microsoft.Build.BuildEngine.TargetInProgessState,Microsoft.Build.BuildEngine.TargetInProgessState,Microsoft.Build.BuildEngine.Target,System.Collections.Generic.List{Microsoft.Build.BuildEngine.ProjectBuildState},Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            Find all the build contexts that connects child to parent. The only time multiple contexts are possible
            is if the connection is formed by an IBuildEngine callback which requests the same target in the
            same project to be build in parallel multiple times.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Introspector.calculateNewLoopTimeout(System.Int32)">
            <summary>
            Increase the inactivity time out
            </summary>
            <param name="currentTimeout">current inactivity timeout</param>
            <returns>new inactivity timeout</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NodeStatus">
            <summary>
            This class is a container for node status
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeStatus.#ctor(System.Int32,System.Boolean,System.Int32,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Default constructor creating a NodeStatus
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeStatus.#ctor(System.Exception)">
            <summary>
            Create a node status describing an unhandled error
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeStatus.#ctor(System.Boolean)">
            <summary>
            Create a node status indicating that breadth first traversal should be used
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NodeStatus.#ctor(System.Int32)">
            <summary>
            Create a node status indicating that node process has exited
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.TimeSinceLastTaskActivity">
            <summary>
            The time period for which the node has been idle when the status report was filled out
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.TimeSinceLastLoopActivity">
            <summary>
            The time period for which the node has been idle when the status report was filled out
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.LastTaskActivity">
            <summary>
            The time stamp at which the node was last active
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.LastLoopActivity">
            <summary>
            The time stamp at which there was activity in the node's build loop
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.IsActive">
            <summary>
            True if the node is active (i.e. has been launched and can accept commands)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.HasExited">
            <summary>
            True if the node process is no longer alive
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.RequestId">
            <summary>
            The token of the request to which this is a response (-1 if status is unrequested)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.QueueDepth">
            <summary>
            The number of requests that need to be processed
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.StateOfInProgressTargets">
            <summary>
            The state of the targets which are in progress on the node
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.IsLaunchInProgress">
            <summary>
            True if the node is in the process of being launched, but is not yet active
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.NodeStatus.UnhandledException">
            <summary>
            Returns the exception that occured on the node
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetCycleDetector">
            <summary>
            This class is used to construct and analyze the graph of inprogress targets in order to find
            cycles inside the graph. To find cycles a post order traversal is used to assign a post order 
            traversal to each node. Back edges indicate cycles in the graph and they can indentified by
            a link from lower index node to a higher index node. 
            
            The graph arrives in pieces from individual nodes and needs to be stiched together by identifying
            the parent and child for each cross node link. To do that it is necessary to match up parent 
            build request for a child with and outstanding request from the parent (see LinkCrossNodeBuildRequests)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCycleDetector.AddTargetsToGraph(Microsoft.Build.BuildEngine.TargetInProgessState[])">
            <summary>
            Add a information about an array of inprogress targets to the graph
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCycleDetector.AddTargetToGraph(Microsoft.Build.BuildEngine.TargetInProgessState)">
            <summary>
            Add a information about a given inprogress target to the graph
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCycleDetector.FindCycles">
            <summary>
            Analyze the graph and try to find cycles. Returns true if a cycle is found.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCycleDetector.LinkCrossNodeBuildRequests">
            <summary>
            For each target that has a cross node build request waiting for it to complete, iterate
            over the list of outstanding requests and find the matching out going request. Once
            the matching request is found - link the parent and child targets.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCycleDetector.BreadthFirstTraversal(Microsoft.Build.BuildEngine.TargetCycleDetector.GraphNode)">
            <summary>
            Breadth first traversal over the DAG, assigning post order indecies to each node in the graph. This
            function should be called at least once for each tree in the forest in order to assign
            indecies to every node in the graph
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetCycleDetector.FindBackEdges(Microsoft.Build.BuildEngine.TargetCycleDetector.GraphNode)">
            <summary>
            Check for back edges from the given node to its children
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.dependencyGraph">
            <summary>
            The table of all targets in the dependency graph, indexed by TargetNameStructure which
            contains Target name, Project Id, Node Id which uniquely identifies every target in the system
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.outstandingExternalRequests">
            <summary>
            List of all outstanding cross node build requests
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.traversalCount">
            <summary>
            The index used for the breadth first traversal
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.cycleParent">
            <summary>
            The TargetNameStructure for the parent of the edge creating the cycle
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.cycleChild">
            <summary>
            The TargetNameStructure for the parent of the edge creating the cycle
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.engineLoggingService">
            <summary>
            Logging service for outputing the loop trace
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.TargetCycleDetector.engineCallback">
            <summary>
            Engine callback which is to walk the inprogress execution contexts
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetInProgessState">
            <summary>
            This class is used to construct and contain the state of an inprogress targets. The primary data
            includes build requests blocked until this target completes and build requests that must complete 
            before this target can make forward process.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetInProgessState.ProcessBuildContext(Microsoft.Build.BuildEngine.EngineCallback,Microsoft.Build.BuildEngine.ProjectBuildState,Microsoft.Build.BuildEngine.Target)">
            <summary>
            Figure out the parent target or the parent build request for the given context
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetInProgessState.TargetId">
            <summary>
            Unique identifier for the target
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetInProgessState.ParentTargets">
            <summary>
            List of unique identifiers for the targets that are blocked until the current 
            target completes
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetInProgessState.ParentBuildRequests">
            <summary>
            List of build requests that are blocked until the current 
            target completes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Build.BuildEngine.TargetInProgessState.OutstandingBuildRequests" -->
        <member name="P:Microsoft.Build.BuildEngine.TargetInProgessState.ParentTargetsForBuildRequests">
            <summary>
            An array of unique identifiers for the targets that generated the build requests (parentBuildRequests)
            that are blocked until the current target completes. This array can only be calculated given
            the target information for all the nodes in the system.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetInProgessState.RequestedByHost">
            <summary>
            True if the target was requested by the host. The value is only valid for targets on the
            parent node.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TargetInProgessState.ProjectName">
            <summary>
            Name of the project containing the target (only used for logging)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetInProgessState.FindParentTarget(Microsoft.Build.BuildEngine.EngineCallback,Microsoft.Build.BuildEngine.ProjectBuildState,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.BuildRequest@)">
            <summary>
            Given a build state try to find the parent target that caused this build state to
            come into being either via dependent, on error relationship or via IBuildEngine call
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetInProgessState.FindParentTargetForBuildRequest(Microsoft.Build.BuildEngine.EngineCallback,Microsoft.Build.BuildEngine.BuildRequest,Microsoft.Build.BuildEngine.BuildRequest@)">
            <summary>
            Given a build request try to find the target that caused it to come into being
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetInProgessState.CheckBuildContextForParentMatch(Microsoft.Build.BuildEngine.EngineCallback,Microsoft.Build.BuildEngine.TargetInProgessState.TargetIdWrapper,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.ProjectBuildState)">
            <summary>
            This function checks if the given ProjectBuildState is caused by a given parent target (via
            a dependency, onerror or IBuildEngine relationship)
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetInProgessState.TargetIdWrapper">
            <summary>
            A class that contains information to uniquely identify a target
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TargetInProgessState.TargetIdWrapper.Equals(System.Object)">
            <summary>
            Override the equals operator to give valuetype comparison semantics
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.SplitSemiColonSeparatedList(System.String)">
            <summary>
            Splits an expression into fragments at semi-colons, except where the
            semi-colons are in a macro or separator expression.
            Fragments are trimmed and empty fragments discarded.
            </summary>
            <remarks>
            These complex cases prevent us from doing a simple split on ';':
             (1) Macro expression: @(foo->'xxx;xxx')
             (2) Separator expression: @(foo, 'xxx;xxx')
             (3) Combination: @(foo->'xxx;xxx', 'xxx;xxx')
             We must not split on semicolons in macro or separator expressions like these.
            </remarks>
            <param name="expression">List expression to split</param>
            <owner>danmose</owner>
            <returns>Array of non-empty strings from split list.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.GetReferencedItemNamesAndMetadata(System.Collections.Generic.List{System.String})">
            <summary>
            Given a list of expressions that may contain item list expressions,
            returns a pair of tables of all item names found, as K=Name, V=String.Empty;
            and all metadata not in transforms, as K=Metadata key, V=MetadataReference,
            where metadata key is like "itemname.metadataname" or "metadataname".
            PERF: Tables are null if there are no entries, because this is quite a common case.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.ContainsMetadataExpressionOutsideTransform(System.String)">
            <summary>
            Returns true if there is a metadata expression (outside of a transform) in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.GetReferencedItemNamesAndMetadata(System.String,System.Int32,System.Int32,Microsoft.Build.BuildEngine.ItemsAndMetadataPair@,Microsoft.Build.BuildEngine.ShredderOptions)">
            <summary>
            Given a subexpression, finds referenced item names and inserts them into the table
            as K=Name, V=String.Empty.
            </summary>
            <remarks>
            We can ignore any semicolons in the expression, since we're not itemizing it.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.SinkSingleQuotedExpression(System.String,System.Int32@,System.Int32)">
            <summary>
            Returns true if a single quoted subexpression begins at the specified index
            and ends before the specified end index.
            Leaves index one past the end of the second quote.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.SinkValidName(System.String,System.Int32@,System.Int32)">
            <summary>
            Returns true if a valid name begins at the specified index.
            Leaves index one past the end of the name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.Sink(System.String,System.Int32@,System.Char)">
            <summary>
            Returns true if the character at the specified index 
            is the specified char. 
            Leaves index one past the character.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.Sink(System.String,System.Int32@,System.Int32,System.Char,System.Char)">
            <summary>
            Returns true if the next two characters at the specified index
            are the specified sequence.
            Leaves index one past the second character.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ExpressionShredder.SinkWhitespace(System.String,System.Int32@)">
            <summary>
            Moves past all whitespace starting at the specified index.
            Returns the next index, possibly the string length.
            </summary>
            <remarks>
            Char.IsWhitespace() is not identical in behavior to regex's \s character class,
            but it's extremely close, and it's what we use in conditional expressions.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ShredderOptions">
            <summary>
            What the shredder should be looking for.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ItemsAndMetadataPair">
            <summary>
            Wrapper of two tables for a convenient method return value.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.MetadataReference.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="itemName">can be null</param>
            <param name="metadataName"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Lookup">
            <summary>
            Contains a list of item and property collections, optimized to allow
                - very fast "cloning"
                - quick lookups
                - scoping down of item subsets in nested scopes (useful for batches)
                - isolation of adds, removes, modifies, and property sets inside nested scopes
                
            When retrieving the item group for an item type, each table is consulted in turn,
            starting with the primary table (the "top" or "innermost" table), until a table is found that has an entry for that type.
            When an entry is found, it is returned without looking deeper.
            This makes it possible to let callers see only a subset of items without affecting or cloning the original item groups,
            by populating a scope with item groups that are empty or contain subsets of items in lower scopes.
            
            Instances of this class can be cloned with Clone() to share between batches.
            
            When EnterScope() is called, a fresh primary table is inserted, and all adds and removes will be invisible to
            any clones made before the scope was entered and anyone who has access to item groups in lower tables.
            
            When LeaveScope() is called, the primary tables are merged into the secondary tables, and the primary tables are discarded.
            This makes the adds and removes in the primary tables visible to clones made during the previous scope.
            
            Scopes can be populated (before Adds, Removes, and Lookups) using PopulateWithItem(). This reduces the set of items of a particular
            type that are visible in a scope, because lookups of items of this type will stop at this level and see the subset, rather than the
            larger set in a scope below.
            
            Items can be added or removed by calling AddNewItem() and RemoveItem(). Only the primary level is modified.
            When items are added or removed they enter into a primary table exclusively for adds or removes, instead of the main primary table.
            This allows the adds and removes to be applied to the scope below on LeaveScope(). Even when LeaveScope() is called, the adds and removes
            stay in their separate add and remove tables: if they were applied to a main table, they could truncate the downward traversal performed by lookups
            and hide items in a lower main table. Only on the final call of LeaveScope() can all adds and removes be applied to the outermost table, i.e., the project.
            
            Much the same applies to properties.
            
            For sensible semantics, only the current primary scope can be modified at any point.
            </summary>
            <remarks>
            THREAD SAFETY:
                - BuildItemGroups are currently unsafe for concurrent reading and writing (they have a List field). So a Lookup cannot be read and written to 
                  concurrently.
                - To avoid this problem, the lookup can be populated with a clone of an item group, and lookup can be Truncate()'d at the level of that clone 
                  until control of the lookup goes back to the safe thread.
            
            FUTURE:
                - We could eliminate all the code performing resetting of project build state (currently implemented using special tables for Output properties and 
                  backups of persisted item groups and metadata before modification) by using a Lookup, entering scope at the start of a build, 
                  then when build state needs to be reset, throwing away the Lookup (rather than leaving scope).
            </remarks>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Lookup.lookupEntries">
            <summary>
            Ordered list of entries used for lookup.
            Each entry contains multiple tables:
             - the main item table (populated with subsets of lists, in order to create batches)
             - the add table (items that have been added during execution)
             - the remove table (items that have been removed during execution)
             - the modify table (item metadata modifications)
             - the main property table (populated with properties that are visible in this scope)
             - the property set table (changes made to properties)
            All have to be consulted to find the items and properties available in the current scope.
            We have to keep them separate, because the adds and removes etc need to be applied to the table
            below when we leave a scope.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Lookup.projectItems">
            <summary>
            Projects store their items in a hashtable of item groups by name (which we handle in our lookup table)
            but also in a single item group. When we leave scope the last time, we have to update this item group as 
            well. This is only used when we leave scope the last time.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Lookup.cloneTable">
            <summary>
            When we are asked for all the items of a certain type using the GetItems() method, we may have to handle items
            that have been modified earlier with ModifyItems(). These pending modifications can't be applied immediately to
            the item because that would affect other batches. Instead we clone the item, apply the modification, and hand that over.
            The problem is that later we might get asked to remove or modify that item. We want to make sure that we record that as
            a remove or modify of the real item, not the clone we handed over. So we keep a lookup of (clone, original) to consult.
            The "beautiful" alternative to this would probably involve giving items the concept of a pending change, but this works
            for what we need it to do right now.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Lookup.readOnlyLookup">
            <summary>
            Read-only wrapper around this lookup.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Lookup.itemDefinitionLibrary">
            <summary>
            Library of default metadata to apply to items added to this lookup.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.#ctor(Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Copy constructor (called via Clone() - clearer semantics)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Lookup.ReadOnlyLookup">
            <summary>
            Returns a read-only wrapper around this lookup
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.GetPropertyOverrideMessages(System.Collections.Hashtable)">
            <summary>
            Compares the primary property sets of the passed in lookups to determine if there are properties which are shared between
            the lookups. We find these shared property names because this indicates that the current Lookup is overriding the property value of another Lookup
            When an override is detected a messages is generated to inform the users that the property is being changed between batches
            </summary>
            <returns>array or error messages to log </returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.Clone">
            <summary>
            Clones this object, to create another one with its own list, but the same contents.
            Then the clone can enter scope and have its own fresh primary list without affecting the other object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.EnterScope">
            <summary>
            Push the tables down and add a fresh new primary entry at the top.
            Returns the new scope. In general, callers should not use this returned scope.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.LeaveScope">
            <summary>
            Moves all tables up one: the tertiary table becomes the secondary table, and so on. The primary
            and secondary table are merged. This has the effect of "applying" the adds applied to the primary
            table into the secondary table.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.MergeScopeIntoNotLastScope">
            <summary>
            Leaving an arbitrary scope, just merging all the adds, removes, modifies, and sets into the scope below.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.MergeScopeIntoLastScope">
            <summary>
            Merge the current scope down into the base scope. This means applying the adds, removes, modifies, and sets
            directly into the item and property tables in this scope.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.GetProperty(System.String)">
            <summary>
            Gets the effective property for the current scope.
            If no match is found, returns null.
            Caller must not modify the property returned.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.GetItems(System.String)">
            <summary>
            Gets the items of the specified type that are visible in the current scope.
            If no match is found, returns null.
            Caller must not modify the group returned.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.PopulateWithItems(System.String,Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Populates with an item group. This is done before the item lookup is used in this scope.
            Assumes all the items in the group have the same, provided, type.
            Assumes there is no item group of this type in the primary table already.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.PopulateWithItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Populates with an item. This is done before the item lookup is used in this scope.
            There may or may not already be a group for it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.SetProperty(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            Apply a property to this scope.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.AddNewItems(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Implements a true add, an item that has been created in a batch.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.AddNewItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Implements a true add, an item that has been created in a batch.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.RemoveItems(System.Collections.Generic.List{Microsoft.Build.BuildEngine.BuildItem})">
            <summary>
            Remove a bunch of items from this scope
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.RemoveItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Remove an item from this scope
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.ModifyItems(System.String,Microsoft.Build.BuildEngine.BuildItemGroup,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Modifies items in this scope with the same set of metadata modifications.
            Assumes all the items in the group have the same, provided, type.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.ApplyModifies(Microsoft.Build.BuildEngine.BuildItemGroup,System.Collections.Generic.Dictionary{Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Apply modifies to a temporary result group.
            Items to be modified are virtual-cloned so the original isn't changed.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.RetrieveOriginalFromCloneTable(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Look up the "real" item by using its clone, and return the real item.
            See <see cref="F:Microsoft.Build.BuildEngine.Lookup.cloneTable"/> for explanation of the clone table.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.ImportItemsIntoTable(System.Collections.Hashtable,System.String,Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Puts items from the group into the table.
            Assumes all the items in the group have the same, provided, type.
            There may or may not already be a group for it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.RemoveItemsFromTableWithBackup(System.Collections.Hashtable,System.String,Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Removes items from the group from the table.
            Assumes all the items in the group have the same, provided, type.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.ApplyModificationsToTable(System.Collections.Hashtable,System.String,System.Collections.Generic.Dictionary{Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Applies a list of modifications to the appropriate BuildItemGroup in a main table.
            If any modifications conflict, these modifications win.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Lookup.ModifyMergeType">
            <summary>
            When merging metadata, we can deal with a conflict two different ways:
            FirstWins = any previous metadata with the name takes precedence
            SecondWins = the new metadata with the name takes precedence
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.MergeModificationsIntoModificationTable(System.Collections.Generic.Dictionary{Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String}},System.Collections.Generic.KeyValuePair{Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String}},Microsoft.Build.BuildEngine.Lookup.ModifyMergeType)">
            <summary>
            Applies a modification to an item in a table of modifications.
            If the item already exists in the table, merges in the modifications; if there is a conflict
            the mergeType indicates which should win.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.ImportItemIntoTable(System.Collections.Hashtable,Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Puts the item into the table.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.CreateTableIfNecessary(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String}}})">
            <summary>
            Helper useful since we only create tables if they're needed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.CreatePropertyGroupIfNecessary(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Helper useful since we only create groups if they're needed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.CreateItemGroupIfNecessary(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Helper useful since we only create groups if they're needed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.MustBeOwningThread">
            <summary>
            Verify the thread that created the scope is the one modifying it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Lookup.MustNotBeOuterScope">
            <summary>
            Add/remove/modify/set directly on an outer scope would need to be handled separately - it would apply
            directly to the main tables. Our code isn't expected to do this.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ReadOnlyLookup">
            <summary>
            Read-only wrapper around a lookup.
            Passed to Expander and ItemExpander, which only need to
            use a lookup in a read-only fashion, thus increasing 
            encapsulation of the data in the Lookup.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LookupEntry">
            <summary>
            Represents an entry in the lookup list.
            Class rather than a struct so that it can be modified in the list.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.Items">
            <summary>
            The main table, populated with items that
            are initially visible in this scope. Does not 
            include adds or removes unless it's the table in 
            the outermost scope.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.Adds">
            <summary>
            Adds made in this scope or above.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.Removes">
            <summary>
            Removes made in this scope or above.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.Modifies">
            <summary>
            Modifications made in this scope or above.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.Properties">
            <summary>
            The main property table, populated with properties
            that are initially visible in this scope. Does not
            include sets unless it's the table in the outermost scope.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.PropertySets">
            <summary>
            Properties set in this scope or above.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.ThreadIdThatEnteredScope">
            <summary>
            ID of thread owning this scope
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LookupEntry.TruncateLookupsAtThisScope">
            <summary>
            Whether to stop lookups going beyond this scope downwards
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItem">
            <summary>
            This class represents a single item of the project. An item is usually a file on disk, with a type associated with it, and
            its own item-specific attributes. The list of items is initially specified via XML tags in the project file, although a
            single item tag can represent multiple items through the use of standard wilcards * and ?. Also, tasks can add new items
            of various types to the project's item list -- these items don't have any XML representation.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BuildItem.itemDefinitionLibrary">
            <summary>
            The library to consult for possible default metadata values when the
            item itself does not have a value for requested metadata.
            May be null, if this item is not associated with a particular project.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.#ctor(System.Xml.XmlDocument,System.String,System.String,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            Creates a new item with an XML element backing it. Use this to add a new persisted item to the project file.
            </summary>
            <param name="ownerDocument">can be null</param>
            <param name="name">can be null</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.#ctor(System.Xml.XmlDocument,System.String,System.String,System.Boolean,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            Creates either a new item with an XML element backing it, or a virtual
            item. To conserve memory, this constructor does not allocate storage
            for custom metadata, unless told to do so.
            </summary>
            <remarks>
            PERF WARNING: Allocating memory for the custom metadata cache is expensive
            when a build generates a large number of items.
            </remarks>
            <param name="ownerDocument">can be null</param>
            <param name="name">can be null</param> 
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.BuildItemHelper(System.Xml.XmlDocument,System.String,System.String,System.Boolean,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            Common code for constructors. If an ownerDocument is passed in, it's a persisted element.
            </summary>
            <param name="itemName">can be null</param>
            <param name="itemDefinitionLibrary">can only be null if ownerDocument is null</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.#ctor(System.String,System.String)">
            <summary>
            This constructor creates a new virtual (non-persisted) item with the
            specified type and include.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.#ctor(System.Xml.XmlElement,System.Boolean,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            This constructor initializes a persisted item from an existing item
            element which exists either in the main project file or one of the
            imported files.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.#ctor(System.Xml.XmlElement,System.Boolean,System.Boolean,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            This constructor initializes an item from an item element.
            It is part of the project manifest or not as specified.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.#ctor(System.String,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            This constructor creates a new virtual (non-persisted) item based
            on a ITaskItem object that was emitted by a task.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.IsImported">
            <summary>
            This returns a boolean telling you whether this particular item
            was imported from another project, or whether it was defined
            in the main project.  For virtual items which have no
            persistence, this is false.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.Name">
            <summary>
            Accessor for the item's "type" string.  Note that changing the "Type"
            of an BuildItem requires the whole project to be re-evalauted.  This is because
            items are frequently stored in hash tables based on their item types,
            so changing an item type would mess up the tables.  In the current
            implementation the caller who changes the item type is responsible
            for calling Project.MarkAsDirty().
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ItemDefinitionLibrary">
            <summary>
            The backing library of default metadata values, if any.
            Projects need to update this with their own library,
            when an item is added to them.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Build.BuildEngine.BuildItem.Include" -->
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.MetadataNames">
            <summary>
            Gets the names of metadata on the item -- also includes the pre-defined/reserved item-spec modifiers.
            </summary>
            <owner>SumedhK, JomoF</owner>
            <value>Collection of name strings.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.MetadataCount">
            <summary>
            Gets the number of metadata set on the item.
            </summary>
            <owner>SumedhK</owner>
            <value>Count of metadata.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.CustomMetadataNames">
            <summary>
            Gets the names of metadata on the item -- also includes the pre-defined/reserved item-spec modifiers.
            </summary>
            <owner>SumedhK, JomoF</owner>
            <value>Collection of name strings.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.CustomMetadataCount">
            <summary>
            Gets the number of metadata set on the item.
            </summary>
            <owner>SumedhK</owner>
            <value>Count of metadata.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.IncludeAttribute">
            <summary>
            Read-only accessor for accessing the XML attribute for "Include".  Callers should
            never try and modify this.  Go through this.Include to change the include spec.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.Exclude">
            <summary>
            Accessor for the item's "exclude" string.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ExcludeAttribute">
            <summary>
            Read-only accessor for accessing the XML attribute for "Exclude".  Callers should
            never try and modify this.  Go through this.Exclude to change the exclude spec.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.Condition">
            <summary>
            Accessor for the item's "condition".
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ConditionAttribute">
            <summary>
            Read-only accessor for accessing the XML attribute for "Condition".  Callers should
            never try and modify this.  Go through this.Condition to change the condition.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ItemElement">
            <summary>
            Gets the XmlElement representing this item.
            </summary>
            <owner>RGoel</owner>
            <value>The item XmlElement, or null if item is virtual.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.FinalItemSpecEscaped">
            <summary>
            Accessor for the final evaluated item specification.  This is read-only.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.FinalItemSpec">
            <summary>
            Returns the unescaped final value of the item.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.EvaluatedItemSpec">
            <summary>
            Read-only accessor for the piece of the item's Include that resulted in
            this item, with properties expanded.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ParentPersistedItemGroup">
            <summary>
            If this item is persisted in the project file, then we need to
            store a reference to the parent &lt;ItemGroup&gt;.  This makes it easier
            to remove an item from a project through the object model.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ParentPersistedItem">
            <summary>
            When an item in a project file gets evaluated, it may evaluate to
            several different items.  For example, in the project file,
            &lt;Blah Include="a;b;c"/&gt; really evaluates to 3 separate
            items:  a, b, and c.
            For one of these 3 evaluated items, the parent item is the original
            item tag that came from the project file.  When one of these
            "child" items is modified/deleted/etc. through the object model, we
            need a pointer to the parent item in order to modify it accordingly.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.ChildItems">
            <summary>
            When an item in a project file gets evaluated, it may evaluate to
            several different items.  This is the list of child items that
            a real item tag in the project file evaluated to.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.IsPartOfProjectManifest">
            <summary>
            Whether this item is part of the project "manifest", ie., it is defined in XML
            outside of a target.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.IsBackedByXml">
            <summary>
            Whether this item has backing XML
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItem.IsBackedUp">
            <summary>
            Whether the metadata lists have been backed up
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.CloneCustomMetadata">
            <summary>
            Get the collection of custom metadata. This does not include built-in metadata.
            </summary>
            <remarks>
            RECOMMENDED GUIDELINES FOR METHOD IMPLEMENTATIONS:
            1) this method should return a clone of the metadata
            2) writing to this dictionary should not be reflected in the underlying item.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.InitializeCustomMetadataCache">
            <summary>
            Initializes the cache for storing custom attributes (meta-data).
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.InitializeFromItemElement(System.Xml.XmlElement)">
            <summary>
            Initializes a persisted item from an existing item element which exists either in the main project file or in one of
            the imported files.
            </summary>
            <param name="itemElementToParse"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SetEvaluatedItemSpecEscaped(System.String)">
            <summary>
            Allows the project to save the value of the item's Include attribute after expanding all embedded properties.
            </summary>
            <param name="evaluatedItemSpecValueEscaped">Can be null.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SetFinalItemSpecEscaped(System.String)">
            <summary>
            This allows the engine to set the final item spec for this item, after
            it has been evaluated.  A fair question is ... why doesn't the BuildItem
            object itself have an internal Evaluate() method which allows it
            to evaluate itself and set its own finalItemSpec.  The answer is
            simply that the BuildItem doesn't have nearly enough information to be
            able to do this.  An BuildItem can only be evaluated in the context of the
            larger project.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.ExtractRecursivePortionOfFinalItemSpecDirectory">
             <summary>
             This method extracts from the final item-spec the portion of its directory that matches the recursive wildcard
             specification (if any) given in the original item-spec i.e. in the "Include" attribute.
            
             For the path:
            
                 subdir1\**\debug\*.txt
            
             Recursive portion:
            
                 bin\debug\
            
             </summary>
             <returns>recursively matched portion of item directory</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.Evaluate(Microsoft.Build.BuildEngine.Expander,System.String,System.Boolean,Microsoft.Build.BuildEngine.ParserOptions,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Evaluates the item and returns a virtual group containing any resulting items.
            This allows an item to be evaluated without it belonging to an item group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.CreateClonedParentedItem(Microsoft.Build.BuildEngine.BuildItem,Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Create a clone of the parent item with all the information from the child item.
            </summary>
            <remarks>
            FUTURE: It is unclear what this Whidbey code is for -- the callers already have a child item don't they?
            Can this be eliminated to avoid excess cloning?
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.EvaluateAllItemMetadata(Microsoft.Build.BuildEngine.Expander,Microsoft.Build.BuildEngine.ParserOptions,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Populate the lists of evaluated and unevaluated metadata with all metadata that have true conditions.
            </summary>
            <remarks>
            FUTURE: Currently this isn't done when the item is constructed; so for example HasMetadata will always return
            false until EvaluatedAllItemMetadata is explicitly called. The reason for this is that Metadata are
            not first class objects, they are merely string pairs produced by running over the child XML with a particular expander.
            When Metadata are first class objects this method can be changed to merely evaluate them, 
            just as BuildItemGroup.Evaluate does for BuildItem, then methods like HasMetadata behave more sanely. Of course this
            could be a breaking change.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.HasMetadata(System.String)">
            <summary>
            Indicates if the given metadata is set on the item.
            </summary>
            <remarks>BuildItem-spec modifiers are treated as metadata.</remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetMetadata(System.String)">
            <summary>
            Retrieves an arbitrary unevaluated metadata value from the item element. These are pieces of metadata that the project author has
            placed on the item element that have no meaning to MSBuild. They are just arbitrary metadata that travel around with
            the BuildItem wherever it goes.
            </summary>
            <param name="metadataName">The name of the metadata to retrieve.</param>
            <returns>The value of the requested metadata.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested metadata is not applicable to the item.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetEvaluatedMetadata(System.String)">
            <summary>
            Retrieves an arbitrary metadata from the item element, expands any property and item references within it, and 
            unescapes it.
            </summary>
            <remarks>Custom attributes on virtual items are not evaluated.</remarks>
            <param name="metadataName">The name of the attribute to retrieve.</param>
            <returns>The evaluated value of the requested attribute.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested attribute is not applicable to the item.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetEvaluatedMetadataEscaped(System.String)">
            <summary>
            Retrieves an arbitrary metadata from the item element, expands any property and item references within it.
            </summary>
            <remarks>Custom attributes on virtual items are not evaluated.</remarks>
            <param name="metadataName">The name of the attribute to retrieve.</param>
            <returns>The evaluated value of the requested attribute.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested attribute is not applicable to the item.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetAllCustomMetadataNames">
            <summary>
            Retrieves all user-defined/custom attribute names.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetCustomMetadataCount">
            <summary>
            Indicates how many custom attributes are set on this item.
            </summary>
            <remarks>
            This method does NOT count the pre-defined/reserved item-spec modifiers because they are NOT "custom" attributes.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.CopyCustomMetadataTo(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Copies all custom attributes to given item.
            </summary>
            <param name="destinationItem">BuildItem to copy custom attributes to</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.CloneVirtualMetadata">
            <summary>
            Clones the hashtables which cache the values of all the custom metadata on this item.
            Callers should do this when they know that they have a shallow clone of another item,
            and they want to modify the attributes on this item without touching the original item.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.ImportVirtualMetadataFrom(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Without altering the backing XML of this item, copy custom metadata from the given item.
            </summary>
            <param name="itemToCopyFrom"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetAllCustomEvaluatedMetadata">
            <summary>
            Retrieves all user-defined/custom metadata after expanding any property references they might contain.
            NOTE: Merges them into any default metadata -- so if there are any default metadata, this may return considerably
            more than just the metadata specifically on this item.
            </summary>
            <remarks>
            This method does NOT return the pre-defined/reserved item-spec modifiers because they are NOT "custom" metadata
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetAllCustomUnevaluatedMetadata">
            <summary>
            Retrieves all user-defined/custom metadata in unevaluated form.
            NOTE: Merges them into any default metadata -- so if there are any default metadata, this may return considerably
            more than just the metadata specifically on this item.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.MergeDefaultMetadata(System.Collections.IDictionary)">
            <summary>
            Returns a dictionary containing any default metadata, with the provided set of metadata
            overlaid on those defaults.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SetMetadata(System.String,System.String,System.Boolean)">
            <summary>
            Sets custom metadata on this item, with the option of treating the metadata value
            literally, meaning that special sharacters will be escaped.
            Does not backup metadata before making changes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SetVirtualMetadata(System.String,System.String)">
            <summary>
            Updates only the metadata tables, not the backing XML. Keep a backup so that the changes
            can be reverted.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.RevertToPersistedMetadata">
            <summary>
            If the metadata tables were backed up, revert them to the originals and
            throw out the backups.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SetMetadata(System.String,System.String)">
            <summary>
            Sets an arbitrary metadata on the item element. These are metadata that the project author has placed on the item
            element that have no meaning to MSBuild. They are just arbitrary metadata that travel around with the BuildItem.
            Does not backup metadata before making changes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.RemoveMetadata(System.String)">
            <summary>
            Removes the specified metadata on the item.
            </summary>
            <remarks>Removal of well-known metadata is not allowed.</remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetDefaultMetadataValue(System.String)">
            <summary>
            Returns any default value that this item knows about for the named metadata.
            If none is known, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetItemSpecModifier(System.String)">
            <summary>
            Performs path manipulations on the (evaluated/final) item-spec as directed.
            </summary>
            <param name="modifier">The modifier to apply to the item-spec, such as RootDir or Filename.</param>
            <returns>The modified item-spec.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the item-spec is not a path.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.NewItemSpecMatchesExistingWildcard(System.String)">
            <summary>
            Determines if the new item spec that the user is trying to add to the project
            already matches an existing wildcarded item declared in the project.  We only
            consider it a "match" in very specific circumstances... if there's anything
            weird or not-mainline about the new item spec or the existing item, we fail
            the match in order to "play it safe".
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.GetParentProject">
            <summary>
            Gets the parent project of this item, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.MarkItemAsDirty">
            <summary>
            Marks the parent project as dirty.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.MarkItemAsDirtyForReevaluation">
            <summary>
            Marks the parent project as dirty for re-evaluation only.  This means that the actual contents
            of the project file XML haven't changed.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.MustNotBeImported">
            <summary>
            Verifies this is not an imported item.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.MustHaveItemDefinitionLibrary(Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            Verifies that an item definition library is supplied.
            This is for internal error checking only.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SplitItem">
            <summary>
            Sometimes an item in the project file is declared such that it actually evaluates
            to multiple items (we call these "child" items).  Examples include the use of
            wildcards, as well as semicolon-separated lists of item specs.  When one of the
            child items is modified through the object model, in order to reflect that
            change in the project file, we have to split up the original item tag into
            multiple item tags.  This method, when called on one of the parent items,
            accomplishes exactly that.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.SplitChildItemIfNecessary">
            <summary>
            Sometimes an item in the project file is declared such that it actually evaluates
            to multiple items (we call these "child" items).  Examples include the use of
            wildcards, as well as semicolon-separated lists of item specs.  When one of the
            child items is modified through the object model, in order to reflect that
            change in the project file, we have to split up the original item tag into
            multiple item tags.  This method, when called on one of the child items,
            accomplishes exactly that.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.Clone">
            <summary>
            This creates a shallow clone of the BuildItem.  If this is an xml-backed item,
            then the clone references the same XML element as the original, meaning
            that modifications to the clone will affect the original.
            </summary>
            <returns></returns>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.UpdateBackingXml(Microsoft.Build.BuildEngine.BuildItemGroupChildXml)">
            <summary>
            Updates the build item xml backing store with the passed in xml backing store. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.VirtualClone(System.Boolean)">
            <summary>
            Clones the item to a virtual item i.e. an item with no backing XML.
            If removeReferences is specified, removes all references which hold on to Projects (or other heavyweight objects)
            in order to minimize the transitive size of the clone.
            </summary>
            <remarks>
            This method differs from Clone() in that it always produces a virtual item, even when given an item with backing XML.
            Decoupling an item from its XML allows modifications to the clone without affecting the original item.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.ConvertBuildItemArrayToTaskItems(Microsoft.Build.BuildEngine.BuildItem[])">
            <summary>
            Convert the given array of BuildItems into ITaskItems (BuildItem names are lost)
            </summary>
            <param name="originalItems"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItem.ConvertTaskItemArrayToBuildItems(Microsoft.Build.Framework.ITaskItem[])">
            <summary>
            Convert the given array of ITaskItems into nameless BuildItems
            </summary>
            <param name="originalItems"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItemGroup">
            <summary>
            This class represents a collection of items.  It may be represented
            physically by an &lt;ItemGroup&gt; element persisted in the project file, 
            or it may just be a virtual BuildItemGroup (e.g., the evaluated items).
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.#ctor">
            <summary>
            Default constructor, which initializes a virtual (non-persisted) BuildItemGroup.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.#ctor(System.Xml.XmlElement,System.Boolean,Microsoft.Build.BuildEngine.Project)">
            <summary>
            This constructor initializes the BuildItemGroup from an &lt;ItemGroup&gt; element
            in the project file.  It might come from the main project file or an
            imported project file.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.#ctor(System.Xml.XmlDocument,System.Boolean,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Constructor, which creates a new &lt;ItemGroup&gt; element in the XML document
            specified.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.IsImported">
            <summary>
            This returns a boolean telling you whether this particular item
            group was imported from another project, or whether it was defined
            in the main project.  For virtual item groups which have no
            persistence, this is false.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.Condition">
            <summary>
            Accessor for the condition on the item group.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.ItemGroupElement">
            <summary>
            Accessor for the XmlElement representing this item.  This is internal
            to MSBuild, and is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.ParentProject">
            <summary>
            Accessor for the parent Project object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ClearParentProject">
            <summary>
            Setter for parent project field that makes explicit that's it's only for clearing it.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.Count">
            <summary>
            Number of items in this group.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.Items">
            <summary>
            Gets the actual list of items contained
            in this group.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.ParentCollection">
            <summary>
            Accessor for the ParentCollection that the BuildPropertyGroup belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.ParentElement">
            <summary>
            Accessor for the parent XML element
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ToArray">
            <summary>
            Copies the items in this group into a new array.
            NOTE: the copies are NOT clones i.e. only the references are copied
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.GetEnumerator">
            <summary>
            This IEnumerable method returns an IEnumerator object, which allows
            the caller to enumerate through the BuildItem objects contained in
            this BuildItemGroup.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ImportItems(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Import a bunch of items from another BuildItemGroup. This is an O(n) operation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItems(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Remove a bunch of items. This is an O(n) operation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ModifyItemAfterCloningUsingVirtualMetadata(Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Applies each of the item modifications in order.
            Items are replaced with a virtual clone before they are modified.
            If an item does not exist in this group, the modification is skipped.
            If any modifications conflict, these modifications win.
            Returns the cloned item made, or null if it does not exist in this group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ModifyItemsUsingVirtualMetadata(System.Collections.Generic.Dictionary{Microsoft.Build.BuildEngine.BuildItem,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Applies each of the item modifications in order.
            Items are NOT cloned.
            Metadata is set as virtual metadata, so it is reset by Project.ResetBuildStatus().
            If an item does not exist in this group, the modification is skipped.
            If any modifications conflict, these modifications win.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.EnsureCapacity(System.Int32)">
            <summary>
            Pre-allocates space in the item list.
            PERF: Call this first before adding a known quantity of items to a group, to avoid
            repeated expansions of the backing list.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.AddExistingItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Adds an existing BuildItem to the list of items, does not attempt to add
            backing Xml for the item.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.AddExistingItemAt(System.Int32,Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Adds an existing BuildItem to the list of items at the specified index.
            Does not attempt to add backing Xml for the item.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.AddItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Adds an BuildItem to this BuildItemGroup.  If this is a persisted BuildItemGroup, then
            this method also inserts the BuildItem's XML into the appropriate location
            in the XML document.  For persisted ItemGroups, the behavior is that 
            it tries to insert the new BuildItem such that it is "near" other items of the
            same type.  ("Near" is defined as just after the last existing item
            of the same type, or at the end if none is found.)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.AddNewItem(System.String,System.String)">
            <summary>
            Creates a new BuildItem defined by the given "Type" and "Include", and 
            adds it to the end of this BuildItemGroup.
            If the group is persisted, the item is persisted; otherwise it is virtual
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.AddNewItem(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new item to the ItemGroup, optional treating the item Include as literal so that
            any special characters will be escaped before persisting it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItemWithBackup(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Removes the given BuildItem from this BuildItemGroup.
            If the item is part of the project manifest (ie, it's declared outside of a target) then
            makes a backup of persisted items so that later the item group can be reverted to that backup,
            reversing this change.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItem(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Removes the given BuildItem from this BuildItemGroup.
            If item is not in this group, does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItemAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of bounds</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItemElement(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            If this is a persisted group, removes the XML element corresponding to the given item.
            If this is not a persisted group, does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.Clone(System.Boolean)">
            <summary>
            Clones the BuildItemGroup.  A shallow clone here is one that references
            the same BuildItem objects as the original, whereas a deep clone actually
            clones the BuildItem objects as well.  If this is a persisted BuildItemGroup, 
            only deep clones are allowed, because you can't have the same XML 
            element belonging to two parents.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ShallowClone">
            <summary>
            Does a shallow clone, creating a new group with pointers to the same items as the old group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.Clear">
            <summary>
            Removes all Items from this BuildItemGroup, and also deletes the Condition
            and Name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.RemoveAllIntermediateItems">
            <summary>
            Removes all virtual (intermediate) items from this BuildItemGroup.  This
            is used to reset the state of the build back to the initial state,
            when we only knew about the items that were actually declared in the
            project XML.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MarkItemGroupAsDirty">
            <summary>
            Marks the parent project as dirty.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.BackupPersistedItems">
            <summary>
            Create a secret backup list of our persisted items only.
            Then, we can revert back to this later when we're done with the build,
            and we want to remove any virtual items and revert any removes of
            persisted items.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MustBeVirtual(System.String)">
            <summary>
            Call this method to verify that this item group is a well-formed
            virtual item group.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.IsPersisted">
            <summary>
            Returns whether this is a persisted group.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroup.IsBackedUp">
            <summary>
            Returns whether the persisted items have been backed up for later
            recovery.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MustBePersisted(System.String)">
            <summary>
            Verifies this is a persisted group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MustNotBeImported">
            <summary>
            Verifies this is not an imported item group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MustBeInitialized">
            <summary>
            Verifies that the list of items has been created.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MustHaveThisParentElement(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Verifies that the item's parent element is indeed this item group's element.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.MustHaveThisParentGroup(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Verifies the parent item group is indeed this item group.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.Evaluate(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.Hashtable,System.Boolean,System.Boolean,Microsoft.Build.BuildEngine.ProcessingPass)">
            <summary>
            Evaluates an item group that's *outside* of a Target.
            Metadata is not allowed on conditions, and we against the parent project.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.ExpandItemIntoItems(System.String,Microsoft.Build.BuildEngine.BuildItem,Microsoft.Build.BuildEngine.Expander,System.Boolean)">
            <summary>
            Processes the "include" list and the "exclude" list for an item element, and returns
            the resultant virtual group of items. Ignores any condition on the item.
            </summary>
            <param name="baseDirectory">Where relative paths should be evaluated from</param>
            <param name="originalItem">The "mother" item that's being expanded</param>
            <param name="expander">Expander to evaluated items and properties</param>
            <param name="expandMetadata">Whether metadata expressions should be expanded, or left as literals</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroup.FindItemsMatchingSpecification(Microsoft.Build.BuildEngine.BuildItemGroup,System.String,System.Xml.XmlAttribute,Microsoft.Build.BuildEngine.Expander,System.String)">
            <summary>
            Returns a list of all items in the provided item group whose itemspecs match the specification, after it is split and any wildcards are expanded.
            If not items match, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItemGroupCollection">
            <summary>
            This class represents a collection of persisted &lt;ItemGroup&gt;'s.  Each
            MSBuild project has exactly one BuildItemGroupCollection, which includes
            all the imported ItemGroups as well as the ones in the main project file.
            
            The implementation of this class is that it's basically a Facade.  It just
            calls into the GroupingCollection within the Project to do it's work.  It
            doesn't maintain any BuildPropertyGroup state on its own.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.#ctor">
            <summary>
            Private default constructor.  This object can't be instantiated by
            OM consumers.
            </summary>
            <owner>DavidLe, RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.#ctor(Microsoft.Build.BuildEngine.GroupingCollection)">
            <summary>
            Constructor that takes the GroupingCollection that this sits over.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
            <param name="groupingCollection"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroupCollection.Count">
            <summary>
            Read-only property which returns the number of ItemGroups contained
            in our collection.
            </summary>
            <remarks>
            </remarks>
            <owner>DavidLe</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroupCollection.IsSynchronized">
            <summary>
            This ICollection property tells whether this object is thread-safe.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroupCollection.SyncRoot">
            <summary>
            This ICollection property returns the object to be used to synchronize
            access to the class.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildItemGroupCollection.LastLocalItemGroup">
            <summary>
            This looks through all the local item groups (those in the main
            project file, as opposed to any imported project files).  It returns
            the last one that comes before any imported item groups.  This
            is the heuristic we use to determine where to add new item groups
            into the project file.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            This ICollection method copies the contents of this collection to an 
            array.
            </summary>
            <owner>DavidLe</owner>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.GetEnumerator">
            <summary>
            This IEnumerable method returns an IEnumerator object, which allows
            the caller to enumerate through the BuildItemGroup objects contained in
            this BuildItemGroupCollection.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.InsertAfter(Microsoft.Build.BuildEngine.BuildItemGroup,Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Adds a new BuildItemGroup to our collection, at the specified insertion
            point.  This method does nothing to manipulate the project's XML content.
            </summary>
            <owner>DavidLe</owner>
            <param name="insertionPoint"></param>
            <param name="newItemGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.InsertAtEnd(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Adds a new BuildItemGroup as the last element of our collection.
            This method does nothing to manipulate the project's XML content.
            </summary>
            <owner>DavidLe</owner>
            <param name="newItemGroup"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupCollection.RemoveItemGroup(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Removes a BuildItemGroup from our collection.  This method does nothing
            to manipulate the project's XML content.
            </summary>
            <owner>DavidLe</owner>
            <param name="itemGroup"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItemGroupProxy">
            <summary>
            An enumerable wrapper for a hashtable-by-name of BuildItemGroups that allows read-only 
            access to the items.
            </summary>
            <remarks>
            This class is designed to be passed to loggers.
            The expense of copying items is only incurred if and when 
            a logger chooses to enumerate over it.
            </remarks>
            <owner>danmose</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupProxy.#ctor(Microsoft.Build.BuildEngine.BuildItemGroup)">
            <summary>
            Constructor
            </summary>
            <param name="itemGroup">Item group this class should proxy</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupProxy.GetEnumerator">
            <summary>
            Returns an enumerator that provides copies of the items
            in the backing item group.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ItemDefinitionLibrary">
            <summary>
            A library of default metadata values by item type.
            Projects each have exactly one of these.
            BuildItems consult the appropriate library to check
            for default metadata values when they do not have an
            explicit value set.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.#ctor(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Creates a new item definition library.
            The project is required only to give error context.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.Add(System.Xml.XmlElement)">
            <summary>
            Create a BuildItemDefinitionGroupXml element and add it to the end of our ordered list.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException">If element does not represent a valid ItemDefinitionGroup element</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.Evaluate(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Go through each &lt;BuildItemDefinition&gt; element in order, evaluating it using the
            supplied properties and any previously evaluated definitions, to build up a complete
            library of item types and their default metadata values.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.GetDefaultMetadataValue(System.String,System.String)">
            <summary>
            Returns any default metadata value for the specified item type and metadata name.
            If no default exists, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.GetDefaultedMetadataCount(System.String)">
            <summary>
            Count of default metadata for the specified item type
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.GetDefaultedMetadataNames(System.String)">
            <summary>
            Names of metadata that have defaults for the specified item type.
            Null if there are none.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.GetDefaultedMetadata(System.String)">
            <summary>
            All default metadata names and values for the specified item type.
            Null if there are none.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.MustBeEvaluated">
            <summary>
            Verify this library has already been evaluated
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.BuildItemDefinitionGroupXml">
            <summary>
            Encapsulates an &lt;ItemDefinitionGroup&gt; tag.
            </summary>
            <remarks>
            Only used by ItemDefinitionLibrary -- private and nested inside it as no other class should know about this.
            Since at present this has no OM or editing support, and is not passed around,
            there are currently no separate classes for the child tags, and no separate BuildItemDefinitionGroup class. 
            They can be broken out in future if necessary.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.BuildItemDefinitionGroupXml.#ctor(System.Xml.XmlElement,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Read in and validate an &lt;ItemDefinitionGroup&gt; element and all its children.
            This is currently only called from ItemDefinitionLibrary. Projects don't know about it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.BuildItemDefinitionGroupXml.Evaluate(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Given the properties and dictionary of previously encountered item definitions, evaluates 
            this group of item definitions and adds to the dictionary as necessary.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException">If the item definitions are incorrectly defined</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.BuildItemDefinitionGroupXml.EvaluateItemDefinitionElement(System.Xml.XmlElement,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Given the properties and dictionary of previously encountered item definitions, evaluates 
            this specific item definition element and adds to the dictionary as necessary.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException">If the item definition is incorrectly defined</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemDefinitionLibrary.BuildItemDefinitionGroupXml.EvaluateItemDefinitionChildElement(System.Xml.XmlElement,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Given the properties and dictionary of previously encountered item definitions, evaluates 
            this specific item definition child element and adds to the dictionary as necessary.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException">If the item definition is incorrectly defined</exception>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.SpecificItemDefinitionLibrary">
            <summary>
            A limited read-only wrapper around an item definition library,
            specific to a particular item type.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SpecificItemDefinitionLibrary.#ctor(System.String,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.SpecificItemDefinitionLibrary.ItemType">
            <summary>
            Returns the item type for which this library is specific.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SpecificItemDefinitionLibrary.GetDefaultMetadataValue(System.String)">
            <summary>
            Get the default if any for the specified metadata name.
            Returns null if there is none.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ItemExpander">
            <summary>
            This class is used by the regular expression search/replace function to replace item references of the form
            @(itemtype->transform, separator) with the correct string.
            </summary>
            <owner>RGoel, SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.#ctor(System.Xml.XmlNode,Microsoft.Build.BuildEngine.ReadOnlyLookup)">
            <summary>
            Constructor, which captures the hashtable of items to use when expanding the item reference.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ExpandEmbeddedItemVectors(System.String,System.Xml.XmlNode,Microsoft.Build.BuildEngine.ReadOnlyLookup)">
            <summary>
            Expands all item vectors embedded in the given string.
            </summary>
            <owner>SumedhK</owner>
            <param name="s"></param>
            <param name="parentNode"></param>
            <param name="itemsByType"></param>
            <returns>Given string, with embedded item vectors expanded.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ItemizeItemVector(System.String,System.Xml.XmlNode,Microsoft.Build.BuildEngine.ReadOnlyLookup)">
            <summary>
            Attempts to extract the items in the given item vector. Item vectors embedded in strings, and item vectors with
            separator specifications are considered invalid, because it is not clear if those item vectors are meant to be lists
            or strings -- if the latter, the ExpandEmbeddedItemVectors() method should be used instead.
            </summary>
            <owner>SumedhK;RGoel</owner>
            <param name="itemVectorExpression"></param>
            <param name="parentNode"></param>
            <param name="itemsByType"></param>
            <returns>a virtual BuildItemGroup containing the items resulting from the expression, or null if the expression was invalid.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ItemizeItemVector(System.String,System.Xml.XmlNode,Microsoft.Build.BuildEngine.ReadOnlyLookup,System.Text.RegularExpressions.Match@)">
            <summary>
            Attempts to extract the items in the given item vector expression. Item vectors embedded in strings, 
            and item vectors with separator specifications are considered invalid, because it is not clear 
            if those item vectors are meant to be lists or strings -- if the latter, the ExpandEmbeddedItemVectors() 
            method should be used instead.
            </summary>
            <param name="itemVectorExpression"></param>
            <param name="parentNode"></param>
            <param name="readOnlyLookup"></param>
            <param name="itemVectorMatch"></param>
            <returns>a virtual BuildItemGroup containing the items resulting from the expression, or null if the expression was invalid.</returns>
            <owner>SumedhK;RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ExpressionContainsItemVector(System.String)">
            <summary>
            Returns true if the expression contains an item vector pattern, else returns false.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.GetItemVectorMatches(System.String)">
            <summary>
            Returns matches to an item expression pattern in the expression.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ItemizeItemVector(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts the items in the given item vector.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemVector"></param>
            <returns>The contents of the item vector (with transforms applied).</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ExpandItemVector(System.Text.RegularExpressions.Match)">
            <summary>
            Expands a single item vector.
            
            Item vectors are composed of a name, a transform, and a separator i.e.
            
                @(&lt;name&gt;->'&lt;transform&gt;','&lt;separator&gt;')
            
            If a separator is not specified it defaults to a semi-colon. The transform expression is also optional, but if
            specified, it allows each item in the vector to have its item-spec converted to a different form. The transform
            expression can reference any custom metadata defined on the item, as well as the pre-defined item-spec modifiers.
            
            NOTE:
            1) white space between &lt;name&gt;, &lt;transform&gt; and &lt;separator&gt; is ignored
               i.e. @(&lt;name&gt;, '&lt;separator&gt;') is valid
            2) the separator is not restricted to be a single character, it can be a string
            3) the separator can be an empty string i.e. @(&lt;name&gt;,'')
            4) specifying an empty transform is NOT the same as specifying no transform -- the former will reduce all item-specs
               to empty strings
            </summary>
            <remarks>This is the MatchEvaluator delegate passed to Regex.Replace().</remarks>
            <example>
            if @(files) is a vector for the files a.txt and b.txt, then:
            
                "my list: @(files)"                                 expands to      "my list: a.txt;b.txt"
            
                "my list: @(files,' ')"                             expands to      "my list: a.txt b.txt"
            
                "my list: @(files, '')"                             expands to      "my list: a.txtb.txt"
            
                "my list: @(files, '; ')"                           expands to      "my list: a.txt; b.txt"
            
                "my list: @(files->'%(Filename)')"                  expands to      "my list: a;b"
            
                "my list: @(files -> 'temp\%(Filename).xml', ' ')   expands to      "my list: temp\a.xml temp\b.xml"
            
                "my list: @(files->'')                              expands to      "my list: ;"
            </example>
            <owner>SumedhK</owner>
            <param name="itemVector"></param>
            <param name="isUnknownItemType">(out) true if the referenced item does not exist</param>
            <returns>expanded item vector</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ItemExpander.ExpandItemMetadata(System.Text.RegularExpressions.Match)">
            <summary>
            Retrieves the value of the given metadata for the item currently being transformed.
            </summary>
            <remarks>This method is a MatchEvaluator delegate passed to Regex.Replace().</remarks>
            <owner>SumedhK</owner>
            <param name="itemMetadataMatch"></param>
            <returns>item metadata value</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TaskItem">
            <summary>
            This class wraps a project item, and provides a "view" on the item's BuildItem class that is suitable to expose to tasks.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.#ctor">
            <summary>
            Private default constructor disallows parameterless instantiation.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.#ctor(System.String)">
            <summary>
            Creates an instance of this class given the item-spec.
            </summary>
            <owner>SumedhK</owner>
            <param name="itemSpec"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.#ctor(Microsoft.Build.BuildEngine.BuildItem)">
            <summary>
            Creates an instance of this class given the backing item.
            </summary>
            <owner>SumedhK</owner>
            <param name="item"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskItem.ItemSpec">
            <summary>
            Gets or sets the item-spec for the item.
            </summary>
            <owner>SumedhK</owner>
            <value>Item-spec string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskItem.MetadataNames">
            <summary>
            Gets the names of metadata on the item -- also includes the pre-defined/reserved item-spec modifiers.
            </summary>
            <owner>SumedhK, JomoF</owner>
            <value>Collection of name strings.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskItem.MetadataCount">
            <summary>
            Gets the number of metadata set on the item.
            </summary>
            <owner>SumedhK</owner>
            <value>Count of metadata.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskItem.CustomMetadataNames">
            <summary>
            Gets the names of custom metadata on the item
            </summary>
            <value>Collection of name strings.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.TaskItem.CustomMetadataCount">
            <summary>
            Gets the number of custom metadata set on the item.
            </summary>
            <value>Count of metadata.</value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.GetMetadata(System.String)">
            <summary>
            Looks up the value of the given custom metadata.
            </summary>
            <owner>SumedhK</owner>
            <param name="metadataName"></param>
            <returns>value of metadata</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.SetMetadata(System.String,System.String)">
            <summary>
            Sets the value of the specified custom metadata.
            </summary>
            <owner>SumedhK</owner>
            <param name="metadataName"></param>
            <param name="metadataValue"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.RemoveMetadata(System.String)">
            <summary>
            Removes the specified custom metadata.
            </summary>
            <owner>SumedhK</owner>
            <param name="metadataName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Copy the metadata (but not the ItemSpec or other built-in metadata) to destinationItem. If a particular metadata
            already exists on the destination item, then it is not overwritten -- the original value wins.
            </summary>
            <owner>JomoF</owner>
            <param name="destinationItem"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.CloneCustomMetadata">
            <summary>
            Get the collection of metadata. This does not include built-in metadata.
            </summary>
            <remarks>
            RECOMMENDED GUIDELINES FOR METHOD IMPLEMENTATIONS:
            1) this method should return a clone of the metadata
            2) writing to this dictionary should not be reflected in the underlying item.
            </remarks>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.ToString">
            <summary>
            Produce a string representation.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.InitializeLifetimeService">
            <summary>
            Overriden to give this class infinite lease time. Otherwise we end up with a limited
            lease (5 minutes I think) and instances can expire if they take long time processing.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.TaskItem.op_Explicit(Microsoft.Build.BuildEngine.TaskItem)~System.String">
            <summary>
            This allows an explicit typecast from a "TaskItem" to a "string", returning the ItemSpec for this item.
            </summary>
            <owner>RGoel</owner>
            <param name="taskItemToCast">The item to operate on.</param>
            <returns>The item-spec of the item.</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalCallDescriptor">
            <summary>
            This call is used to contain, serialize and deserialize arguments for call
            made via INodeProvider and IEngineCallback interfaces. To make calls via these
            interfaces asyncronous the parameters are queued up for a IO thread which
            reads/writes the shared memory buffer to transfer these parameters cross 
            process.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalCallDescriptor.HostAction(Microsoft.Build.BuildEngine.IEngineCallback,Microsoft.Build.BuildEngine.LocalNodeProvider,System.Int32)">
            <summary>
            Appropriate action to take if this event is received on the parent process
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalCallDescriptor.NodeAction(Microsoft.Build.BuildEngine.Node,Microsoft.Build.BuildEngine.LocalNode)">
            <summary>
            Appropriate action to take if this event is received on the child process
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalCallDescriptor.ReplyFromHostAction">
            <summary>
            This method constructs a reply to the node if appropriate
            </summary>
            <returns>The call descriptor to be sent back to the node</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalCallDescriptorForPostBuildRequests.NodeAction(Microsoft.Build.BuildEngine.Node,Microsoft.Build.BuildEngine.LocalNode)">
            <summary>
            Appropriate action to take if this event is received on the child process
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalCallDescriptorForPostBuildResult.NodeAction(Microsoft.Build.BuildEngine.Node,Microsoft.Build.BuildEngine.LocalNode)">
            <summary>
            Appropriate action to take if this event is received on the child process
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalCallDescriptorForUpdateNodeSettings.NodeAction(Microsoft.Build.BuildEngine.Node,Microsoft.Build.BuildEngine.LocalNode)">
            <summary>
            UNDONE - need to verified after logging spec
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalCallDescriptorForInitializeNode">
            <summary>
            This class wraps a call to initialize a local node by passing it a new environment and an
            nodeid so that it can instantiate a node class.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalCallType">
            <summary>
            This enum describes the call types used in the local node provider
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.PostBuildRequests">
            <summary>
            This call type corresponds to an array of build requests
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.PostBuildResult">
            <summary>
            This call type corresponds to a single build result
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.PostLoggingMessagesToHost">
            <summary>
            This call type corresponds to an array of messages
            from which messages originated
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.UpdateNodeSettings">
            <summary>
            Call type to update the settings one the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.RequestStatus">
            <summary>
            Call type for request status from the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.PostStatus">
            <summary>
            Call type for request status from the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.InitializeNode">
            <summary>
            Call type for initializing the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.InitializationComplete">
            <summary>
            Call type for the node to indicate that it has initialized successfully
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.ShutdownNode">
            <summary>
            Call type for shutting down the node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.ShutdownComplete">
            <summary>
            Call type for the node to indicate that it has shutdown 
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.PostIntrospectorCommand">
            <summary>
            Call type to post an introspector command
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.GenericSingleObjectReply">
            <summary>
            This call type corresponds to a single string send from parent to child
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.PostCacheEntriesToHost">
            <summary>
            Call type for posting cache entries to a node
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalCallType.GetCacheEntriesFromHost">
            <summary>
            Call type for retrieving cache entries from a node
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalNode">
            <summary>
            This class hosts a node class in the child process. It uses shared memory to communicate
            with the local node provider.
            Wraps a Node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.#cctor">
            <summary>
            Hook up an unhandled exception handler, in case our error handling paths are leaky
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.UnhandledExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Dump any unhandled exceptions to a file so they can be diagnosed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.DumpExceptionToFile(System.Exception)">
            <summary>
            Dump the exception information to a file
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.StartCommunicationThreads">
            <summary>
            This method causes the reader and writer threads to start and create the shared memory structures
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.StopCommunicationThreads">
            <summary>
            This method causes the reader and writer threads to exit and dispose of the shared memory structures
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.CreateGlobalEvents(System.Int32)">
            <summary>
            Create global events necessary for handshaking with the parent
            </summary>
            <param name="nodeNumber"></param>
            <returns>True if events created successfully and false otherwise</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.StartLocalNodeServer(System.Int32)">
            <summary>
            This function starts local node when process is launched and shuts it down on time out
            Called by msbuild.exe.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.SharedMemoryReaderThread">
            <summary>
            This method is run in its own thread, it is responsible for reading messages sent from the parent process 
            through the shared memory region.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.ShutdownNode(Microsoft.Build.BuildEngine.Node.NodeShutdownLevel,System.Boolean,System.Boolean)">
            <summary>
            This method will shutdown the node being hosted by the child process and notify the parent process if requested,
            </summary>
            <param name="shutdownLevel">What kind of shutdown is causing the child node to shutdown</param>
            <param name="exitProcess">should the child process exit as part of the shutdown process</param>
            <param name="noParentNotification">Indicates if the parent process should be notified the child node is being shutdown</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.Activate(System.Collections.Hashtable,Microsoft.Build.BuildEngine.LoggerDescription[],System.Int32,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.ToolsetDefinitionLocations,System.Int32,System.String)">
            <summary>
            This methods activates the local node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.IsParentProcessAlive">
            <summary>
            This method checks is the parent process has not exited
            </summary>
            <returns>True if the parent process is still alive</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.ReportFatalCommunicationError(System.Exception)">
            <summary>
            Any error occuring in the shared memory transport is considered to be fatal
            </summary>
            <param name="originalException"></param>
            <exception cref="T:System.Exception">Re-throws exception passed in</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNode.ReportNonFatalCommunicationError(System.Exception)">
            <summary>
            This function is used to report exceptions which don't indicate breakdown
            of communication with the parent
            </summary>
            <param name="originalException"></param>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalNode.inUseEvent">
            <summary>
            Indicates the node is now in use. This means the node has recieved an activate command with initialization 
            data from the parent procss
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalNode.dumpFileName">
            <summary>
            Randomly generated file name for all exceptions thrown by this node that need to be dumped to a file.
            (There may be more than one exception, if they occur on different threads.)
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalNodeCallback">
            <summary>
            This class is an implementation of IEngineCallback which is used on the child nodes to receive calls from
            the child to the parent.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalNodeCallback.ReplyData">
            <summary>
            All the necessary data required for a reply to a call
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.#ctor(System.Threading.ManualResetEvent,Microsoft.Build.BuildEngine.LocalNode)">
            <summary>
            This class is an implementation of IEngineCallback which is used on the child nodes
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostMessageToParent(Microsoft.Build.BuildEngine.LocalCallDescriptor,System.Boolean)">
            <summary>
            This method is used to post calls to the parent engine by the Localnode class
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostReplyFromParent(Microsoft.Build.BuildEngine.LocalReplyCallDescriptor)">
            <summary>
            This method is used to post replies from the parent engine by the Localnode class
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.Reset">
            <summary>
            This method is reset the state of shared memory when the node is reused for a different
            build
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.SharedMemoryWriterThread">
            <summary>
            This method is used to write to shared memory
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostBuildRequestsToHost(Microsoft.Build.BuildEngine.BuildRequest[])">
            <summary>
            This method is called by the node to post build
            requests into a queue in the parent engine
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostBuildResultToHost(Microsoft.Build.BuildEngine.BuildResult)">
            <summary>
            This method is used by the child node to post results of a build request back to the
            parent node. The parent node then decides if need to re-route the results to another node
            that requested the evaluation or if it will consume the result locally
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostLoggingMessagesToHost(System.Int32,Microsoft.Build.BuildEngine.NodeLoggingEvent[])">
            <summary>
            Submit the logging message to the engine queue.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.GetReplyForCallDescriptor(Microsoft.Build.BuildEngine.LocalCallDescriptor)">
            <summary>
            Given a non-void call descriptor, calls it and retrieves the return value.
            </summary>
            <param name="callDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.GetCachedEntriesFromHost(System.Int32,System.String[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            This method retrieves the cache entries from the master cache
            </summary>
            <param name="nodeId"></param>
            <param name="names"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostCacheEntriesToHost(System.Int32,Microsoft.Build.BuildEngine.CacheEntry[],System.String,Microsoft.Build.BuildEngine.BuildPropertyGroup,System.String,Microsoft.Build.BuildEngine.CacheContentType)">
            <summary>
            Send the cache entries to the parent engine
            </summary>
            <param name="nodeId"></param>
            <param name="entries"></param>
            <param name="scopeName"></param>
            <param name="scopeProperties"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeCallback.PostStatus(System.Int32,Microsoft.Build.BuildEngine.NodeStatus,System.Boolean)">
            <summary>
            This method is called to post the status of the node. Because status is used
            to report errors and to respond to inactivity notices, we use a separate queue
            to deliver status event to the shared memory. Otherwise status maybe be delayed
            if it is stuck behind a large number of other events. We also wait for the status
            to be sent before returning.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalNodeInfo">
            <summary>
            This contains information and data for each node. This class organizes the data so that
            LocalNodeProvider can be simplified.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeInfo.CreateSharedMemoryBuffers">
            <summary>
            This method creates the shared memory buffers for communicating with the node
            </summary>
            <returns>Was the shared memory created and is useable</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeInfo.ReserveNextAvailableNodeNumber(System.Int32)">
            <summary>
            This function attempts to find out a node number for which
            the event named Node_x_ProviderMutex doesn't exist. The existance
            of the event indicates that some other node provider is using the node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.ApplyParameter(System.String,System.String)">
            <summary>
            Apply a parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.ShutdownNodes(Microsoft.Build.BuildEngine.Node.NodeShutdownLevel)">
            <summary>
            Shutdown the nodes which are being tracked and managed by this localNodeProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.ReadyToShutdown">
            <summary>
            Determine when the child node has either responsed with a shutdown complete event or the node has died
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.UpdateSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            TEMPORARY
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.SendShutdownRequests(Microsoft.Build.BuildEngine.Node.NodeShutdownLevel)">
            <summary>
            Send shutdown message to the launched child nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.TerminateChildNode(System.Int32)">
            <summary>
            Kill the child process directly if we can't communicate with it
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.IsNodeProcessAliveOrUninitialized(System.Int32)">
            <summary>
            Returns true if the process for the given node was started and has not exited
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.IncreaseActiveNodeCount">
            <summary>
             This function is used to increment the count of active nodes
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.RecordNodeResponse(System.Int32,Microsoft.Build.BuildEngine.Node.NodeShutdownLevel,System.Int32)">
            <summary>
            This function is used to decrement the count of active nodes
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.SetNodeProcessId(System.Int32,System.Int32)">
            <summary>
            This function is used by the node to set its own processId after it has been initialized
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.LaunchNodeAndPostBuildRequest">
            <summary>
            This function will start a node and send requests to it
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.InitializeNode(System.Int32)">
            <summary>
            This function establishes communication with a node given an index. If a node
            is not running it is launched.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.checkIfNodeActive(System.Int32)">
            <summary>
            This function attempts to find out if there is currently a node running
            for a given index. The node is running if the global mutex with a 
            "Node_" + nodeId + "_ActiveReady" as a name was created
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.LaunchNode(System.Int32)">
            <summary>
            This function launches a new node given a node index
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.ReportNodeCommunicationFailure(System.Int32,System.Exception,System.Boolean)">
            <summary>
            Report communication failure and update internal state
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.SharedMemoryWriterThread">
            <summary>
            This thread writes out the messages to the shared memory, where the LocalNode class
            reads it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProvider.SharedMemoryReaderThread">
            <summary>
            This thread is responsible for reading messages from the nodes. The messages are posted
            to the shared memory by the LocalNodeCallback
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalNodeProvider.NodeState.NotLaunched">
            <summary>
            This node has not been launched
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalNodeProvider.NodeState.LaunchInProgress">
            <summary>
            This node is in progress of being launched
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalNodeProvider.NodeState.Launched">
            <summary>
            This node is launched
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LocalNodeProvider.NodeState.Shutdown">
            <summary>
            This node has been shutdown
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames">
            <summary>
            This class is shared between LocalNode and LocalNodeProvider and contains all the global name generation logic
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeActiveEventName(System.Int32)">
            <summary>
            If this event is set the node host process is currently running
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeInUseEventName(System.Int32)">
            <summary>
            If this event is set the node is currently running a build
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeErrorShutdownEventName(System.Int32)">
            <summary>
            If this event is set the node will immediatelly exit. The event is used by the
            parent engine to cause the node to exit if communication is lost.
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeReserveEventName(System.Int32)">
            <summary>
            If this event exists the node is reserved for use by a particular parent engine
            the node keeps a handle to this event during builds to prevent it from being used
            by another parent engine if the original dies
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeInitiateActivationEventName(System.Int32)">
            <summary>
            This event is used to signal to the node to create its shared memory buffers. It is used
            to prevent squating attacks by ensuring the both end points (child and parent) have
            same privilege levels
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeActivedEventName(System.Int32)">
            <summary>
            
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeInputMemoryName(System.Int32)">
            <summary>
            The name of the shared memory from the parent to the node
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.NodeOutputMemoryName(System.Int32)">
            <summary>
            The name of the shared memory from the node to the parent
            </summary>
            <param name="nodeNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames.InitializeGlobalNamePostFixValues">
            <summary>
            Use reflection to figure out the version of Microsoft.Build.Engine.dll
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.NativeMethods.IsUserAdministrator">
            <summary>
             Checks to see if the process is running as administrator or not
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ObjectType">
            <summary>
            The shared memory is used to transmit serialized LocalCallDescriptors. 
            These local call descriptors encapsulate commands and data that needs
            to be communicated between the parent and child objects. This enumeration
            is used by the shared memory to mark what kind of LocalCallDescriptor
            object is in the shared memory so it can be correctly deserialized.
            This marker is placed at the front of object in the shared memory.
            Enumeration of LocalCallDescriptor Types
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.SharedMemory">
            <summary>
            This class is responsible for providing a communication channel between 
            a child process and a parent process. Each process (child or parent) will
            have two SharedMemory class instances, one for reading and one for writing.
            For example, a parent will have one shared memory class to "read" data 
            sent from the child and one "write" shared The shared memory communicates
            through named shared memory regions.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.#ctor(System.String,Microsoft.Build.BuildEngine.SharedMemoryType,System.Boolean)">
             <summary>
             Constructor
             </summary>
             <param name="name">
             The name the shared memory will be given, this is combination of node,
             username, admin status, and some other ones, 
             see LocalNodeProviderGlobalNames.NodeInputMemoryName for greater detail.
             </param>
             <param name="type">
              This type determines which lock and stream needs to be instantiated
              within the shared memory class. For example,
              read only means, only create a memory stream,
              a read lock and a backing byte array and a binary reader. A write
              only type means,  create a memory stream, write lock and a binary writer. 
              This type however does not set the type of the memory mapped section,
              the memory mapped section itself is created
              with READWRITE access.
            </param>
             <param name="allowExistingMapping">
              The shared memory is given a parameter to determine whether or not to 
              reuse an existing mapped memory secion. When the node is first created 
              this is false, however when the shared memory threads are created this
              is true. We do this because we create the shared memory when the node 
              is created, at this point the there should be no shared memory with the
              same name. However when we create the reader and writer threads 
              (which happens on node reuse) we want to reuse the memory. 
            </param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.InitializeMemoryMapping(System.String,System.Boolean)">
            <summary>
            Creates the shared memory region and map a view to it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.InitializeStreams(Microsoft.Build.BuildEngine.SharedMemoryType)">
            <summary>
            Initialize the MemoryStreams which will be used to contain the serialized data from the LocalCallDescriptors.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.InitializeSynchronization">
            <summary>
            Initialize the synchronization variables which will be used to communicate the status of the shared memory between processes.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.SharedMemory.IsUsable">
            <summary>
             Indicates the shared memory region been created and initialized properly.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.SharedMemory.ReadFlag">
            <summary>
            Returns the readActionCounter as a WaitHandle. This WaitHandle is used
            to notify the SharedMemory reader threads that there is something ready
            in the shared memory to be read. The ReadFlag will remain set as long as
            the number of times the shared memory has been read is less than the 
            number of times writer thread has written to the shared memory.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.SharedMemory.IsFull">
            <summary>
            Indicates when the SharedMemory is full
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.SharedMemory.NumberOfUnreadBatches">
            <summary>
            The NumberOfUnreadBatches is the number of "batches" written to shared
            memory which have not been read yet by the ReaderThread. A batch
            contains one or more serialized objects.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.MarkAsFull">
            <summary>
            The shared memory is now full, set the correct synchronization variables to
            inform the reader thread of this situation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.MarkAsNotFull">
            <summary>
            The shared memory is no longer full. Set the correct synchronization variables
            to inform the writer thread of this situation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.IncrementUnreadBatchCounter">
            <summary>
            A batch is now in the shared memory and is ready to be read by the reader thread.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.DecrementUnreadBatchCounter">
            <summary>
            A batch has just been read out of shared memory. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.Write(Microsoft.Build.BuildEngine.DualQueue{Microsoft.Build.BuildEngine.LocalCallDescriptor},Microsoft.Build.BuildEngine.DualQueue{Microsoft.Build.BuildEngine.LocalCallDescriptor},System.Boolean)">
            <summary>
            This function write out a set of objects into the the shared buffer.
            In normal operation all the objects in the queue are serialized into
            the buffer followed by an end marker class. If the buffer is not big
            enough to contain a single object the object is broken into into 
            multiple buffers as follows - first a frame marker is sent containing
            the size of the serialized object + size of end marker. The reader makes
            sure upon receiving the frame marker that its buffer is large enough 
            to contain the object about to be sent. After the frame marker the object
            is sent as a series of buffers until all of it is written out.
            </summary>
            <param name="objectsToWrite"> Queue of objects to be sent (mostly logging messages)</param>
            <param name="objectsToWriteHiPriority">Queue of high priority objects (these are commands and statuses) </param>
            <param name="blockUntilDone"> If true the function will block until both queues are empty</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.SerializeCallDescriptorToStream(Microsoft.Build.BuildEngine.DualQueue{Microsoft.Build.BuildEngine.LocalCallDescriptor})">
            <summary>
            Serialize the first object in the queue to the a memory stream which will be copied into shared memory.
            The write stream which is being written to is not the shared memory itself, it is a memory stream from which
            bytes will be copied and placed in the shared memory in the write method.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.Read">
            <summary>
            This function reads data from the shared memory buffer and returns a list
            of deserialized LocalCallDescriptors or null. The method will return null
            if the object being sent accross is a multi buffer object. Read needs to 
            be called multiple times until the entire large object has been recived.
            Once this has happened the large object is deserialized and returned in 
            the Ilist. Read is used by the shared memory reader threads in the LocalNode
            (child end) and the LocalNodeProvider(ParentEnd) to read LocalCallDescriptors
            from the shared memory. Read is called from loops in the SharedMemoryReaderThread
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.DeserializeFromStream(System.Int32@)">
            <summary>
            This method first reads the objectId as an int from the stream, 
            this int should be found in the "ObjectType" enumeration. This 
            objectId informs the method what kind of object should be 
            deserialized and returned from the method. The objectId is an
            output parameter. This parameter is also returned so it can be 
            used in the read and write methods to determine if 
            a frame or end marker was found.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SharedMemory.Reset">
            <summary>
            Reset the state of the shared memory, this is called when the node is
            initialized for the first time or when the node is activated due to node reuse.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SharedMemory.writeStream">
            <summary>
            Memory stream to contain the deserialized objects before they are sent accross the shared memory region
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            <value>Verbosity level.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.Parameters">
            <summary>
            The console logger takes a single parameter to suppress the output of the errors
            and warnings summary at the end of a build.
            </summary>
            <value>null</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.SkipProjectStartedText">
            <summary>
            Suppresses the display of project headers. Project headers are
            displayed by default unless this property is set.
            </summary>
            <remarks>This is only needed by the IDE logger.</remarks>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.ShowSummary">
            <summary>
            Suppresses the display of error and warnings summary.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteHandler">
            <summary>
            Provide access to the write hander delegate so that it can be redirected
            if necessary (e.g. to a file)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.ParseParameters">
            <summary>
            Parses out the logger parameters from the Parameters string.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BaseConsoleLogger.DictionaryEntryKeyComparer">
            <summary>
            An implementation of IComparer useful for comparing the keys 
            on DictionaryEntry's
            </summary>
            <remarks>Uses CurrentCulture for display purposes</remarks>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BaseConsoleLogger.ITaskItemItemSpecComparer">
            <summary>
            An implementation of IComparer useful for comparing the ItemSpecs 
            on ITaskItem's
            </summary>
            <remarks>Uses CurrentCulture for display purposes</remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.IndentString(System.String,System.Int32)">
            <summary>
            Indents the given string by the specified number of spaces.
            </summary>
            <param name="s">String to indent.</param>
            <param name="indent">Depth to indent.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.SplitStringOnNewLines(System.String)">
            <summary>
            Splits strings on 'newLines' with tollerance for Everett and Dogfood builds.
            </summary>
            <param name="s">String to split.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteNewLine">
            <summary>
            Writes a newline to the log.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteLinePrettyFromResource(System.String,System.Object[])">
            <summary>
            Writes a line from a resource string to the log, using the default indentation.
            </summary>
            <param name="resourceString"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteLinePrettyFromResource(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a line from a resource string to the log, using the specified indentation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WritePretty(System.String)">
            <summary>
            Writes to the log, using the default indentation. Does not 
            terminate with a newline.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.ShowPerfSummary">
            <summary>
            If requested, display a performance summary at the end of the build.  This
            shows how much time (and # hits) were spent inside of each project, target,
            and task.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WritePretty(System.Int32,System.String)">
            <summary>
            Writes to the log, using the specified indentation. Does not 
            terminate with a newline.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteLinePretty(System.String)">
            <summary>
            Writes a line to the log, using the default indentation.
            </summary>
            <param name="formattedString"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteLinePretty(System.Int32,System.String)">
            <summary>
            Writes a line to the log, using the specified indentation.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.IsRunningWithCharacterFileType">
            <summary>
            Check to see what kind of device we are outputting the log to, is it a character device, a file, or something else
            this can be used by loggers to modify their outputs based on the device they are writing to
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.IsVerbosityAtLeast(Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Determines whether the current verbosity setting is at least the value
            passed in.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.SetColor(System.ConsoleColor)">
            <summary>
            Sets foreground color to color specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.TransformColor(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Changes the foreground color to black if the foreground is the
            same as the background. Changes the foreground to white if the
            background is black.
            </summary>
            <param name="foreground">foreground color for black</param>
            <param name="background">current background</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.DontSetColor(System.ConsoleColor)">
            <summary>
            Does nothing, meets the ColorSetter delegate type
            </summary>
            <param name="c">foreground color (is ignored)</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.DontResetColor">
            <summary>
            Does nothing, meets the ColorResetter delegate type
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteProperties(System.Collections.ArrayList)">
            <summary>
            Writes out the list of property names and their values.
            This could be done at any time during the build to show the latest
            property values, using the cached reference to the list from the 
            appropriate ProjectStarted event.
            </summary>
            <param name="properties">List of properties</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.ExtractPropertyList(System.Collections.IEnumerable)">
            <summary>
            Generate an arraylist which contains the properties referenced
            by the properties enumerable object
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.WriteItems(System.Collections.SortedList)">
            <summary>
            Writes out the list of item specs and their metadata.
            This could be done at any time during the build to show the latest
            items, using the cached reference to the list from the 
            appropriate ProjectStarted event.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.ExtractItemList(System.Collections.IEnumerable)">
            <summary>
            Extract the Items from the enumerable object and return a sorted list containing these items
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.GetPerformanceCounter(System.String,System.Collections.Hashtable@)">
            <summary>
            Returns a performance counter for a given scope (either task name or target name)
            from the given table.
            </summary>
            <param name="scopeName">Task name or target name.</param>
            <param name="table">Table that has tasks or targets.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.DisplayCounters(System.Collections.Hashtable)">
            <summary>
            Display the timings for each counter in the hashtable
            </summary>
            <param name="counters"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter">
            <summary>
            Records performance information consumed by a task or target.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.#ctor(System.String)">
            <summary>
            Construct.
            </summary>
            <param name="scopeName"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.ScopeName">
            <summary>
            Name of the scope.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.Calls">
            <summary>
            Total number of calls so far.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.ElapsedTime">
            <summary>
            Total accumalated time so far.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.ReenteredScope">
            <summary>
            Whether or not this scope was reentered. Timing information is not recorded in these cases.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.InScope">
            <summary>
            Whether or not this task or target is executing right now.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.DescendingByElapsedTimeComparer">
            <summary>
            Returns an IComparer that will put erformance counters 
            in descending order by elapsed time.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.DescendingByElapsedTime">
            <summary>
            Private IComparer class for sorting performance counters 
            in descending order by elapsed time.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.PerformanceCounter.DescendingByElapsedTime.Compare(System.Object,System.Object)">
            <summary>
            Compare two PerformanceCounters.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Signs up the console logger for all build events.
            </summary>
            <param name="eventSource">Available events.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BaseConsoleLogger.ApplyParameter(System.String,System.String)">
            <summary>
            Apply a logger parameter.
            parameterValue may be null, if there is no parameter value.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.verbosity">
            <summary>
            Controls the amount of text displayed by the logger
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.buildStarted">
            <summary>
            Time the build started
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.write">
            <summary>
            Delegate used to write text
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.setColor">
            <summary>
            Delegate used to change text color.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.resetColor">
            <summary>
            Delegate used to reset text color
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.skipProjectStartedText">
            <summary>
            Indicates if project header should not be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.tabWidth">
            <summary>
            Number of spaces that each level of indentation is worth
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.currentIndentLevel">
            <summary>
            Keeps track of the current indentation level.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.newLines">
            <summary>
            The kinds of newline breaks we expect.
            </summary>
            <remarks>Currently we're not supporting "\r".</remarks>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.projectSeparatorLine">
            <summary>
            Visual separator for projects. Line length was picked arbitrarily.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.loggerParameters">
            <summary>
            Console logger parameters.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.parameterDelimiters">
            <summary>
            Console logger parameters delimiters.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.parameterValueSplitCharacter">
            <summary>
            Console logger parameter value split character.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.showSummary">
            <summary>
            Console logger should show error and warning summary at the end of build?
            If null, user has made no indication.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.showPerfSummary">
            <summary>
            When true, accumulate performance numbers.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.showItemAndPropertyList">
            <summary>
            When true, show the list of item and property values at the start of each project
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.showOnlyWarnings">
            <summary>
            When true, suppresses all messages except for warnings. (And possibly errors, if showOnlyErrors is true.)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.showOnlyErrors">
            <summary>
            When true, suppresses all messages except for errors. (And possibly warnings, if showOnlyWarnings is true.)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.errorCount">
            <summary>
            Number of errors enountered in this build
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.warningCount">
            <summary>
            Number of warnings enountered in this build
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.errorList">
            <summary>
            A list of the errors that have occured during this build.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.warningList">
            <summary>
            A list of the warnings that have occured during this build.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.projectPerformanceCounters">
            <summary>
            Accumulated project performance information.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.targetPerformanceCounters">
            <summary>
            Accumulated target performance information.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.BaseConsoleLogger.taskPerformanceCounters">
            <summary>
            Accumulated task performance information.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.WriteHandler">
            <summary>
            Delegate to use for writing a string to some location like
            the console window or the IDE build window.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ColorSetter">
            <summary>
            Type of delegate used to set console color.
            </summary>
            <param name="color">Text color</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ColorResetter">
            <summary>
            Type of delegate used to reset console color.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ConsoleLogger">
            <summary>
            This class implements the default logger that outputs event data
            to the console (stdout). 
            It is a facade: it creates, wraps and delegates to a kind of BaseConsoleLogger, 
            either SerialConsoleLogger or ParallelConsoleLogger.
            </summary>
            <remarks>This class is not thread safe.</remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Create a logger instance with a specific verbosity.  This logs to
            the default console.
            </summary>
            <param name="verbosity">Verbosity level.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity,Microsoft.Build.BuildEngine.WriteHandler,Microsoft.Build.BuildEngine.ColorSetter,Microsoft.Build.BuildEngine.ColorResetter)">
            <summary>
            Initializes the logger, with alternate output handlers.
            </summary>
            <param name="verbosity"></param>
            <param name="write"></param>
            <param name="colorSet"></param>
            <param name="colorReset"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.InitializeBaseConsoleLogger">
            <summary>
            This is called by every event handler for compat reasons -- see DDB #136924
            However it will skip after the first call
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConsoleLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            <value>Verbosity level.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConsoleLogger.Parameters">
            <summary>
            The console logger takes a single parameter to suppress the output of the errors
            and warnings summary at the end of a build.
            </summary>
            <value>null</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConsoleLogger.SkipProjectStartedText">
            <summary>
            Suppresses the display of project headers. Project headers are
            displayed by default unless this property is set.
            </summary>
            <remarks>This is only needed by the IDE logger.</remarks>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConsoleLogger.ShowSummary">
            <summary>
            Suppresses the display of error and warnings summary.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConsoleLogger.WriteHandler">
            <summary>
            Provide access to the write hander delegate so that it can be redirected
            if necessary (e.g. to a file)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.ApplyParameter(System.String,System.String)">
            <summary>
            Apply a parameter.
            NOTE: This method was public by accident in Whidbey, so it cannot be made internal now. It has 
            no good reason for being public.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Signs up the console logger for all build events.
            </summary>
            <param name="eventSource">Available events.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.Shutdown">
            <summary>
            The console logger does not need to release any resources.
            This method does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            Handler for build started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            Handler for build finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            Handler for project started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            Handler for project finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            Handler for target started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            Handler for target finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            Handler for task started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            Handler for task finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Prints an error event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Prints a warning event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Prints a message event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.CustomEventHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Prints a custom event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.SetColor(System.ConsoleColor)">
            <summary>
            Sets foreground color to color specified
            </summary>
            <param name="c">foreground color</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConsoleLogger.TransformColor(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Changes the foreground color to black if the foreground is the
            same as the background. Changes the foreground to white if the
            background is black.
            </summary>
            <param name="foreground">foreground color for black</param>
            <param name="background">current background</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.NullCentralLogger">
            <summary>
            This class will throw an exception when it recieves any event except for the build started or build finished event
            this logger is good to use if a distributed logger is attached but does not want to forward any events
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.DistributedFileLogger">
            <summary>
            This class will create a text file which will contain the build log for that node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DistributedFileLogger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DistributedFileLogger.ParseFileLoggerParameters">
            <summary>
            Parses out the logger parameters from the Parameters string.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.DistributedFileLogger.ApplyFileLoggerParameter(System.String,System.String)">
            <summary>
            Apply a parameter
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger">
            <summary>
            Logger that forwards events to a central logger (e.g ConsoleLogger)
            residing on the parent node.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            <value>Verbosity level.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Parameters">
            <summary>
            The console logger takes a single parameter to suppress the output of the errors
            and warnings summary at the end of a build.
            </summary>
            <value>null</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.BuildEventRedirector">
            <summary>
            This property is set by the build engine to allow a node loggers to forward messages to the
            central logger
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.InitializeForwardingTable">
            <summary>
            Initialize the Forwarding Table with the default values
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ParseParameters">
            <summary>
            Parses out the logger parameters from the Parameters string.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ApplyParameter(System.String)">
            <summary>
            Logger parameters can be used to enable and disable specific event types.
            Otherwise, the verbosity is used to choose which events to forward.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Signs up the console logger for all build events.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            Signs up the console logger for all build events.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ResetLoggerState">
            <summary>
            Reset the states of per-build member variables.
            Used when a build is finished, but the logger might be needed for the next build.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Shutdown">
            <summary>
            Called when Engine is done with this logger
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            Handler for build started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            Handler for build finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            Handler for project started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            Handler for project finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            Handler for target started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            Handler for target finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            Handler for task started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            Handler for task finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Prints an error event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Prints a warning event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Prints a message event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.CustomEventHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Prints a custom event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.IsVerbosityAtLeast(Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Determines whether the current verbosity setting is at least the value
            passed in.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.verbosity">
            <summary>
            Controls the amount of text displayed by the logger
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.loggerParameters">
            <summary>
            Console logger parameters.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.parameterDelimiters">
            <summary>
            Console logger parameters delimiters.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.BuildStartedEventDescription">
            <summary>
            Strings that users of this logger can pass in to enable specific events or logger output.
            Also used as keys into our dictionary.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.forwardingTable" -->
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.buildEventRedirector">
            <summary>
            A pointer to the central logger
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.forwardingSetFromParameters">
            <summary>
            Indicates if the events to forward are being set by the parameters sent to the logger
            if this is false the events to forward are based on verbosity else verbosity settings will be ignored
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.showSummary">
            <summary>
            Console logger should show error and warning summary at the end of build?
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.showPerfSummary">
            <summary>
            When true, accumulate performance numbers.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.showCommandLine">
            <summary>
            When true the commandline message is sent
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.nodeId">
            <summary>
            Id of the node the logger is attached to
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LoggerDescription">
            <summary>
            This class is used to contain information about a logger as a collection of values that
            can be used to instantiate the logger and can be serialized to be passed between different
            processes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.#ctor(System.String,System.String,System.String,System.String,Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Creates a logger description from given data
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LoggerDescription.LoggerId">
            <summary>
            This property exposes the logger id which identifies each distributed logger uniquiely
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LoggerDescription.Name">
            <summary>
            This property generates the logger name by appending together the class name and assembly name
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LoggerDescription.LoggerSwitchParameters">
            <summary>
            Returns the string of logger parameters, null if there are none
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.LoggerDescription.Verbosity">
            <summary>
            Return the verbosity for this logger (from command line all loggers get same verbosity)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.CreateForwardingLogger">
            <summary>
            Create an IForwardingLogger out of the data in this description. This method may throw a variety of
            reflection exceptions if the data is invalid. It is the resposibility of the caller to handle these
            exceptions if desired.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.CreateLogger">
            <summary>
            Create an ILogger out of the data in this description. This method may throw a variety of
            reflection exceptions if the data is invalid. It is the resposibility of the caller to handle these
            exceptions if desired.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.CreateLogger(System.Boolean)">
            <summary>
            Loads a logger from its assembly, instantiates it, and handles errors.
            </summary>
            <returns>Instantiated logger.</returns>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LoggerDescription.forwardingLoggerClassFilter">
            <summary>
            Used for finding loggers when reflecting through assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.LoggerDescription.loggerClassFilter">
            <summary>
            Used for finding loggers when reflecting through assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.IsForwardingLoggerClass(System.Type,System.Object)">
            <summary>
            Checks if the given type is a logger class.
            </summary>
            <remarks>This method is used as a TypeFilter delegate.</remarks>
            <returns>true, if specified type is a logger</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.IsLoggerClass(System.Type,System.Object)">
            <summary>
            Checks if the given type is a logger class.
            </summary>
            <remarks>This method is used as a TypeFilter delegate.</remarks>
            <returns>true, if specified type is a logger</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LoggerDescription.ConvertPathsToFullPaths">
            <summary>
            Converts the path to the logger assembly to a full path
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildEventManager">
            <summary>
            Stores and manages projects and targets events for logging purposes
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.AddProjectStartedEvent(Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
             Adds a new project to the list of project started events which have been fired
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.AddTargetStartedEvent(Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
             Adds a new target to the list of project started events which have been fired
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.GetProjectCallStack(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Get a call stack of event contexts for a starting point event context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.SetErrorWarningFlagOnCallStack(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Set an error flag on all projects in the call stack of a given event context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.ProjectCallStackFromProject(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Retrieve the project call stack based on the starting point of buildEventContext e
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.GetProjectStartedEvent(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Get a deferred project started event based on a given event context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.GetTargetStartedEvent(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
             Get a deferred target started event based on a given event context
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.RemoveProjectStartedEvent(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Will remove a project started event from the list of deferred project started events
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildEventManager.RemoveTargetStartedEvent(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Will remove a project started event from the list of deferred project started events
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ComparerContextNodeId`1">
            <summary>
            Compares two event contexts on ProjectContextId and NodeId only
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ComparerContextNodeIdTargetId`1">
            <summary>
            Compares two event contexts based on the ProjectContextId, NodeId, and TargetId only
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectStartedEventMinimumFields">
            <summary>
            This class stands in for a full project started event because it contains only the 
            minimum amount of inforomation needed for the logger
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.TargetStartedEventMinimumFields">
            <summary>
            This class stands in for a full target started event because it contains only the 
            minimum amount of inforomation needed for the logger
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ErrorWarningSummaryDictionaryKey">
            <summary>
            This class is used as a key to group warnings and errors by the project entry point and the target they 
            error or warning was in
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectFullKey">
            <summary>
            Structure that holds both project and entrypoint keys
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectFullKey.ToString(Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Output the projectKey or the projectKey and the entrypointKey depending on the verbosity level of the logger
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectFullKey.ToString">
            <summary>
            The default of he ToString method should  be to output the projectKey or the projectKey and the entrypointKey depending if a
            entry point key exists or not
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ParallelConsoleLogger">
            <summary>
            This class implements the default logger that outputs event data
            to the console (stdout).
            </summary>
            <remarks>This class is not thread safe.</remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Create a logger instance with a specific verbosity.  This logs to
            the default console.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity,Microsoft.Build.BuildEngine.WriteHandler,Microsoft.Build.BuildEngine.ColorSetter,Microsoft.Build.BuildEngine.ColorResetter)">
            <summary>
            Initializes the logger, with alternate output handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.CheckIfOutputSupportsAlignment">
            <summary>
            Check to see if the console is going to a char output such as a console,printer or com port, or if it going to a file
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ApplyParameter(System.String,System.String)">
            <summary>
            Allows the logger to take action based on a parameter passed on when initializing the logger
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ShownBuildEventContext(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Keep track of the last event displayed so target names can be displayed at the correct time
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ResetConsoleLoggerState">
            <summary>
            Reset the states of per-build member variables
            VSW#516376 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            Handler for build started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            Handler for build finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ShowFlatErrorWarningSummary">
            <summary>
            At the end of the build, repeats the errors and warnings that occurred 
            during the build, and displays the error count and warning count.
            Does this in a "flat" style, without context.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ShowNestedErrorWarningSummary">
            <summary>
            At the end of the build, repeats the errors and warnings that occurred 
            during the build, and displays the error count and warning count.
            Does this in a "nested" style.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            Handler for project started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            Handler for project finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WriteProperties(Microsoft.Build.Framework.BuildEventArgs,System.Collections.IEnumerable)">
            <summary>
            Writes out the list of property names and their values.
            This could be done at any time during the build to show the latest
            property values, using the cached reference to the list from the 
            appropriate ProjectStarted event.
            </summary>
            <param name="properties">List of properties</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WriteItems(Microsoft.Build.Framework.BuildEventArgs,System.Collections.IEnumerable)">
            <summary>
            Writes out the list of item specs and their metadata.
            This could be done at any time during the build to show the latest
            items, using the cached reference to the list from the 
            appropriate ProjectStarted event.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            Handler for target started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            Handler for target finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            Handler for task started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            Handler for task finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Prints an error event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Prints a warning event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Prints a message event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.PrintMessage(Microsoft.Build.Framework.BuildMessageEventArgs,System.Boolean)">
            <summary>
            Prints out a message event to the console
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WriteMessageAligned(System.String,System.Boolean)">
            <summary>
            Writes a message to the console, aligned and formatted to fit within the console width
            </summary>
            <param name="message">Message to be formatted to fit on the console</param>
            <param name="prefixAlreadyWritten">Has the prefix(timestamp or key been written)</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WriteMessageAligned(System.String,System.Boolean,System.Int32)">
            <summary>
            Writes a message to the console, aligned and formatted to fit within the console width
            </summary>
            <param name="message">Message to be formatted to fit on the console</param>
            <param name="prefixAlreadyWritten">Has the prefix(timestamp or key been written)</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WriteBasedOnPrefix(System.String,System.Boolean,System.Int32)">
            <summary>
            Write message takinginto account whether or not the prefix (timestamp and key) have already been written on the line
            </summary>
            <param name="nonNullMessage"></param>
            <param name="prefixAlreadyWritten"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.DisplayDeferredTargetStartedEvent(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Will display the target started event which was deferred until the first visible message for the target is ready to be displayed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.DisplayDeferredProjectStartedEvent(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Will display the project started event which was deferred until the first visible message for the project is ready to be displayed
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.CustomEventHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Prints a custom event
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.WriteLinePrefix(Microsoft.Build.Framework.BuildEventContext,System.DateTime,System.Boolean)">
            <summary>
            Writes message contextual information for each message displayed on the console
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.GetFullProjectKey(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Extract the full project key from the BuildEventContext
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.GetPerformanceCounter(System.String,System.Collections.Hashtable@)">
            <summary>
            Returns a performance counter for a given scope (either task name or target name)
            from the given table.
            </summary>
            <param name="scopeName">Task name or target name.</param>
            <param name="table">Table that has tasks or targets.</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ParallelConsoleLogger.MPPerformanceCounter">
            <summary>
            Stores and calculates the performance numbers for the different events
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.MPPerformanceCounter.AddEventStarted(System.String,Microsoft.Build.Framework.BuildEventContext,System.DateTime,System.Collections.Generic.IEqualityComparer{Microsoft.Build.Framework.BuildEventContext})">
            <summary>
            Add a started event to the performance counter, by adding the event this sets the start time of the performance counter
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.MPPerformanceCounter.AddEventFinished(System.String,Microsoft.Build.Framework.BuildEventContext,System.DateTime)">
            <summary>
             Add a finished event to the performance counter, so perf numbers can be calculated
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ParallelConsoleLogger.MPPerformanceCounter.PrintCounterMessage(Microsoft.Build.BuildEngine.WriteLinePrettyFromResourceDelegate,Microsoft.Build.BuildEngine.ColorSetter,Microsoft.Build.BuildEngine.ColorResetter)">
            <summary>
            Print out the performance counter message
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.FileLogger">
            <summary>
            A specialization of the ConsoleLogger that logs to a file instead of the console.
            The output in terms of what is written and how it looks is identical. For example you can 
            log verbosely to a file using the FileLogger while simultaneously logging only high priority events
            to the console using a ConsoleLogger.
            </summary>
            <remarks>
            It's unfortunate that this is derived from ConsoleLogger, which is itself a facade; it makes things more
            complex -- for example, there is parameter parsing in this class, plus in BaseConsoleLogger. However we have
            to derive FileLogger from ConsoleLogger because it shipped that way in Whidbey.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.#ctor">
            <summary>
            Default constructor.
            </summary>
            <owner>KieranMo</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Signs up the console file logger for all build events.
            This is the backward-compatible overload.
            </summary>
            <param name="eventSource">Available events.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.InitializeFileLogger(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            Creates new file for logging
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            Multiproc aware initialization
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.Write(System.String)">
            <summary>
            The handler for the write delegate of the console logger we are deriving from.
            </summary>
            <owner>KieranMo</owner>
            <param name="text">The text to write to the log</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.Shutdown">
            <summary>
            Shutdown method implementation of ILogger - we need to flush and close our logfile.
            </summary>
            <owner>KieranMo</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.ParseFileLoggerParameters">
            <summary>
            Parses out the logger parameters from the Parameters string.
            </summary>
            <owner>KieranMo</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FileLogger.ApplyFileLoggerParameter(System.String,System.String)">
            <summary>
            Apply a parameter parsed by the file logger.
            </summary>
            <owner>KieranMo</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FileLogger.logFileName">
            <summary>
            logFileName is the name of the log file that we will generate
            the default value is msbuild.log
            </summary>
            <owner>KieranMo</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FileLogger.fileWriter">
            <summary>
            fileWriter is the stream that has been opened on our log file.
            </summary>
            <owner>KieranMo</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FileLogger.append">
            <summary>
            Whether the logger should append to any existing file.
            Default is to overwrite.
            </summary>
            <owner>danmose</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FileLogger.encoding">
            <summary>
            Encoding for the output. Defaults to ANSI.
            </summary>
            <owner>danmose</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FileLogger.fileLoggerParameterDelimiters">
            <summary>
            File logger parameters delimiters.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FileLogger.fileLoggerParameterValueSplitCharacter">
            <summary>
            File logger parameter value split character.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.LogFormatter">
            <summary>
            Utility helper functions for formatting logger output.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LogFormatter.FormatLogTimeStamp(System.DateTime)">
            <summary>
            Formats the timestamp in the log as  Hours:Minutes:Seconds.Milliseconds
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.LogFormatter.FormatTimeSpan(System.TimeSpan)">
            <summary>
            Formats a timespan for logger output.
            </summary>
            <owner>JomoF</owner>
            <param name="t"></param>
            <returns>String representation of time-span.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.#ctor">
            <summary>
            Default constructor.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity)">
            <summary>
            Create a logger instance with a specific verbosity.  This logs to
            the default console.
            </summary>
            <owner>SumedhK</owner>
            <param name="verbosity">Verbosity level.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.#ctor(Microsoft.Build.Framework.LoggerVerbosity,Microsoft.Build.BuildEngine.WriteHandler,Microsoft.Build.BuildEngine.ColorSetter,Microsoft.Build.BuildEngine.ColorResetter)">
            <summary>
            Initializes the logger, with alternate output handlers.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
            <param name="verbosity"></param>
            <param name="write"></param>
            <param name="colorSet"></param>
            <param name="colorReset"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.ResetConsoleLoggerState">
            <summary>
            Reset the states of per-build member variables
            VSW#516376 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)">
            <summary>
            Handler for build started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)">
            <summary>
            Handler for build finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.ShowErrorWarningSummary">
            <summary>
            At the end of the build, repeats the errors and warnings that occurred 
            during the build, and displays the error count and warning count.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            Handler for project started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)">
            <summary>
            Handler for project finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)">
            <summary>
            Handler for target started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)">
            <summary>
            Handler for target finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)">
            <summary>
            Handler for task started events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)">
            <summary>
            Handler for task finished events
            </summary>
            <param name="sender">sender (should be null)</param>
            <param name="e">event arguments</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Prints an error event
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Prints a warning event
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Prints a message event
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.CustomEventHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Prints a custom event
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.WriteProjectStarted">
            <summary>
            Writes project started messages.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.WriteProjectStartedText(System.String,System.String,System.String,System.Int32)">
            <summary>
            Displays the text for a project started message.
            </summary>
            <param name ="current">current project file</param>
            <param name ="previous">previous project file</param>
            <param name="targetNames">targets that are being invoked</param>
            <param name="indentLevel">indentation level</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.WriteTargetStarted">
            <summary>
            Writes target started messages.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.GetCurrentlyBuildingProjectFile">
            <summary>
            Determines the currently building project file.
            </summary>
            <returns>name of project file currently being built</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.ShowDeferredMessages">
            <summary>
            Displays project started and target started messages that
            are shown only when the associated project or target produces
            output.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.SetErrorsOrWarningsOnCurrentFrame">
            <summary>
            Marks the current frame to indicate that an error or warning
            occurred during it.
            </summary>
            <owner>danmose</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.VerifyStack(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks the condition passed in.  If it's false, it emits an error message to the console
            indicating that there's a problem with the console logger.  These "problems" should
            never occur in the real world after we ship, unless there's a bug in the MSBuild
            engine such that events aren't getting paired up properly.  So the messages don't
            really need to be localized here, since they're only for our own benefit, and have
            zero value to a customer.
            </summary>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
            <param name="args"></param>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameType">
            <summary>
            This enumeration represents the kinds of context that can be
            stored in the context stack.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame">
            <summary>
            This struct represents context information about a single
            target or project.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.#ctor(Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameType,System.Boolean,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of frame with all fields specified.
            </summary>
            <param name="t">the type of the this frame</param>
            <param name="d">display state. true indicates this frame has been displayed to the user</param>
            <param name="indent">indentation level for this frame</param>
            <param name="s">frame id</param>
            <param name="targets">targets to execute, in the case of a project frame</param>
            <param name="fileOfTarget">the file name where the target is defined</param>
            <param name="parent">parent project file</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.type">
            <summary>
            Indicates if project or target frame.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.displayed">
            <summary>
            Set to true to indicate the user has seen a message about this frame.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.indentLevel">
            <summary>
            The number of tabstops to indent this event when it is eventually displayed.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.ID">
            <summary>
            A string associated with this frame -- should be a target name
            or a project file.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.parentProjectFile">
            <summary>
            For a TargetStarted or a ProjectStarted event, this field tells us
            the name of the *parent* project file that was responsible.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.targetNames">
            <summary>
            Stores the TargetNames from the ProjectStarted event. Null for Target frames.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.file">
            <summary>
            For TargetStarted events, this stores the filename where the Target is defined
            (e.g., Microsoft.Common.targets).  This is different than the project that is 
            being built.  
            For ProjectStarted events, this is null.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame.hasErrorsOrWarnings">
            <summary>
            True if there were errors/warnings during the project or target frame.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack">
            <summary>
            The FrameStack class represents a (lifo) stack of Frames.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.frames">
            <summary>
            The frames member is contained by FrameStack and does
            all the heavy lifting for FrameStack.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.#ctor">
            <summary>
            Create a new, empty, FrameStack.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.Pop">
            <summary>
            Remove and return the top element in the stack.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
            <exception cref="T:System.InvalidOperationException">Thrown when stack is empty.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.Peek">
            <summary>
            Returns, but does not remove, the top of the stack.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.Push(Microsoft.Build.BuildEngine.SerialConsoleLogger.Frame)">
            <summary>
            Push(f) adds f to the top of the stack.
            </summary>
            <param name="f">a frame to push</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.Count">
            <summary>
            Constant property that indicates the number of elements
            in the stack.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SerialConsoleLogger.FrameStack.IsEmpty">
            <summary>
            s.IsEmpty() is true iff s.Count == 0
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.SerialConsoleLogger.contextStack">
            <summary>
            contextStack is the only interesting state in the console
            logger.  The context stack contains a sequence of frames
            denoting current and previous containing projects and targets
            </summary>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.PropertyType">
            <summary>
            This is an enumeration of property types.  Each one is explained further
            below.
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildProperty">
            <summary>
            This class holds an MSBuild property.  This may be a property that is 
            represented in the MSBuild project file by an XML element, or it
            may not be represented in any real XML file (e.g., global properties, 
            environment properties, etc.)
            </summary>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.Intern(System.String)">
            <summary>
            Avoid creating duplicate strings when deserializing. We are using a custom intern table
            because String.Intern keeps a reference to the string until the appdomain is unloaded.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.ClearInternTable">
            <summary>
            Clear the static intern table, so that the memory can be released
            when a build is released and the node is waiting for re-use.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.#ctor(System.Xml.XmlElement,Microsoft.Build.BuildEngine.PropertyType)">
            <summary>
            Constructor, that initializes the property with an existing XML element.
            </summary>
            <param name="propertyElement"></param>
            <param name="propertyType"></param>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.#ctor(System.Xml.XmlElement,System.String,Microsoft.Build.BuildEngine.PropertyType)">
             <summary>
             Constructor, that initializes the property with cloned information.
            
             Callers -- Please ensure that the propertyValue passed into this constructor
             is actually computed by calling GetXmlNodeInnerContents on the propertyElement.
             </summary>
             <param name="propertyElement"></param>
             <param name="propertyValue"></param>
             <param name="propertyType"></param>
             <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.#ctor(System.Xml.XmlDocument,System.String,System.String,Microsoft.Build.BuildEngine.PropertyType)">
            <summary>
            Constructor, that initializes the property from the raw data, like
            the property name and property value.  This constructor actually creates
            a new XML element to represent the property, and so it needs the owner
            XML document.
            </summary>
            <param name="ownerDocument"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="propertyType"></param>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.#ctor(System.String,System.String,Microsoft.Build.BuildEngine.PropertyType)">
            <summary>
            Constructor, that initializes the property from the raw data, like
            the property name and property value.  This constructor actually creates
            a new XML element to represent the property, and creates this XML element
            under some dummy XML document.  This would be used if the property didn't
            need to be persisted in an actual XML file at any point, like a "global"
            property or an "environment" property".
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="propertyType"></param>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor, which initializes the property from just the property 
            name and value, creating it as a "normal" property.  This ends up 
            creating a new XML element for the property under a dummy XML document.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.#ctor">
            <summary>
            Default constructor.  This is not allowed because it leaves the 
            property in a bad state -- without a name or value.  But we have to
            have it, otherwise FXCop complains.
            </summary>
            <owner>sumedhk</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.Name">
            <summary>
            Accessor for the property name.  This is read-only, so one cannot
            change the property name once it's set ... your only option is 
            to create a new BuildProperty object.  The reason is that BuildProperty objects
            are often stored in hash tables where the hash function is based 
            on the property name.  Modifying the property name of an existing
            BuildProperty object would make the hash table incorrect.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.Value">
            <summary>
            Accessor for the property value.  Normal properties can be modified;
            other property types cannot.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.SetValue(System.String)">
            <summary>
            Helper method to set the value of a BuildProperty.
            </summary>
            <owner>DavidLe</owner>
            <param name="value"></param>
            <returns>nothing</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.FinalValueEscaped">
            <summary>
            Accessor for the final evaluated property value.  This is read-only.
            To modify the raw value of a property, use BuildProperty.Value.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.FinalValue">
            <summary>
            Returns the unescaped value of the property.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.Type">
            <summary>
            Accessor for the property type.  This is internal, so that nobody 
            calling the OM can modify the type.  We actually need to modify
            it in certain cases internally.  C# doesn't allow a different
            access mode for the "get" vs. the "set", so we've made them both
            internal.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.IsImported">
            <summary>
            Did this property originate from an imported project file?
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.Condition">
            <summary>
            Accessor for the condition on the property.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.ConditionAttribute">
            <summary>
            Read-only accessor for accessing the XML attribute for "Condition".  Callers should
            never try and modify this.  Go through this.Condition to change the condition.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.PropertyElement">
            <summary>
            Accessor for the XmlElement representing this property.  This is internal
            to MSBuild, and is read-only.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildProperty.ParentPersistedPropertyGroup">
            <summary>
            We need to store a reference to the parent BuildPropertyGroup, so we can
            send up notifications.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.Evaluate(Microsoft.Build.BuildEngine.Expander)">
            <summary>
            Given a property bag, this method evaluates the current property, 
            expanding any property references contained within.  It stores this
            evaluated value in the "finalValue" member.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.MarkPropertyAsDirty">
            <summary>
            Marks the parent project as dirty.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.Clone(System.Boolean)">
            <summary>
            Creates a shallow or deep clone of this BuildProperty object.
            
            A shallow clone points at the same XML element as the original, so 
            that modifications to the name or value will be reflected in both 
            copies.  However, the two copies could have different a finalValue.
            
            A deep clone actually clones the XML element as well, so that the
            two copies are completely independent of each other.
            </summary>
            <param name="deepClone"></param>
            <returns></returns>
            <owner>rgoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.IsEquivalent(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            Compares two BuildProperty objects ("this" and "compareToProperty") to determine
            if all the fields within the BuildProperty are the same.
            </summary>
            <param name="compareToProperty"></param>
            <returns>true if the properties are equivalent, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.ToString">
            <summary>
            Returns the property value.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildProperty.op_Explicit(Microsoft.Build.BuildEngine.BuildProperty)~System.String">
            <summary>
            This allows an implicit typecast from a "BuildProperty" to a "string"
            when trying to access the property's value.
            </summary>
            <param name="propertyToCast"></param>
            <returns></returns>
            <owner>rgoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildPropertyGroup">
            <summary>
            A BuildPropertyGroup is a collection of BuildProperty objects. This could be represented by a persisted &lt;PropertyGroup&gt;
            element in the project file, or it could be a virtual collection of properties, such as in the case of global properties,
            environment variable properties, or the final evaluated properties of a project. These two types of PropertyGroups
            (persisted and virtual) are handled differently by many of the methods in this class, but in order to reduce the number of
            concepts for the consumer of the OM, we've merged them into a single class.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor">
            <summary>
            Default constructor, that creates an empty virtual (non-persisted) BuildPropertyGroup.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Default constructor, that creates an empty virtual (non-persisted) BuildPropertyGroup.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project,System.Int32)">
            <summary>
            Constructor for empty virtual (non-persisted) BuildPropertyGroup. Use this constructor
            when the initial number of properties can be estimated, to reduce re-sizing of the list.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project,System.String,System.String)">
            <summary>
            Constructor, from an existing &lt;PropertyGroup&gt; XML element.
            </summary>
            <param name="importedFilename"></param>
            <param name="condition"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project,System.Xml.XmlElement)">
            <summary>
            Constructor, from an existing &lt;PropertyGroup&gt; XML element in the
            main project file.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Constructor, from an existing &lt;PropertyGroup&gt; XML element, which may
            be imported
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project,System.Xml.XmlElement,Microsoft.Build.BuildEngine.PropertyType)">
            <summary>
            Constructor, from an existing &lt;PropertyGroup&gt; XML element.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.#ctor(Microsoft.Build.BuildEngine.Project,System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Constructor which creates a new &lt;PropertyGroup&gt; in the XML document
            specified.
            </summary>
            <param name="ownerDocument"></param>
            <param name="importedFromAnotherProject"></param>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.IsImported">
            <summary>
            This returns a boolean telling you whether this particular property
            group was imported from another project, or whether it was defined
            in the main project.  For virtual property groups which have no
            persistence, this is false.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.Condition">
            <summary>
            Accessor for the condition on the property group.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.SetImportedPropertyGroupCondition(System.String)">
            <summary>
            Allows setting the condition for imported property groups. Changes will not be persisted.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.ConditionAttribute">
            <summary>
            Read-only accessor for accessing the XML attribute for "Condition".  Callers should
            never try and modify this.  Go through this.Condition to change the condition.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.PropertyGroupElement">
            <summary>
            Accessor for the XmlElement representing this property group.  This is 
            internal to MSBuild, and is read-only.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.ParentProject">
            <summary>
            Accessor for the parent Project object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.ClearParentProject">
            <summary>
            Setter for parent project field that makes explicit that's it's only for clearing it.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.ParentCollection">
            <summary>
            Accessor for the ParentCollection
            </summary>
            <returns>Collection BuildPropertyGroup belongs to</returns>
            <owner>davidle</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.ParentElement">
            <summary>
            Accessor for the XML parent element
            </summary>
            <returns>Collection BuildPropertyGroup belongs to</returns>
            <owner>davidle</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.Count">
            <summary>
            Returns the number of properties contained in this BuildPropertyGroup.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.ImportedFromFilename">
            <summary>
            Implements logic to get filename from propertygroups that doesn't have an
            XmlElement behind it.
            </summary>
            <returns>string containing filename of import file</returns>
            <owner>davidle</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.Item(System.String)">
            <summary>
            This is the indexer for the BuildPropertyGroup class, which allows the caller to set or get the property data using simple
            array indexer [] notation. The caller passes in the property name inside the [], and out comes the  BuildProperty object,
            which can be typecast to a string in order to get just the property value. Or if it's used on the left of the "="
            sign, the  same notation can set a new BuildProperty object, overwriting.
            Getting a value requires the property group be virtual.
            </summary>
            <owner>RGoel</owner>
            <param name="propertyName"></param>
            <returns>The property with the given name, or null if it does not exist in this group</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.GetEnumerator">
            <summary>
            This IEnumerable method returns an IEnumerator object, which allows
            the caller to enumerate through the BuildProperty objects contained in
            this BuildPropertyGroup.
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.ShallowClone">
            <summary>
            Does a shallow clone, creating a new group with pointers to the same properties as the old group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.Clone(System.Boolean)">
            <summary>
            This method creates a copy of the BuildPropertyGroup. A shallow clone will reference the same BuildProperty objects as the
            original. A deep clone will deep clone the BuildProperty objects themselves. If this is a persisted BuildPropertyGroup, only
            deep clones are allowed, because you can't have the same XML element belonging to two parents.
            </summary>
            <owner>RGoel</owner>
            <param name="deepClone"></param>
            <returns>The cloned BuildPropertyGroup.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.ImportInitialProperties(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            ImportInitialProperties is used when setting up an evaluated BuildProperty
            Group with the initial set of properties from MSBuild reserved properties,
            environment variables, tools version dependent properties, and global 
            properties.  After this virtual BuildPropertyGroup has been populated with 
            these, we can continue to read in the properties from the project file.
            </summary>
            <param name="environmentProperties"></param>
            <param name="reservedProperties"></param>
            <param name="toolsVersionDependentProperties"></param>
            <param name="globalProperties"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.SetProperty(Microsoft.Build.BuildEngine.BuildProperty)">
             <summary>
             Sets a property. 
            
             Either overrides the value of the property with the given name, or adds it if it
             doesn't already exist. Setting to the same value as before does nothing.
            
             This method will take into account property precedence rules, so that for
             example, a reserved MSBuild property cannot be overridden by a normal property.
            
             PropertyGroup must be virtual.
             </summary>
             <param name="newProperty"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.SetProperty(System.String,System.String)">
             <summary>
             Sets a property taking the property name and value as strings directly. 
             
             Either overrides the value of the property with the given name, or adds it if it
             doesn't already exist. Setting to the same value as before does nothing.
            
             This method will take into account property precedence rules, so that for
             example, a reserved MSBuild property cannot be overridden by a normal property.
            
             PropertyGroup must be virtual.
             </summary>
             <param name="propertyName"></param>
             <param name="propertyValue"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.SetProperty(System.String,System.String,System.Boolean)">
            <summary>
            Sets a property in this PropertyGroup, optionally escaping the property value so
            that it will be treated as a literal.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="treatPropertyValueAsLiteral"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.AddNewProperty(System.String,System.String)">
            <summary>
            The AddNewProperty method adds a new property element to the persisted
            &lt;PropertyGroup&gt; at the end.  This method takes the property name and
            value as strings directly, so that the BuildProperty object can be created
            with the correct owner XML document and parent XML element.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.AddNewProperty(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new property to the PropertyGroup, optionally escaping the property value so
            that it will be treated as a literal.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="treatPropertyValueAsLiteral"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.AddNewImportedProperty(System.String,System.String,Microsoft.Build.BuildEngine.Project)">
            <summary>
            The AddNewImportedProperty method adds a new imported propert element.
            This method takes the property name and value as strings directly.  The
            Project representing the imported Project is passed in so parent document
            can be retrieved.
            </summary>
            <owner>DavidLe</owner>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <param name="importedProject"></param>
            <returns>The new BuildPropertyGroup.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.AddExistingProperty(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            Adds an existing BuildProperty to the list of properties, does not attempt 
            to add backing Xml for the item.
            </summary>
            <param name="propertyToAdd"></param>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.AddProperty(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            The AddProperty method adds an existing property element to the persisted
            &lt;PropertyGroup&gt; at the end.  This property element must be associated
            with the same Xml document as the &lt;PropertyGroup&gt;.
            </summary>
            <param name="propertyToAdd"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.RemoveProperty(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            Removes the given BuildProperty object from either a persisted or a virtual
            BuildPropertyGroup.
            </summary>
            <param name="property"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.RemoveProperty(System.String)">
            <summary>
            Removes all properties with the given name from either a persisted or a virtual BuildPropertyGroup. For persisted
            PropertyGroups, there could be multiple. For a virtual BuildPropertyGroup, there can be only one.
            </summary>
            <owner>RGoel</owner>
            <param name="propertyName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.EnsureNoReservedProperties">
            <summary>
            Make sure that this property group doesn't contain any reserved properties.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.RevertAllOutputProperties">
            <summary>
            Removes all output properties, and restores the non-output properties that were overridden.
            Requires property group to be virtual.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.ImportProperties(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Imports all the properties from another BuildPropertyGroup into this one.
            Any existing properties with the same name are overridden by the new properties.
            Requires property group to be virtual.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.ClearHelper(System.Boolean)">
            <summary>
            Helper for the Clear methods
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.ClearImportedPropertyGroup">
            <summary>
            Removes all properties and conditions from this BuildPropertyGroup.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.Clear">
            <summary>
            Removes all properties and conditions from this BuildPropertyGroup.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.MarkPropertyGroupAsDirty">
            <summary>
            Marks the parent project as dirty.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.GatherEnvironmentVariables">
            <summary>
            This method grabs all the environment variables and sets them as
            properties. This method can be invoked multiple times if there is
            reason to believe the environment has changed. It will update all
            the previously gathered variables, and set new ones. This method
            will not, however, unset previously set variables.
            Requires property group to be virtual.
            
            NOTE: this method does not allow environment variables to override
            previously set properties of type "GlobalProperty" or "ReservedProperty"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.SetExtensionsPathProperties">
            <summary>
            Set the special "MSBuildExtensionsPath" and "MSBuildExtensionsPath32" properties.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.IsEquivalent(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            This method does a comparison of the actual contents of two property bags
            and returns True if they are equal, else False.  Equality means that 
            the two collections contain the same set of property names (case insensitive)
            with the same values (case sensitive).
            Requires property group to be virtual.
            </summary>
            <param name="compareToPropertyGroup"></param>
            <owner>RGoel</owner>
            <returns>true if the two property bags are equivalent, and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.IsVirtual">
            <summary>
            Returns a boolean that indicates whether this is a virtual property
            group.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.MustBeVirtual(System.String)">
            <summary>
            Call this method to verify that this property group is a well-formed
            virtual property group.
            Requires property group to be virtual.
            PERF WARNING: this method is called a lot because virtual PropertyGroups
            are used extensively -- keep this method fast and cheap
            </summary>
            <param name="errorResourceName"></param>
            <owner>JomoF</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroup.IsPersisted">
            <summary>
            Returns whether this is a persisted group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.MustBePersisted(System.String,System.String)">
            <summary>
            Verifies group is persisted.
            </summary>
            <param name="errorResourceName"></param>
            <param name="args"></param>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.MustBelongToPropertyGroup(System.Xml.XmlElement)">
            <summary>
            Verifies the XmlElement is a child node of the propertyGroupElement backing this BuildPropertyGroup.
            </summary>
            <param name="propertyElement"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroup.Evaluate(Microsoft.Build.BuildEngine.BuildPropertyGroup,System.Collections.Hashtable,Microsoft.Build.BuildEngine.ProcessingPass)">
            <summary>
            Evaluates condition on property group, and if true, evaluates
            on each contained property.  If that's true as well, adds property
            to evaluatedPropertyBag.
            </summary>
            <owner>DavidLe</owner>
            <param name="evaluatedPropertyBag"></param>
            <param name="conditionedPropertiesTable"></param>
            <param name="pass"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildPropertyGroupProxy">
            <summary>
            An enumerable wrapper for a BuildPropertyGroup that allows read-only 
            access to the properties.
            </summary>
            <remarks>
            This class is designed to be passed to loggers.
            The expense of copying properties is only incurred if and when 
            a logger chooses to enumerate over it.
            </remarks>
            <owner>danmose</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupProxy.#ctor(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Constructor
            </summary>
            <param name="propertyGroup">Property group this class should proxy</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupProxy.GetEnumerator">
            <summary>
            Returns an enumerator that provides copies of the property name-value pairs
            in the backing property group.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection">
            <summary>
            This class represents a collection of persisted &lt;PropertyGroup&gt;'s.  Each
            MSBuild project has exactly one BuildPropertyGroupCollection, which includes
            all the imported PropertyGroups as well as the ones in the main project file.
            
            The implementation of this class is that it's basically a Facade.  It just
            calls into the GroupingCollection within the Project to do it's work.  It
            doesn't maintain any BuildPropertyGroup state on its own.
            </summary>
            <owner>DavidLe</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.#ctor">
            <summary>
            Private default constructor.  This object can't be instantiated by
            OM consumers.
            </summary>
            <owner>DavidLe, RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.#ctor(Microsoft.Build.BuildEngine.GroupingCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="groupingCollection"></param>
            <owner>rgoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.Count">
            <summary>
            Read-only property which returns the number of PropertyGroups contained
            in our collection.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.IsSynchronized">
            <summary>
            This ICollection property tells whether this object is thread-safe.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.SyncRoot">
            <summary>
            This ICollection property returns the object to be used to synchronize
            access to the class.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.LastLocalPropertyGroup">
            <summary>
            This looks through all the local property groups (those in the main
            project file, as opposed to any imported project files).  It returns
            the last one that comes before any imported property groups.  This
            is the heuristic we use to determine where to add new property groups
            into the project file.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            This ICollection method copies the contents of this collection to an 
            array.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.GetEnumerator">
            <summary>
            This IEnumerable method returns an IEnumerator object, which allows
            the caller to enumerate through the BuildPropertyGroup objects contained in
            this BuildPropertyGroupCollection.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.InsertAtBeginning(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Adds a new BuildPropertyGroup as the first element of our collection.
            This method does nothing to manipulate the project's XML content.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.InsertAfter(Microsoft.Build.BuildEngine.BuildPropertyGroup,Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Adds a new BuildPropertyGroup to our collection, at the specified insertion
            point.  This method does nothing to manipulate the project's XML content.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.InsertAtEnd(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Adds a new BuildPropertyGroup as the last element of our collection.
            This method does nothing to manipulate the project's XML content.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.RemovePropertyGroup(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Removes a BuildPropertyGroup from our collection.  This method does nothing
            to manipulate the project's XML content.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.AssemblyResources">
            <summary>
            This class provides access to the assembly's resources.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.AssemblyResources.msbuildExeResourceManager">
            <summary>
            A slot for msbuild.exe to add a resource manager over its own resources, that can also be consulted.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyResources.RegisterMSBuildExeResources(System.Resources.ResourceManager)">
            <summary>
            The internals of the Engine are exposed to MSBuild.exe, so they must share the same AssemblyResources class and 
            ResourceUtilities class that uses it. To make this possible, MSBuild.exe registers its resources here and they are
            normally consulted last. This assumes that there are no duplicated resource ID's between the Engine and MSBuild.exe.
            (Actually there are currently two: LoggerCreationError and LoggerNotFoundError.
            We can't change the resource ID's this late in the cycle (UNDONE) and we sometimes want to load the MSBuild.exe ones,
            because they're a little different. So for that purpose we call GetStringLookingInMSBuildExeResourcesFirst() )
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyResources.GetString(System.String)">
            <summary>
            Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="name"></param>
            <returns>The resource string, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyResources.GetStringLookingInMSBuildExeResourcesFirst(System.String)">
            <summary>
            Loads the specified resource string.
            </summary>
            <returns>The resource string, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyResources.GetStringFromEngineResources(System.String)">
            <summary>
            Loads the specified resource string, from the Engine or else Shared resources.
            </summary>
            <returns>The resource string, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyResources.GetStringFromMSBuildExeResources(System.String)">
            <summary>
            Loads the specified resource string, from the MSBuild.exe resources.
            </summary>
            <returns>The resource string, or null if not found.</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo">
            <summary>
            This class packages information about how to load a given assembly -- an assembly can be loaded by either its assembly
            name (strong or weak), or its filename/path.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo.#ctor(System.String,System.String)">
            <summary>
            This constructor initializes the assembly information.
            </summary>
            <owner>SumedhK</owner>
            <param name="assemblyName"></param>
            <param name="assemblyFile"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo.AssemblyName">
            <summary>
            Gets the assembly's identity denoted by its strong/weak name.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo.AssemblyFile">
            <summary>
            Gets the path to the assembly file.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo.ToString">
            <summary>
            Retrieves the load information for the assembly.
            </summary>
            <returns>The assembly name, or the assembly file/path.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo.GetHashCode">
            <summary>
            Computes a hashcode for this assembly info, so this object can be used as a key into
            a hash table.
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo.Equals(System.Object)">
            <summary>
            Determines if two AssemblyLoadInfos are effectively the same.
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension">
            <summary>
            A replacement for AssemblyName that optimizes calls to FullName which is expensive.
            The assembly name is represented internally by an AssemblyName and a string, conversion
            between the two is done lazily on demand.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.#ctor">
            <summary>
            Construct an unnamed assembly.
            Private because we want only one of these.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Construct with AssemblyName.
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.#ctor(System.String)">
            <summary>
            Construct with string.
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.#ctor(System.String,System.Boolean)">
            <summary>
            Construct from a string, but immediately construct a real AssemblyName.
            This will cause an exception to be thrown up front if the assembly name 
            isn't well formed.
            </summary>
            <param name="assemblyName">
            The string version of the assembly name.
            </param>
            <param name="validate">
            Used when the assembly name comes from a user-controlled source like a project file or config file.
            Does extra checking on the assembly name and will throw exceptions if something is invalid.
            </param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.GetAssemblyNameEx(System.String)">
            <summary>
            To be used as a delegate. Gets the AssemblyName of the given file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CreateAssemblyName">
            <summary>
            Assume there is a string version, create the AssemblyName version.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CreateFullName">
            <summary>
            Assume there is a string version, create the AssemblyName version.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.Name">
            <summary>
            The base name of the assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.Version">
            <summary>
            The assembly's version number.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.ReplaceVersion(System.Version)">
            <summary>
            Replace the current version with a new version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CultureInfo">
            <summary>
            The assembly's version number.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.AssemblyName">
            <summary>
            As an AssemblyName
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.FullName">
            <summary>
            The assembly's full name.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.GetPublicKeyToken">
            <summary>
            Get the assembly's public key token.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.UnnamedAssembly">
            <summary>
            A special "unnamed" instance of AssemblyNameExtension.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CompareTo(Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension)">
            <summary>
            Compare one assembly name to another.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.GetHashCode">
            <summary>
            Get a hash code for this assembly name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CompareBaseNameTo(Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension)">
            <summary>
            Compare two base names as quickly as possible.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CompareBaseNameToImpl(Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension)">
            <summary>
            An implementation of compare that compares two base 
            names as quickly as possible.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.CompareBaseNamesStringWise(System.String,System.String)">
            <summary>
            Compare two basenames.
            </summary>
            <param name="asString1"></param>
            <param name="asString2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.Equals(Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension)">
            <summary>
            Compare two assembly names for equality.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.IsUnnamedAssembly">
            <summary>
            Only the unnamed assembly has both null assemblyname and null string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.GetAssemblyNameFromDisplayName(System.String)">
            <summary>
            Given a display name, construct an assembly name.
            </summary>
            <param name="displayName">The display name.</param>
            <returns>The assembly name.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.EscapeDisplayNameCharacters(System.String)">
            <summary>
            Return a string that has AssemblyName special characters escaped. 
            Those characters are Equals(=), Comma(,), Quote("), Apostrophe('), Backslash(\).
            </summary>
            <remarks>
            WARNING! This method is not meant as a general purpose escaping method for assembly names.
            Use only if you really know that this does what you need.
            </remarks>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension.ToString">
            <summary>
            Convert to a string for display.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo">
            <summary>
            This class encapsulates information about a file that is associated with a build event.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.#ctor">
            <summary>
            Private default constructor disallows parameterless instantiation.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.#ctor(System.String)">
            <summary>
            Creates an instance of this class using the given filename/path.
            </summary>
            <owner>SumedhK</owner>
            <param name="file"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates an instance of this class using the given filename/path and a line/column of interest in the file.
            </summary>
            <owner>SumedhK</owner>
            <param name="file"></param>
            <param name="line">Set to zero if not available.</param>
            <param name="column">Set to zero if not available.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of this class using the given filename/path and a range of lines/columns of interest in the file.
            </summary>
            <owner>SumedhK</owner>
            <param name="file"></param>
            <param name="line">Set to zero if not available.</param>
            <param name="column">Set to zero if not available.</param>
            <param name="endLine">Set to zero if not available.</param>
            <param name="endColumn">Set to zero if not available.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.#ctor(System.Xml.XmlException)">
            <summary>
            Creates an instance of this class using the information in the given XmlException.
            </summary>
            <owner>SumedhK</owner>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.#ctor(System.Xml.Schema.XmlSchemaException)">
            <summary>
            Creates an instance of this class using the information in the given XmlSchemaException.
            </summary>
            <owner>SumedhK</owner>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.File">
            <summary>
            Gets the filename/path to be associated with some build event.
            </summary>
            <owner>SumedhK</owner>
            <value>The filename/path string.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.Line">
            <summary>
            Gets the line number of interest in the file.
            </summary>
            <owner>SumedhK</owner>
            <value>Line number, or zero if not available.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.Column">
            <summary>
            Gets the column number of interest in the file.
            </summary>
            <owner>SumedhK</owner>
            <value>Column number, or zero if not available.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.EndLine">
            <summary>
            Gets the last line number of a range of interesting lines in the file.
            </summary>
            <owner>SumedhK</owner>
            <value>Last line number, or zero if not available.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo.EndColumn">
            <summary>
            Gets the last column number of a range of interesting columns in the file.
            </summary>
            <owner>SumedhK</owner>
            <value>Last column number, or zero if not available.</value>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution">
            <summary>
            This represents basic configuration functionality used in solution and project configurations.
            Since solution configurations don't need anything else, they are represented with this class.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="configurationName"></param>
            <param name="platformName"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution.ConfigurationName">
            <summary>
            The configuration part of this, uh, configuration - e.g. "Debug", "Release"
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution.PlatformName">
            <summary>
            The platform part of this configuration - e.g. "Any CPU", "Win32"
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution.FullName">
            <summary>
            The full name of this configuration - e.g. "Debug|Any CPU"
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution.ProjectBuildItems">
            <summary>
            Build items corresponding to projects built in this configuration
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ConversionUtilities">
            <summary>
            This class contains only static methods, which are useful throughout many
            of the MSBuild classes and don't really belong in any specific class.   
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ConvertStringToBool(System.String)">
            <summary>
            Converts a string to a bool.  We consider "true/false", "on/off", and 
            "yes/no" to be valid boolean representations in the XML.
            </summary>
            <param name="parameterValue">The string to convert.</param>
            <returns>Boolean true or false, corresponding to the string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.CanConvertStringToBool(System.String)">
            <summary>
            Returns true if the string can be successfully converted to a bool,
            such as "on" or "yes"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ValidBooleanTrue(System.String)">
            <summary>
            Returns true if the string represents a valid MSBuild boolean true value,
            such as "on", "!false", "yes"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ValidBooleanFalse(System.String)">
            <summary>
            Returns true if the string represents a valid MSBuild boolean false value,
            such as "!on" "off" "no" "!true"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ConvertDecimalToDouble(System.String)">
            <summary>
            Converts a string like "123.456" into a double. Leading sign is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ConvertHexToDouble(System.String)">
            <summary>
            Converts a hex string like "0xABC" into a double.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ConvertDecimalOrHexToDouble(System.String)">
            <summary>
            Converts a string like "123.456" or "0xABC" into a double.
            Tries decimal conversion first.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ValidHexNumber(System.String)">
            <summary>
            Returns true if the string is a valid hex number, like "0xABC"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ValidDecimalNumber(System.String)">
            <summary>
            Returns true if the string is a valid decimal number, like "-123.456"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ConversionUtilities.ValidDecimalOrHexNumber(System.String)">
            <summary>
            Returns true if the string is a valid decimal or hex number
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.GetDirectories">
            <summary>
            GetDirectories delegate
            </summary>
            <param name="path">The path to get directories for.</param>
            <param name="pattern">The pattern to search for.</param>
            <returns>An array of directories.</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and validation.
            </summary>
            <owner>RGoel, SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.LaunchMsBuildDebuggerOnFatalError">
            <summary>
            Will launch the msbuild debugger when the environment variable "MSBuildLaunchDebuggerOnFatalError" is set
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.ThrowInternalError(System.Boolean,System.String,System.Object[])">
            <summary>
            Puts up an assertion dialog in debug builds, and throws an exception in
            both debug and release builds. Since this is not a no-op in release builds,
            it should not be called repeatedly in performance-critical scenarios.
            
            PERF WARNING: calling a method that takes a variable number of arguments
            is expensive, because memory is allocated for the array of arguments -- do
            not call this method repeatedly in performance-critical scenarios
            </summary>
            <owner>RGoel, SumedhK</owner>
            <param name="showAssert"></param>
            <param name="unformattedMessage"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.ThrowInternalError(System.String)">
            <summary>
            Puts up an assertion dialog in debug builds, and throws an internal error exception in
            both debug and release builds. Since this is not a no-op in release builds,
            it should not be called repeatedly in performance-critical scenarios.
            This is only for situations that would mean that there is a bug in MSBuild itself.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowNoAssert(System.Boolean,System.String)">
            <summary>
            Throws an InternalErrorException if the given condition is false,
            without showing an assert dialog. Use this method only for conditions
            that mean bugs in MSBuild code (that is, not expected user exceptions).
            </summary>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrow(System.Boolean,System.String)">
            <summary>
            This method should be used in places where one would normally put
            an "assert". It should be used to validate that our assumptions are
            true, where false would indicate that there must be a bug in our
            code somewhere. This should not be used to throw errors based on bad
            user input or anything that the user did wrong.
            </summary>
            <owner>RGoel, SumedhK</owner>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrow(System.Boolean,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowNoAssert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrow(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrow(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Overload for three string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrow(System.Boolean,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Overload for four string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="unformattedMessage"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.ThrowInvalidOperation(System.String,System.Object[])">
            <summary>
            Throws an InvalidOperationException.
            
            PERF WARNING: calling a method that takes a variable number of arguments
            is expensive, because memory is allocated for the array of arguments -- do
            not call this method repeatedly in performance-critical scenarios
            </summary>
            <owner>RGoel, SumedhK</owner>
            <param name="resourceName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowInvalidOperation(System.Boolean,System.String)">
            <summary>
            Throws an InvalidOperationException if the given condition is false.
            </summary>
            <owner>RGoel, SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowInvalidOperation(System.Boolean,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowInvalidOperation(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowInvalidOperation(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Overload for three string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.ThrowArgument(System.String,System.Object[])">
            <summary>
            Throws an ArgumentException that can include an inner exception.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
            <owner>RGoel, SumedhK</owner>
            <param name="innerException">Can be null.</param>
            <param name="resourceName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.ThrowArgument(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an ArgumentException that can include an inner exception.
            </summary>
            <remarks>
            This method is thread-safe.
            </remarks>
            <owner>RGoel, SumedhK</owner>
            <param name="innerException">Can be null.</param>
            <param name="resourceName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgument(System.Boolean,System.String)">
            <summary>
            Throws an ArgumentException if the given condition is false.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>RGoel, SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgument(System.Boolean,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgument(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgument(System.Boolean,System.Exception,System.String)">
            <summary>
            Throws an ArgumentException that includes an inner exception, if
            the given condition is false.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="innerException">Can be null.</param>
            <param name="resourceName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgument(System.Boolean,System.Exception,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="innerException"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgument(System.Boolean,System.Exception,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="innerException"></param>
            <param name="resourceName"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgumentOutOfRange(System.Boolean,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException using the given parameter name
            if the condition is false.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgumentLength(System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if the given string parameter is null
            and ArgumentException if it has zero length.
            </summary>
            <owner>SumedhK</owner>
            <param name="parameter"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgumentNull(System.Object,System.String)">
            <summary>
            Throws an ArgumentNullException if the given parameter is null.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="parameter"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgumentNull(System.Object,System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if the given parameter is null.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="parameter"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ErrorUtilities.VerifyThrowArgumentArraysSameLength(System.Array,System.Array,System.String,System.String)">
            <summary>
            Verifies the given arrays are not null and have the same length
            </summary>
            <param name="parameter1"></param>
            <param name="parameter2"></param>
            <param name="parameter1Name"></param>
            <param name="parameter2Name"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.EscapingUtilities">
            <summary>
            This class implements static methods to assist with unescaping of %XX codes
            in the MSBuild file format.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EscapingUtilities.UnescapeAll(System.String)">
            <summary>
            Replaces all instances of %XX in the input string with the character represented
            by the hexadecimal number XX. 
            </summary>
            <param name="escapedString"></param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EscapingUtilities.UnescapeAll(System.String,System.Boolean@)">
            <summary>
            Replaces all instances of %XX in the input string with the character represented
            by the hexadecimal number XX. 
            </summary>
            <param name="escapedString"></param>
            <param name="escapingWasNecessary"></param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EscapingUtilities.Escape(System.String)">
            <summary>
            Adds instances of %XX in the input string where the char char to be escaped appears
            XX is the hex value of the ASCII code for the char.
            </summary>
            <param name="unescapedString"></param>
            <returns>escaped string</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EscapingUtilities.ContainsReservedCharacters(System.String)">
            <summary>
            Before trying to actually escape the string, it can be useful to call this method to determine
            if escaping is necessary at all.  This can save lots of calls to copy around item metadata
            that is really the same whether escaped or not.
            </summary>
            <param name="unescapedString"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EscapingUtilities.ContainsEscapedWildcards(System.String)">
            <summary>
            Determines whether the string contains the escaped form of '*' or '?'.
            </summary>
            <param name="escapedString"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.EscapingUtilities.charsToEscape">
            <summary>
            Special characters that need escaping.
            It's VERY important that the percent character is the FIRST on the list - since it's both a character 
            we escape and use in escape sequences, we can unintentionally escape other escape sequences if we 
            don't process it first. Of course we'll have a similar problem if we ever decide to escape hex digits 
            (that would require rewriting the algorithm) but since it seems unlikely that we ever do, this should
            be good enough to avoid complicating the algorithm at this point.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting">
            <summary>
            Offers a default string format for Error and Warning events
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.EscapeCarriageReturn(System.String)">
            <summary>
            Escape the carriage Return from a string
            </summary>
            <param name="stringWithCarriageReturn"></param>
            <returns>String with carriage returns escaped as \\r </returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.FormatEventMessage(Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Format the error event message and all the other event data into
            a single string.
            </summary>
            <owner>t-jeffv</owner>
            <param name="e">Error to format</param>
            <returns>The formatted message string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.FormatEventMessage(Microsoft.Build.Framework.BuildErrorEventArgs,System.Boolean)">
            <summary>
            Format the error event message and all the other event data into
            a single string.
            </summary>
            <owner>t-jeffv</owner>
            <param name="e">Error to format</param>
            <returns>The formatted message string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.FormatEventMessage(Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Format the warning message and all the other event data into a
            single string.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
            <param name="e">Warning to format</param>
            <returns>The formatted message string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.FormatEventMessage(Microsoft.Build.Framework.BuildWarningEventArgs,System.Boolean)">
            <summary>
            Format the warning message and all the other event data into a
            single string.
            </summary>
            <owner>t-jeffv, sumedhk</owner>
            <param name="e">Warning to format</param>
            <returns>The formatted message string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.FormatEventMessage(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Format the event message and all the other event data into a
            single string.
            Internal for unit testing only.
            </summary>
            <owner>t-jeffv, sumedhK</owner>
            <param name="category">category ("error" or "warning")</param>
            <param name="subcategory">subcategory</param>
            <param name="message">event message</param>
            <param name="code">error or warning code number</param>
            <param name="file">file name</param>
            <param name="lineNumber">line number (0 if n/a)</param>
            <param name="endLineNumber">end line number (0 if n/a)</param>
            <param name="columnNumber">column number (0 if n/a)</param>
            <param name="endColumnNumber">end column number (0 if n/a)</param>
            <param name="threadId">thread id</param>
            <returns>The formatted message string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.SplitStringOnNewLines(System.String)">
            <summary>
            Splits strings on 'newLines' with tolerance for Everett and Dogfood builds.
            </summary>
            <param name="s">String to split.</param>
            <owner>t-jeffv, sumedhk</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.EventArgsFormatting.newLines">
            <summary>
            The kinds of newline breaks we expect.
            </summary>
            <remarks>Currently we're not supporting "\r".</remarks>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ExceptionHandling">
            <summary>
            Utility methods for classifying and handling exceptions.
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ExceptionHandling.IsCriticalException(System.Exception)">
            <summary>
            If the given exception is "ignorable under some circumstances" return false.
            Otherwise it's "really bad", and return true.
            This makes it possible to catch(Exception ex) without catching disasters.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ExceptionHandling.NotExpectedException(System.Exception)">
            <summary>
            If the given exception is file IO related or expected return false.
            Otherwise, return true.
            </summary>
            <param name="e">The exception to check.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ExceptionHandling.NotExpectedReflectionException(System.Exception)">
            <summary>
            If the given exception is reflection-related return the exception -- or in the case
            of TargetInvocationException, return the inner exception.
            Otherwise, return null.
            </summary>
            <remarks>
            The reason we return the exception rather than a bool is that some exceptions need to
            be "unwrapped" and we want this method to handle that for us.
            </remarks>
            <param name="e">The exception to check.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ExceptionHandling.NotExpectedFunctionException(System.Exception)">
            <summary>
            Returns false if this is a known exception thrown by function evaluation
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileMatcher">
            <summary>
            Functions for matching file names with patterns. 
            </summary>
            <owner>JomoF</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileMatcher.FileSystemEntity">
            <summary>
            The type of entity that GetFileSystemEntries should return.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries">
            <summary>
            Delegate defines the GetFileSystemEntries signature that GetLongPathName uses
            to enumerate directories on the file system.
            </summary>
            <param name="entityType">Files, Directories, or Files and Directories</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The file pattern.</param>
            <param name="projectDirectory"></param>
            <param name="stripProjectDirectory"></param>
            <returns>The array of filesystem entries.</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileMatcher.DirectoryExists">
            <summary>
            Returns true if the directory exists and is not a file, otherwise false.
            </summary>
            <param name="path">The path to check</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.HasWildcards(System.String)">
            <summary>
            Determines whether the given path has any wild card characters.
            </summary>
            <param name="filespec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetAccessibleFileSystemEntries(Microsoft.Build.BuildEngine.Shared.FileMatcher.FileSystemEntity,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the files and\or folders specified by the given path and pattern.
            </summary>
            <param name="entityType">Whether Files, Directories or both.</param>
            <param name="path">The path to search.</param>
            <param name="pattern">The pattern to search.</param>
            <param name="projectDirectory">The directory for the project within which the call is made</param>
            <param name="stripProjectDirectory">If true the project directory should be stripped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetAccessibleFilesAndDirectories(System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria. Inaccessible or non-existent file
            system entries are skipped.
            </summary>
            <owner>SumedhK,JomoF</owner>
            <param name="path"></param>
            <param name="pattern"></param>
            <returns>Array of matching file system entries (can be empty).</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetAccessibleFiles(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Same as Directory.GetFiles(...) except that files that
            aren't accessible are skipped instead of throwing an exception.
            
            Other exceptions are passed through.
            </summary>
            <param name="path">The path.</param>
            <param name="filespec">The pattern.</param>
            <param name="projectDirectory">The project directory</param>
            <param name="stripProjectDirectory"></param>
            <returns>Files that can be accessed.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetAccessibleDirectories(System.String,System.String)">
            <summary>
            Same as Directory.GetDirectories(...) except that files that
            aren't accessible are skipped instead of throwing an exception.
            
            Other exceptions are passed through.
            </summary>
            <param name="path">The path.</param>
            <param name="pattern">Pattern to match</param>
            <returns>Accessible directories.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetLongPathName(System.String,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a path name, get its long version.
            </summary>
            <param name="path">The short path.</param>
            <param name="getFileSystemEntries">Delegate.</param>
            <returns>The long path.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.SplitFileSpec(System.String,System.String@,System.String@,System.String@,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, split it into left-most 'fixed' dir part, middle 'wildcard' dir part, and filename part.
            The filename part may have wildcard characters in it.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.PreprocessFileSpecForSplitting(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Do most of the grunt work of splitting the filespec into parts.
            Does not handle post-processing common to the different matching
            paths.
            </summary>
            <param name="filespec">The filespec to be decomposed.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.RemoveInitialDotSlash(System.String[])">
            <summary>
            Removes the leading ".\" from all of the paths in the array. 
            </summary>
            <param name="paths">Paths to remove .\ from.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.IsDirectorySeparator(System.Char)">
            <summary>
            Checks if the char is a DirectorySeparatorChar or a AltDirectorySeparatorChar
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.RemoveProjectDirectory(System.String[],System.String)">
            <summary>
            Removes the current directory converting the file back to relative path 
            </summary>
            <param name="paths">Paths to remove current directory from.</param>
            <param name="projectDirectory"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFilesRecursive(System.Collections.IList,System.String,System.String,System.String,System.Int32,System.Text.RegularExpressions.Regex,System.Boolean,System.String,System.Boolean,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Get all files that match either the file-spec or the regular expression. 
            </summary>
            <param name="listOfFiles">List of files that gets populated.</param>
            <param name="baseDirectory">The path to enumerate</param>
            <param name="remainingWildcardDirectory">The remaining, wildcard part of the directory.</param>
            <param name="filespec">The filespec.</param>
            <param name="extensionLengthToEnforce"></param>
            <param name="regexFileMatch">Wild-card matching.</param>
            <param name="needsRecursion">If true, then recursion is required.</param>
            <param name="projectDirectory"></param>
            <param name="stripProjectDirectory"></param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.RegularExpressionFromFileSpec(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Given a file spec, create a regular expression that will match that
            file spec.
            
            PERF WARNING: this method is called in performance-critical
            scenarios, so keep it fast and cheap
            </summary>
            <param name="fixedDirectoryPart">The fixed directory part.</param>
            <param name="wildcardDirectoryPart">The wildcard directory part.</param>
            <param name="filenamePart">The filename part.</param>
            <param name="isLegalFileSpec">Receives whether this pattern is legal or not.</param>
            <returns>The regular expression string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSpecInfo(System.String,System.Text.RegularExpressions.Regex@,System.Boolean@,System.Boolean@,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching. 
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="regexFileMatch">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSpecInfo(System.String,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a filespec, get the information needed for file matching.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fixedDirectoryPart">Receives the fixed directory part.</param>
            <param name="wildcardDirectoryPart">Receives the wildcard directory part.</param>
            <param name="filenamePart">Receives the filename part.</param>
            <param name="matchFileExpression">Receives the regular expression.</param>
            <param name="needsRecursion">Receives the flag that is true if recursion is required.</param>
            <param name="isLegalFileSpec">Receives the flag that is true if the filespec is legal.</param>
            <param name="getFileSystemEntries">Delegate.</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileMatcher.Result">
            <summary>
            The results of a match between a filespec and a file name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.Result.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.FileMatch(System.String,System.String)">
            <summary>
            Given a pattern (filespec) and a candidate filename (fileToMatch)
            return matching information.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fileToMatch">The candidate to match against.</param>
            <returns>The result class.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.FileMatch(System.String,System.String,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries)">
            <summary>
            Given a pattern (filespec) and a candidate filename (fileToMatch)
            return matching information.
            </summary>
            <param name="filespec">The filespec.</param>
            <param name="fileToMatch">The candidate to match against.</param>
            <param name="getFileSystemEntries">Delegate.</param>
            <returns>The result class.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFiles(System.String,System.String)">
            <summary>
            Given a filespec, find the files that match. 
            </summary>
            <param name="filespec">Get files that match the given file spec.</param>
            <returns>The array of files.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFiles(System.String,System.String,Microsoft.Build.BuildEngine.Shared.FileMatcher.GetFileSystemEntries,Microsoft.Build.BuildEngine.Shared.FileMatcher.DirectoryExists)">
            <summary>
            Given a filespec, find the files that match. 
            </summary>
            <param name="filespec">Get files that match the given file spec.</param>
            <param name="getFileSystemEntries">Get files that match the given file spec.</param>
            <param name="directoryExists">Determine whether a directory exists.</param>
            <returns>The array of files.</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileUtilities">
            <summary>
            This class contains utility methods for file IO.
            PERF\COVERAGE NOTE: Try to keep classes in 'shared' as granular as possible. All the methods in 
            each class get pulled into the resulting assembly.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileUtilities.ItemSpecModifiers">
            <summary>
            Encapsulates the definitions of the item-spec modifiers a.k.a. reserved item metadata.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.IsItemSpecModifier(System.String)">
            <summary>
            Indicates if the given name is reserved for an item-spec modifier.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.IsDerivableItemSpecModifier(System.String)">
            <summary>
            Indicates if the given name is reserved for a derivable item-spec modifier.
            Derivable means it can be computed given a file name.
            </summary>
            <param name="name">Name to check.</param>
            <returns>true, if name of a derivable modifier</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.GetItemSpecModifier(System.String,System.String,System.String,System.Collections.Hashtable@)">
            <summary>
            Performs path manipulations on the given item-spec as directed.
            
            Supported modifiers:
                %(FullPath)         = full path of item
                %(RootDir)          = root directory of item
                %(Filename)         = item filename without extension
                %(Extension)        = item filename extension
                %(RelativeDir)      = item directory as given in item-spec
                %(Directory)        = full path of item directory relative to root
                %(RecursiveDir)     = portion of item path that matched a recursive wildcard
                %(Identity)         = item-spec as given
                %(ModifiedTime)     = last write time of item
                %(CreatedTime)      = creation time of item
                %(AccessedTime)     = last access time of item
            
            NOTES:
            1) This method always returns an empty string for the %(RecursiveDir) modifier because it does not have enough
               information to compute it -- only the BuildItem class can compute this modifier.
            2) The %(ModifiedTime), %(CreatedTime) and %(AccessedTime) modifiers are never cached because they are not constants.
            </summary>
            <remarks>
            Methods of the Path class "normalize" slashes and periods. For example:
            1) successive slashes are combined into 1 slash
            2) trailing periods are discarded
            3) forward slashes are changed to back-slashes
            
            As a result, we cannot rely on any file-spec that has passed through a Path method to remain the same. We will
            therefore not bother preserving slashes and periods when file-specs are transformed.
            </remarks>
            <owner>SumedhK</owner>
            <param name="currentDirectory">The root directory for relative item-specs. When called on the Engine thread, this is the project directory. When called as part of building a task, it is null, indicating that the current directory should be used.</param>
            <param name="itemSpec">The item-spec to modify.</param>
            <param name="modifier">The modifier to apply to the item-spec.</param>
            <param name="cachedModifiers">Cache of previously computed modifiers (if null, this method will create it unless the modifier cannot be cached).</param>
            <returns>The modified item-spec (can be empty string, but will never be null).</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the item-spec is not a path.</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.EnsureTrailingSlash(System.String)">
            <summary>
            If the given path doesn't have a trailing slash then add one.
            </summary>
            <param name="fileSpec">The path to check.</param>
            <returns>A path with a slash.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.EnsureNoLeadingSlash(System.String)">
            <summary>
            Ensures the path does not have a leading slash.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.EnsureNoTrailingSlash(System.String)">
            <summary>
            Ensures the path does not have a trailing slash.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.EndsWithSlash(System.String)">
            <summary>
            Indicates if the given file-spec ends with a slash.
            </summary>
            <owner>SumedhK</owner>
            <param name="fileSpec">The file spec.</param>
            <returns>true, if file-spec has trailing slash</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.IsSlash(System.Char)">
            <summary>
            Indicates if the given character is a slash. 
            </summary>
            <owner>SumedhK</owner>
            <param name="c"></param>
            <returns>true, if slash</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.TrimAndStripAnyQuotes(System.String)">
            <summary>
            Trims the string and removes any double quotes around it.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.GetFullPath(System.String,System.String)">
            <summary>
            Determines the full path for the given file-spec.
            </summary>
            <owner>SumedhK</owner>
            <param name="fileSpec">The file spec to get the full path of.</param>
            <param name="currentDirectory"></param>
            <returns>full path</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.GetDirectory(System.String)">
            <summary>
            Extracts the directory from the given file-spec.
            </summary>
            <owner>SumedhK</owner>
            <param name="fileSpec">The filespec.</param>
            <returns>directory path</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.HasExtension(System.String,System.String[])">
            <summary>
            Determines whether the given assembly file name has one of the listed extensions.
            </summary>
            <param name="fileName">The name of the file</param>
            <param name="allowedExtensions">Array of extensions to consider.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.FileUtilities.executablePath">
            <summary>
            Cached path to the current exe
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.FileUtilities.CurrentExecutablePath">
            <summary>
            Full path to the current exe (for example, msbuild.exe) including the file name
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.FileUtilities.CurrentExecutableDirectory">
            <summary>
            Full path to the directory that the current exe (for example, msbuild.exe) is located in
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.FileUtilities.CurrentExecutableConfigurationFilePath">
            <summary>
            Full path to the current config file (for example, msbuild.exe.config)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.GetFileInfoNoThrow(System.String)">
            <summary>
            Gets a file info object for the specified file path. If the file path
            is invalid, or is a directory, or cannot be accessed, or does not exist,
            it returns null rather than throwing or returning a FileInfo around a non-existent file. 
            This allows it to be called where File.Exists() (which never throws, and returns false
            for directories) was called - but with the advantage that a FileInfo object is returned
            that can be queried (e.g., for LastWriteTime) without hitting the disk again.
            </summary>
            <param name="path"></param>
            <returns>FileInfo around path if it is an existing /file/, else null</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.GetCurrentDirectoryStaticBuffer(System.Text.StringBuilder)">
            <summary>
            Gets the current directory using a static buffer to cut down on allocations and permission checking.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.IsVCProjFilename(System.String)">
            <summary>
            Returns true if the specified filename is a VC++ project file, otherwise returns false
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.MakeRelative(System.String,System.String)">
            <summary>
            Given the absolute location of a file, and a disc location, returns relative file path to that disk location. 
            Throws UriFormatException.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.  
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path.
            If the path cannot be made relative to the base path (for example, it is on another drive), it is returned verbatim.
            If the basePath is an empty string, returns the path.
            </param>
            <returns>relative path (can be the full path)</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FileUtilities.CreateUriFromPath(System.String)">
            <summary>
            Helper function to create an Uri object from path.
            </summary>
            <param name="path">path string</param>
            <returns>uri object</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FileUtilitiesRegex">
            <summary>
            This class contains utility methods for file IO.
            Separate from FileUtilities because some assemblies may only need the patterns.
            PERF\COVERAGE NOTE: Try to keep classes in 'shared' as granular as possible. All the methods in 
            each class get pulled into the resulting assembly.
            </summary>
            <owner>SumedhK, JomoF</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper">
            <summary>
            FrameworkLocationHelper provides utility methods for locating .NET Framework and .NET Framework SDK directories and files
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.programFiles">
            <summary>
            By default when a root path is not specified we would like to use the program files directory \ reference assemblies\framework as the root location
            to generate the reference assembly paths from.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.GenerateReferenceAssemblyDirectory(System.String)">
            <summary>
            Will return the path to the dot net framework reference assemblies if they exist under the program files\reference assembies\microsoft\framework directory
            or null if the directory does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.FindRegistryValueUnderKey(System.String,System.String)">
            <summary>
            Look for the given registry value under the given key.
            </summary>
            <owner>JomoF,LukaszG</owner>
            <param name="registryBaseKeyName"></param>
            <param name="registryKeyName"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.CheckForFrameworkInstallation(System.String,System.String)">
            <summary>
            Check the registry key and value to see if the .net Framework is installed on the machine.
            </summary>
            <param name="registryEntryToCheckInstall">Registry path to look for the value</param>
            <param name="registryValueToCheckInstall">Key to retreive the value from</param>
            <returns>True if the registry key is 1 false if it is not there. This method also return true if the complus enviornment variables are set.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.FindDotNetFrameworkPath(System.String,System.String,Microsoft.Build.BuildEngine.Shared.GetDirectories)">
            <summary>
            Heuristic that first considers the current runtime path and then searches the base of that path for the given
            frameworks version.
            </summary>
            <owner>JomoF</owner>
            <param name="currentRuntimePath">The path to the runtime that is currently executing.</param>
            <param name="prefix">Should be something like 'v1.2' that indicates the runtime version we want.</param>
            <param name="frameworkVersion">Should be the full version number of the runtime version we want.</param>
            <param name="getDirectories">Delegate to method that can return filesystem entries.</param>
            <param name="useHeuristic">Whether we should fall back to a search heuristic if other searches fail.</param>
            <returns>Will return 'null' if there is no target frameworks on this machine.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.GenerateProgramFiles32">
            <summary>
            Determine the 32 bit program files directory, this is used for finding where the reference assemblies live.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper.GenerateProgramFilesReferenceAssemblyRoot">
            <summary>
            Generate the path to the program files reference assembly location by taking in the program files special folder and then 
            using that path to generate the path to the reference assemblies location.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.InternalErrorException">
            <summary>
            This exception is to be thrown whenever an assumption we have made in the code turns out to be false. Thus, if this
            exception ever gets thrown, it is because of a bug in our own code, not because of something the user or project author
            did wrong.
            
            !~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~
            WARNING: When this file is shared into multiple assemblies each assembly will view this as a different type.
                     Don't throw this exception from one assembly and catch it in another.
            !~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~
                
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.InternalErrorException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.InternalErrorException.#ctor(System.String)">
            <summary>
            Creates an instance of this exception using the given message.
            </summary>
            <owner>RGoel</owner>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this exception using the given message and inner exception.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor used for (de)serialization. The constructor is private as this class is sealed
            If we ever add new members to this class, we'll need to update this.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.LoadedType">
            <summary>
            This class packages information about a type loaded from an assembly: for example,
            the GenerateResource task class type or the ConsoleLogger logger class type.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.LoadedType.#ctor(System.Type,Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo)">
            <summary>
            Creates an instance of this class for the given type.
            </summary>
            <owner>SumedhK</owner>
            <param name="type"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.LoadedType.GetNamesOfPropertiesWithRequiredAttribute">
            <summary>
            Gets the list of names of public instance properties that have the required attribute applied.
            Caches the result - since it can't change during the build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.LoadedType.GetNamesOfPropertiesWithOutputAttribute">
            <summary>
            Gets the list of names of public instance properties that have the output attribute applied.
            Caches the result - since it can't change during the build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.LoadedType.GetProperty(System.String)">
            <summary>
            Get the cached propertyinfo of the given name
            </summary>
            <param name="propertyName">property name</param>
            <returns>PropertyInfo</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.LoadedType.PopulatePropertyInfoCache">
            <summary>
            Populate the cache of PropertyInfos for this type
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.LoadedType.HasLoadInSeparateAppDomainAttribute">
            <summary>
            Gets whether there's a LoadInSeparateAppDomain attribute on this type.
            Caches the result - since it can't change during the build.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.LoadedType.Type">
            <summary>
            Gets the type that was loaded from an assembly.
            </summary>
            <owner>SumedhK</owner>
            <value>The loaded type.</value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.LoadedType.Assembly">
            <summary>
            Gets the assembly the type was loaded from.
            </summary>
            <owner>SumedhK</owner>
            <value>The assembly info for the loaded type.</value>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.NativeMethods">
            <summary>
            Interop methods.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.NativeMethods.MAX_PATH">
            <summary>
            Default buffer size to use when dealing with the Windows API.
            </summary>
            <remarks>
            This member is intentionally not a constant because we want to allow
            unit tests to change it.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.NativeMethods.FindOnPath(System.String)">
            <summary>
            Looks for the given file in the system path i.e. all locations in
            the %PATH% environment variable.
            </summary>
            <param name="filename"></param>
            <returns>The location of the file, or null if file not found.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.NativeMethods.GetOEMCP">
            <summary>
            Gets the current OEM code page which is used by console apps 
            (as opposed to the Windows/ANSI code page used by the normal people)
            Basically for each ANSI code page (set in Regional settings) there's a corresponding OEM code page 
            that needs to be used for instance when writing to batch files
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.NativeMethods.GetModuleFileName(System.Runtime.InteropServices.HandleRef,System.Text.StringBuilder,System.Int32)">
            <summary>
            Gets the fully qualified filename of the currently executing .exe
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ProjectConfigurationInSolution">
            <summary>
            This class represents an entry for a project configuration in a solution configuration.
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectConfigurationInSolution.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="configurationName"></param>
            <param name="platformName"></param>
            <param name="includeInBuild"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.ProjectConfigurationInSolution.IncludeInBuild">
            <summary>
            true if this project configuration should be built as part of its parent solution configuration
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectConfigurationInSolution.RemoveSpaceFromAnyCpuPlatform(System.String)">
            <summary>
            This is a hacky method to remove the space in the "Any CPU" platform in project configurations.
            The problem is that this platform is stored as "AnyCPU" in project files, but the project system
            reports it as "Any CPU" to the solution configuration manager. Because of that all solution configurations
            contain the version with a space in it, and when we try and give that name to actual projects, 
            they have no clue what we're talking about. We need to remove the space in project platforms so that
            the platform name matches the one used in projects.
            </summary>
            <param name="platformName"></param>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and
            validation of project files.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.Xml.XmlNode,System.String)">
            <summary>
            This method is used to flag errors in the project file being processed.
            Do NOT use this method in place of ErrorUtilities.VerifyThrow(), because
            ErrorUtilities.VerifyThrow() is used to flag internal/programming errors.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.ThrowInvalidProject(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.ThrowInvalidProject(System.Xml.XmlNode,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.Xml.XmlNode,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.Xml.XmlNode,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Overload for three string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.Xml.XmlNode,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Overload for four string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.String,System.Xml.XmlNode,System.String)">
            <summary>
            This method is used to flag errors in the project file being processed.
            Do NOT use this method in place of ErrorUtilities.VerifyThrow(), because
            ErrorUtilities.VerifyThrow() is used to flag internal/programming errors.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="errorSubCategoryResourceName">The resource string for the
            error sub-category (can be null).</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.String,System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            Overload for one string format argument.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="errorSubCategoryResourceName">The resource string for the
            error sub-category (can be null).</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.String,System.Xml.XmlNode,System.String,System.Object,System.Object)">
            <summary>
            Overload for two string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="errorSubCategoryResourceName">The resource string for the
            error sub-category (can be null).</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.String,System.Xml.XmlNode,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Overload for three string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="errorSubCategoryResourceName">The resource string for the
            error sub-category (can be null).</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.VerifyThrowInvalidProject(System.Boolean,System.String,System.Xml.XmlNode,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Overload for four string format arguments.
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="errorSubCategoryResourceName">The resource string for the
            error sub-category (can be null).</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities.ThrowInvalidProject(System.String,System.Xml.XmlNode,System.String,System.Object[])">
            <summary>
            Throws an InvalidProjectFileException using the given data.
            
            PERF WARNING: calling a method that takes a variable number of arguments
            is expensive, because memory is allocated for the array of arguments -- do
            not call this method repeatedly in performance-critical scenarios
            </summary>
            <owner>SumedhK</owner>
            <param name="errorSubCategoryResourceName">The resource string for the
            error sub-category (can be null).</param>
            <param name="xmlNode">The invalid project node (can be null).</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="args">Extra arguments for formatting the error message.</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ProjectFileErrorUtilities">
            <summary>
            This class contains methods that are useful for error checking and validation of project files.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(System.Boolean,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            This method is used to flag errors in the project file being processed. Do NOT use this method in place of
            ErrorUtilities.VerifyThrow(), because ErrorUtilities.VerifyThrow() is used to flag internal/programming errors.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="projectFile">The invalid project file.</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="args">Extra arguments for formatting the error message.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(System.Boolean,System.String,Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo,System.String,System.Object[])">
            <summary>
            This method is used to flag errors in the project file being processed. Do NOT use this method in place of
            ErrorUtilities.VerifyThrow(), because ErrorUtilities.VerifyThrow() is used to flag internal/programming errors.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <owner>SumedhK</owner>
            <param name="condition">The condition to check.</param>
            <param name="errorSubCategoryResourceName">The resource string for the error sub-category (can be null).</param>
            <param name="projectFile">The invalid project file.</param>
            <param name="resourceName">The resource string for the error message.</param>
            <param name="args">Extra arguments for formatting the error message.</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.SolutionProjectType">
            <remarks>
            An enumeration defining the different types of projects we might find in an SLN.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ProjectInSolution">
            <remarks>
            This class represents a project (or SLN folder) that is read in from a solution file.
            </remarks>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.charsToCleanse">
            <summary>
            Characters that need to be cleansed from a project name.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.projectNamesToDisambiguate">
            <summary>
            Project names that need to be disambiguated when forming a target name
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.cleanCharacter">
            <summary>
            Character that will be used to replace 'unclean' ones.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.projectConfigurations">
            <summary>
            The project configuration in given solution configuration
            K: full solution configuration name (cfg + platform)
            V: project configuration 
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.AbsolutePath">
            <summary>
            Returns the absolute path for this project
            </summary>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.CanBeMSBuildProjectFile(System.String@)">
            <summary>
            Looks at the project file node and determines (roughly) if the project file is in the MSBuild format.
            The results are cached in case this method is called multiple times.
            </summary>
            <param name="errorMessage">Detailed error message in case we encounter critical problems reading the file</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.GetUniqueProjectName">
            <summary>
            Find the unique name for this project, e.g. SolutionFolder\SubSolutionFolder\ProjectName
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.CleanseProjectName(System.String)">
            <summary>
            Cleanse the project name, by replacing characters like '@', '$' with '_'
            </summary>
            <param name="projectName">The name to be cleansed</param>
            <returns>string</returns>
            <owner>KieranMo</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectInSolution.DisambiguateProjectTargetName(System.String)">
            <summary>
            If the unique project name provided collides with one of the standard Solution project
            entry point targets (Build, Rebuild, Clean, Publish), then disambiguate it by prepending the string "Solution:"
            </summary>
            <param name="uniqueProjectName">The unique name for the project</param>
            <returns>string</returns>
            <owner>KieranMo</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ProjectWriter">
            <summary>
            This class is used to save MSBuild project files. It contains special handling for MSBuild notations that are not saved
            correctly by the XML DOM's default save mechanism.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of this class using the specified TextWriter.
            </summary>
            <owner>SumedhK</owner>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates an instance of this class using the specified stream and encoding.
            </summary>
            <owner>SumedhK</owner>
            <param name="w"></param>
            <param name="encoding">If null, defaults to UTF-8 and omits encoding attribute from processing instruction.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates an instance of this class using the specified file.
            </summary>
            <owner>SumedhK</owner>
            <param name="filename"></param>
            <param name="encoding">If null, defaults to UTF-8 and omits encoding attribute from processing instruction.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.Initialize(System.Xml.XmlDocument,System.Xml.XmlDeclaration)">
            <summary>
            Initializes settings for the project to be saved.
            </summary>
            <owner>SumedhK</owner>
            <param name="project"></param>
            <param name="projectXmlDeclaration">If null, XML declaration is not written.</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.WriteStartDocument">
            <summary>
            Writes the XML declaration only if the project being saved already has an XML declaration.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the XML declaration only if the project being saved already has an XML declaration.
            </summary>
            <owner>SumedhK</owner>
            <param name="standalone"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ProjectWriter.WriteString(System.String)">
            <summary>
            Writes item vector transforms embedded in the given string without escaping '->' into "-&amp;gt;".
            </summary>
            <owner>SumedhK</owner>
            <param name="text"></param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.ResourceUtilities">
            <summary>
            This class contains utility methods for dealing with resources.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ResourceUtilities.ExtractMessageCode(System.Text.RegularExpressions.Regex,System.String,System.String@)">
            <summary>
            Extracts the message code (if any) prefixed to the given string. If a message code pattern is not supplied, the
            MSBuild message code pattern is used by default. The message code pattern must contain two named capturing groups
            called "CODE" and "MESSAGE" that identify the message code and the message respectively.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="messageCodePattern">The Regex used to find the message code (can be null).</param>
            <param name="messageWithCode">The string to parse.</param>
            <param name="code">[out] The message code, or null if there was no code.</param>
            <returns>The string without its message code prefix.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ResourceUtilities.GetHelpKeyword(System.String)">
            <summary>
            Retrieves the MSBuild F1-help keyword for the given resource string. Help keywords are used to index help topics in
            host IDEs.
            </summary>
            <owner>SumedhK</owner>
            <param name="resourceName">Resource string to get the MSBuild F1-keyword for.</param>
            <returns>The MSBuild F1-help keyword string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ResourceUtilities.FormatResourceString(System.String@,System.String@,System.String,System.Object[])">
            <summary>
            Loads the specified string resource and formats it with the arguments passed in. If the string resource has an MSBuild
            message code and help keyword associated with it, they too are returned.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="code">[out] The MSBuild message code, or null.</param>
            <param name="helpKeyword">[out] The MSBuild F1-help keyword for the host IDE, or null.</param>
            <param name="resourceName">Resource string to load.</param>
            <param name="args">Optional arguments for formatting the resource string.</param>
            <returns>The formatted resource string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ResourceUtilities.FormatResourceString(System.String,System.Object[])">
            <summary>
            Looks up a string in the resources, and formats it with the arguments passed in. If the string resource has an MSBuild
            message code and help keyword associated with it, they are discarded.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="resourceName">Resource string to load.</param>
            <param name="args">Optional arguments for formatting the resource string.</param>
            <returns>The formatted resource string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ResourceUtilities.FormatString(System.String,System.Object[])">
            <summary>
            Formats the given string using the variable arguments passed in.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>SumedhK</owner>
            <param name="unformatted">The string to format.</param>
            <param name="args">Optional arguments for formatting the given string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.ResourceUtilities.VerifyResourceStringExists(System.String)">
            <summary>
            Verifies that a particular resource string actually exists in the string table. This will only be called in debug
            builds. It helps catch situations where a dev calls VerifyThrowXXX with a new resource string, but forgets to add the
            resource string to the string table, or misspells it!
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <owner>RGoel</owner>
            <param name="resourceName">Resource string to check.</param>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.SolutionParser">
            <remarks>
            This class contains the functionality to parse a solution file and return a corresponding
            MSBuild project file containing the projects and dependencies defined in the solution.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.#ctor">
            <summary>
            Constructor
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.SolutionParserWarnings">
            <summary>
            This property returns the list of warnings that were generated during solution parsing
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.SolutionParserComments">
            <summary>
            This property returns the list of comments that were generated during the solution parsing
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.SolutionParserErrorCodes">
            <summary>
            This property returns the list of error codes for warnings/errors that were generated during solution parsing. 
            UNIT TESTING ONLY
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.Version">
            <summary>
            Returns the actual major version of the parsed solution file
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.ContainsWebProjects">
            <summary>
            Returns true if the solution contains any web projects
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.ProjectsInOrder">
            <summary>
            All projects in this solution, in the order they appeared in the solution file
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.ProjectsByGuid">
            <summary>
            The collection of projects in this solution, accessible by their guids
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.SolutionFile">
            <summary>
            This is the read/write accessor for the solution file which we will parse.  This
            must be set before calling any other methods on this class.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.SolutionReader">
            <summary>
            For unit-testing only.
            </summary>
            <value></value>
            <owner>RGoel</owner>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.Projects">
            <summary>
            For unit-testing only.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.SolutionParser.SolutionConfigurations">
            <summary>
            The list of all full solution configurations (configuration + platform) in this solution
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ReadLine">
            <summary>
            Reads a line from the StreamReader, trimming leading and trailing whitespace.
            </summary>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseSolutionFile">
            <summary>
            This method takes a path to a solution file, parses the projects and project dependencies
            in the solution file, and creates internal data structures representing the projects within
            the SLN.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseSolution">
            <summary>
            Parses the SLN file represented by the StreamReader in this.reader, and populates internal
            data structures based on the SLN file contents.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseFileHeader">
            <summary>
            This method searches the first two lines of the solution file opened by the specified
            StreamReader for the solution file header.  An exception is thrown if it is not found.
            
            The solution file header looks like this:
            
                Microsoft Visual Studio Solution File, Format Version 9.00
            
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ValidateSolutionFileVersion(System.String)">
            <summary>
            This method extracts the whole part of the version number from the specified line
            containing the solution file format header, and throws an exception if the version number
            is outside of the valid range.
            
            The solution file header looks like this:
            
                Microsoft Visual Studio Solution File, Format Version 9.00
            
            </summary>
            <param name="versionString"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseProject(System.String)">
             <summary>
             
             This method processes a "Project" section in the solution file opened by the specified
             StreamReader, and returns a populated ProjectInSolution instance, if successful.
             An exception is thrown if the solution file is invalid.
            
             The format of the parts of a Project section that we care about is as follows:
            
              Project("{Project type GUID}") = "Project name", "Relative path to project file", "{Project GUID}"
                  ProjectSection(ProjectDependencies) = postProject
                      {Parent project unique name} = {Parent project unique name}
                      ...
                  EndProjectSection
              EndProject
             
             </summary>
             <param name="firstLine"></param>
             <returns></returns>
             <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseEtpProject(Microsoft.Build.BuildEngine.Shared.ProjectInSolution)">
            <summary>
            This method will parse a .etp project recursively and 
            add all the projects found to projects and projectsInOrder
            </summary>
            <param name="etpProj">ETP Project</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.AddProjectToSolution(Microsoft.Build.BuildEngine.Shared.ProjectInSolution)">
            <summary>
            Adds a given project to the project collections of this class
            </summary>
            <param name="proj">proj</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.IsEtpProjectFile(System.String)">
            <summary>
            Checks whether a given project has a .etp extension.
            </summary>
            <param name="projectFile"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ValidateProjectRelativePath(Microsoft.Build.BuildEngine.Shared.ProjectInSolution)">
            <summary>
            Validate relative path of a project
            </summary>
            <param name="proj">proj</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseAspNetCompilerProperty(Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String,System.String)">
            <summary>
            Takes a property name / value that comes from the SLN file for a Venus project, and
            stores it appropriately in our data structures.
            </summary>
            <param name="proj"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.TrimQuotes(System.String)">
            <summary>
            Strips a single pair of leading/trailing double-quotes from a string.
            </summary>
            <param name="property"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseFirstProjectLine(System.String,Microsoft.Build.BuildEngine.Shared.ProjectInSolution)">
             <summary>
             Parse the first line of a Project section of a solution file. This line should look like:
            
              Project("{Project type GUID}") = "Project name", "Relative path to project file", "{Project GUID}"
             
             </summary>
             <param name="firstLine"></param>
             <param name="proj"></param>
             <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseNestedProjects">
            <summary>
            Read nested projects section.
            This is required to find a unique name for each project's target
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseSolutionConfigurations">
            <summary>
            Read solution configuration section. 
            </summary>
            <remarks>
            A sample section:
            
            GlobalSection(SolutionConfigurationPlatforms) = preSolution
                Debug|Any CPU = Debug|Any CPU
                Release|Any CPU = Release|Any CPU
            EndGlobalSection
            </remarks>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ParseProjectConfigurations">
            <summary>
            Read project configurations in solution configurations section.
            </summary>
            <remarks>
            A sample (incomplete) section:
            
            GlobalSection(ProjectConfigurationPlatforms) = postSolution
            	{6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
            	{6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Any CPU.Build.0 = Debug|Any CPU
            	{6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.ActiveCfg = Release|Any CPU
            	{6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.Build.0 = Release|Any CPU
            	{6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Win32.ActiveCfg = Debug|Any CPU
            	{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Any CPU.ActiveCfg = Release|Win32
            	{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Mixed Platforms.ActiveCfg = Release|Win32
            	{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Mixed Platforms.Build.0 = Release|Win32
            	{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Win32.ActiveCfg = Release|Win32
            	{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Win32.Build.0 = Release|Win32
            EndGlobalSection
            </remarks>
            <returns>An unprocessed hashtable of entries in this section</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.ProcessProjectConfigurationSection(System.Collections.Hashtable)">
            <summary>
            Read the project configuration information for every project in the solution, using pre-cached 
            solution section data. 
            </summary>
            <param name="rawProjectConfigurationsEntries">Cached data from the project configuration section</param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.GetDefaultConfigurationName">
            <summary>
            Gets the default configuration name for this solution. Usually it's Debug, unless it's not present
            in which case it's the first configuration name we find.
            </summary>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.GetDefaultPlatformName">
            <summary>
            Gets the default platform name for this solution. Usually it's Mixed Platforms, unless it's not present
            in which case it's the first platform name we find.
            </summary>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.GetProjectUniqueNameByGuid(System.String)">
            <summary>
            This method takes a string representing one of the project's unique names (guid), and
            returns the corresponding "friendly" name for this project.
            </summary>
            <param name="projectGuid"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.SolutionParser.GetProjectRelativePathByGuid(System.String)">
            <summary>
            This method takes a string representing one of the project's unique names (guid), and
            returns the corresponding relative path to this project.
            </summary>
            <param name="projectGuid"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.TypeLoader">
            <summary>
            This class is used to load types from their assemblies.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.TypeLoader.#ctor(System.Reflection.TypeFilter)">
            <summary>
            Constructor.
            </summary>
            <param name="isDesiredType"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.TypeLoader.Load(System.String,Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo)">
            <summary>
            Loads the specified type if it exists in the given assembly. If the type name is fully qualified, then a match (if
            any) is unambiguous; otherwise, if there are multiple types with the same name in different namespaces, the first type
            found will be returned.
            </summary>
            <remarks>This method throws exceptions -- it is the responsibility of the caller to handle them.</remarks>
            <owner>SumedhK</owner>
            <param name="typeName">Can be empty string.</param>
            <param name="assembly"></param>
            <returns>The loaded type, or null if the type was not found.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.TypeLoader.IsPartialTypeNameMatch(System.String,System.String)">
            <summary>
            Given two type names, looks for a partial match between them. A partial match is considered valid only if it occurs on
            the right side (tail end) of the name strings, and at the start of a class or namespace name.
            </summary>
            <remarks>
            1) Matches are case-insensitive.
            2) .NET conventions regarding namespaces and nested classes are respected, including escaping of reserved characters.
            </remarks>
            <example>
            "Csc" and "csc"                                                 ==> exact match
            "Microsoft.Build.Tasks.Csc" and "Microsoft.Build.Tasks.Csc"     ==> exact match
            "Microsoft.Build.Tasks.Csc" and "Csc"                           ==> partial match
            "Microsoft.Build.Tasks.Csc" and "Tasks.Csc"                     ==> partial match
            "MyTasks.ATask+NestedTask" and "NestedTask"                     ==> partial match
            "MyTasks.ATask\\+NestedTask" and "NestedTask"                   ==> partial match
            "MyTasks.CscTask" and "Csc"                                     ==> no match
            "MyTasks.MyCsc" and "Csc"                                       ==> no match
            "MyTasks.ATask\.Csc" and "Csc"                                  ==> no match
            "MyTasks.ATask\\\.Csc" and "Csc"                                ==> no match
            </example>
            <owner>SumedhK</owner>
            <param name="typeName1"></param>
            <param name="typeName2"></param>
            <returns>true, if the type names match exactly or partially; false, if there is no match at all</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.VisualStudioConstants">
            <summary>
            Shared Visual Studio related constants
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.VisualStudioConstants.CurrentVisualStudioSolutionFileVersion">
            <summary>
            This is the version number of the most recent solution file format
            we will read. It will be the version number used in solution files
            by the latest version of Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Shared.VisualStudioConstants.CurrentVisualStudioVersion">
            <summary>
            This is the version number of the latest version of Visual Studio.
            </summary>
            <remarks>
            We use it for the version of the VC PIA we try to load and to find
            Visual Studio registry hive that we use to find where vcbuild.exe might be.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.XMakeAttributes">
            <summary>
            Contains the names of the known attributes in the XML project file.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XMakeAttributes.IsSpecialTaskAttribute(System.String)">
            <summary>
            Returns true if and only if the specified attribute is one of the attributes that the engine specifically recognizes
            on a task and treats in a special way.
            </summary>
            <owner>SumedhK</owner>
            <param name="attribute"></param>
            <returns>true, if given attribute is a reserved task attribute</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XMakeAttributes.IsBadlyCasedSpecialTaskAttribute(System.String)">
            <summary>
            Checks if the specified attribute is a reserved task attribute with incorrect casing.
            </summary>
            <owner>SumedhK</owner>
            <param name="attribute"></param>
            <returns>true, if the given attribute is reserved and badly cased</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XMakeAttributes.IsNonBatchingTargetAttribute(System.String)">
            <summary>
            Indicates if the specified attribute cannot be used for batching targets.
            </summary>
            <owner>SumedhK</owner>
            <param name="attribute"></param>
            <returns>true, if a target cannot batch on the given attribute</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.XMakeElements">
            <summary>
            Contains the names of the known elements in the XML project file.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XMakeElements.IsValidTaskChildNode(System.Xml.XmlNode)">
            <summary>
            Indicates if the given node is valid as a child of a task element.
            </summary>
            <owner>SumedhK</owner>
            <param name="childNode"></param>
            <returns>true, if specified node can be a child of a task element</returns>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Shared.XMakeElements.IllegalItemPropertyNames">
            <summary>
            Read-only internal accessor for the hashtable containing
            MSBuild reserved item/property names (like "Choose", for example).
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Shared.XmlUtilities">
            <summary>
            This class contains utility methods for XML manipulation.
            </summary>
            <owner>SumedhK</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.RenameXmlElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            This method renames an XML element.  Well, actually you can't directly
            rename an XML element using the DOM, so what you have to do is create
            a brand new XML element with the new name, and copy over all the attributes
            and children.  This method returns the new XML element object.
            </summary>
            <param name="oldElement"></param>
            <param name="newElementName"></param>
            <param name="xmlNamespace">Can be null if global namespace.</param>
            <returns>new/renamed element</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.GetXmlNodeFile(System.Xml.XmlNode,System.String)">
            <summary>
            Retrieves the file that the given XML node was defined in. If the XML node is purely in-memory, it may not have a file
            associated with it, in which case the default file is returned.
            </summary>
            <owner>SumedhK</owner>
            <param name="node"></param>
            <param name="defaultFile">Can be empty string.</param>
            <returns>The path to the XML node's file, or the default file.</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.IsXmlRootElement(System.Xml.XmlNode)">
            <summary>
            An XML document can have many root nodes, but usually we want the single root 
            element. Callers can test each root node in turn with this method, until it returns
            true.
            </summary>
            <param name="node">Candidate root node</param>
            <returns>true if node is the root element</returns>
            <owner>danmose</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.VerifyThrowValidElementName(System.String)">
            <summary>
            Verifies that a name is valid for the name of an item, property, or piece of metadata.
            If it isn't, throws an ArgumentException indicating the invalid character.
            </summary>
            <remarks>
            Note that our restrictions are more stringent than the XML Standard's restrictions.
            </remarks>
            <throws>ArgumentException</throws>
            <param name="name">name to validate</param>
            <owner>danmose</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.VerifyThrowProjectValidElementName(System.Xml.XmlElement)">
            <summary>
            Verifies that a name is valid for the name of an item, property, or piece of metadata.
            If it isn't, throws an InvalidProjectException indicating the invalid character.
            </summary>
            <remarks>
            Note that our restrictions are more stringent than the XML Standard's restrictions.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.IsValidElementName(System.String)">
            <summary>
            Indicates if the given name is valid as the name of an item, property or metadatum.
            </summary>
            <remarks>
            Note that our restrictions are more stringent than those of the XML Standard.
            </remarks>
            <owner>SumedhK</owner>
            <param name="name"></param>
            <returns>true, if name is valid</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.LocateFirstInvalidElementNameCharacter(System.String)">
            <summary>
            Finds the location of the first invalid character, if any, in the name of an 
            item, property, or piece of metadata. Returns the location of the first invalid character, or -1 if there are none. 
            Valid names must match this pattern:  [A-Za-z_][A-Za-z_0-9\-.]*
            Note, this is a subset of all possible valid XmlElement names: we use a subset because we also
            have to match this same set in our regular expressions, and allowing all valid XmlElement name
            characters in a regular expression would be impractical.
            </summary>
            <remarks>
            Note that our restrictions are more stringent than the XML Standard's restrictions.
            PERF: This method has to be as fast as possible, as it's called when any item, property, or piece
            of metadata is constructed.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.Shared.XmlUtilities.GetAttributeValueForElementFromFile(System.String,System.String,System.String)">
            <summary>
            Load the xml file using XMLTextReader and locate the element and attribute specified and then 
            return the value. This is a quick way to peek at the xml file whithout having the go through 
            the XMLDocument (MSDN article (Chapter 9 - Improving XML Performance)).
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ReservedPropertyNames">
            <summary>
            Contains a list of the special (reserved) properties that are settable by MSBuild code only.
            </summary>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ReservedPropertyNames.IsReservedProperty(System.String)">
            <summary>
            Indicates if the given property is a reserved property.
            </summary>
            <owner>SumedhK</owner>
            <param name="property"></param>
            <returns>true, if specified property is reserved</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.Constants">
            <summary>
            Constants used by the Engine
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Constants.defaultToolsVersion">
            <summary>
            If no default tools version is specified in the config file or registry, we'll use 2.0.
            The engine will use its binpath for the matching toolset path.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.Constants.defaultFallbackToolsVersion">
            <summary>
            The toolsversion we will fall back to as a last resort if the default one cannot be found, this fallback should be the most current toolsversion known
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.Constants.AssemblyVersion">
            <summary>
            Current version of this MSBuild Engine assembly in the 
            form, e.g, "4.0"
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.FunctionConstants">
            <summary>
            Function related constants.
            </summary>
            <remarks>
            Placed here to avoid StyleCop error.
            </remarks>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.FunctionConstants.availableStaticMethods">
            <summary>
            Static methods that are allowed in constants. Key = Type or Type::Method, Value = AssemblyQualifiedTypeName (where null = mscorlib)
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.FunctionConstants.AvailableStaticMethods">
            <summary>
            The set of available static methods.
            NOTE: Do not allow methods here that could do "bad" things under any circumstances.
            These must be completely benign operations, as they run during project load, which must be safe in VS.
            Key = Type or Type::Method, Value = AssemblyQualifiedTypeName (where null = mscorlib)
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FunctionConstants.Reset_ForUnitTestsOnly">
            <summary>
            Re-initialize.
            Unit tests need this when they enable "unsafe" methods -- which will then go in the collection,
            and mess up subsequent tests.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.FunctionConstants.InitializeAvailableMethods">
            <summary>
            Fill up the dictionary for first use
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.SolutionWrapperProject">
            <summary>
            This class is used to generate an MSBuild wrapper project for a solution file or standalone VC project.
            </summary>
            <owner>LukaszG, RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.Generate(System.String,System.String,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Given the full path to a solution, returns a string containing the v3.5 MSBuild-format
            wrapper project for that solution.  
            </summary>
            <param name="solutionPath">Full path to the solution we are wrapping</param>
            <param name="toolsVersionOverride">May be null.  If non-null, contains the ToolsVersion passed in on the command line</param>\
            <param name="projectBuildEventContext">An event context for logging purposes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.Generate(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Project,System.String,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            This method generates an XmlDocument representing an MSBuild project file from the list of
            projects and project dependencies that have been collected from the solution file.
            </summary>
            <param name="solution"></param>
            <param name="msbuildProject"></param>
            <param name="toolsVersionOverride">Tools Version override (may be null). 
            Any /tv:xxx switch would cause a value here.</param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.LoadCache(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Project,Microsoft.Build.Framework.BuildEventContext,System.String,Microsoft.Build.BuildEngine.Engine,System.String)">
            <summary>
            Attempts to load the solution cache if any into the project provided. Returns null if no attempt was made to load the cache,
            false if it was loaded but could not be used, or true if it was loaded and can be used.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.UpdateCache(Microsoft.Build.BuildEngine.Engine,Microsoft.Build.BuildEngine.Project,System.String,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Attempt to save a new, updated solution cache file.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.IsSolutionCacheEnabled">
            <summary>
            Determine whether solution file caches are enabled. If the environment variable "MSBuildUseNoSolutionCache" is
            NOT defined, they are enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.IsCacheUpToDate(Microsoft.Build.BuildEngine.Engine,System.String,System.String,Microsoft.Build.BuildEngine.Project,Microsoft.Build.Framework.BuildEventContext,System.String,System.String)">
            <summary>
            Given a cache loaded into a project, determines whether it is up to date with respect to the projects and the solution file listed
            with it, and was created with the same configuration/platform and tools version values as the ones currently in use.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.CreateNewProject(Microsoft.Build.BuildEngine.Shared.SolutionParser,System.String,Microsoft.Build.BuildEngine.Engine,Microsoft.Build.BuildEngine.Project)">
            <summary>
            Create a new project to construct a solution wrapper cache inside
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.CreateSolutionProject(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Project,Microsoft.Build.Framework.BuildEventContext,System.String,Microsoft.Build.BuildEngine.Engine,System.String)">
            <summary>
            Given an empty project and a solution, create a new solution project from the solution.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddCacheRelatedProperties(Microsoft.Build.BuildEngine.Project,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Adds properties indicating the current solution configuration and tools version into the solution project.
            Also lists all the projects in the solution, as items.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.DetermineWrapperProjectToolsVersion(System.String)">
            <summary>
            Figure out what tools version to build the solution wrapper project with. If a /tv
            switch was passed in, use that; otherwise fall back to the default (4.0).
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.DetermineChildProjectToolsVersion(Microsoft.Build.BuildEngine.Engine,System.String)">
            <summary>
            We have to know the child projects' tools version in order to know what tools version to use when
            scanning them for dependencies. If $(ProjectToolsVersion) is defined, we use that; otherwise
            fall back on the tools version of the solution wrapper project.
            </summary>
            <param name="parentEngine"></param>
            <param name="toolsVersionOverride"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddMSBuildTaskElement(Microsoft.Build.BuildEngine.Target,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds an MSBuild task to the specified target
            </summary>
            <param name="target"></param>
            <param name="projectPath"></param>
            <param name="msbuildTargetName"></param>
            <param name="configurationName"></param>
            <param name="platformName"></param>
            <returns></returns>
            <owner>RGoel, LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTargetForManagedProject(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String,System.String)">
            <summary>
            Add a target for a project into the XML doc that's being generated.
            </summary>
            <param name="msbuildProject"></param>
            <param name="solution"></param>
            <param name="proj"></param>
            <param name="targetOutputItemName">The name of the item exposing this target's outputs.  May be null.</param>        
            <param name="subTargetName"></param>
            <owner>RGoel, LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddResolveVCProjectOutputTaskElement(Microsoft.Build.BuildEngine.Target,System.String,System.String,System.String)">
            <summary>
            Adds a new ResolveVCProjectOutput task element to the specified target
            </summary>
            <param name="target"></param>
            <param name="solutionPath"></param>
            <param name="projectPath"></param>
            <param name="fullConfigurationName"></param>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddResolveProjectReferenceTasks(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution,System.String,System.String,System.String@)">
            <summary>
            Adds MSBuild and ResolveVCProjectOutput tasks to a project target to pre-resolve its project references
            </summary>
            <param name="solution"></param>
            <param name="target"></param>
            <param name="proj"></param>
            <param name="solutionConfiguration"></param>
            <param name="outputReferenceItemName"></param>
            <param name="outputImportLibraryItemName"></param>
            <param name="addedReferenceGuids"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddCreateTemporaryVCProjectTasks(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution,System.String,System.String)">
            <summary>
            Adds tasks that create a temporary VC project file with pre-resolved project references (that is,
            replaced with file references)
            </summary>
            <param name="solution"></param>
            <param name="target"></param>
            <param name="proj"></param>
            <param name="solutionConfiguration"></param>
            <param name="subTargetName"></param>
            <param name="projectConfigurationName"></param>
            <returns>The path to the temporary project file</returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTargetForVCProject(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String)">
            <summary>
            Add a target for a project into the XML doc that's being generated.
            </summary>
            <param name="msbuildProject"></param>
            <param name="solution"></param>
            <param name="proj"></param>
            <param name="subTargetName"></param>
            <owner>LukaszG, RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTargetForGetFrameworkPathAndRedistList(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Add a target to the project called "GetFrameworkPathAndRedistList".  This target calls the
            GetFrameworkPath task and then CreateItem to populate @(_CombinedTargetFrameworkDirectoriesItem) and
            @(InstalledAssemblyTables), so that we can pass these into the ResolveAssemblyReference task
            when building web projects.
            </summary>
            <param name="msbuildProject"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTaskForAspNetCompiler(Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String)">
            <summary>
            Helper method to add a call to the AspNetCompiler task into the given target.
            </summary>
            <param name="target"></param>
            <param name="proj"></param>
            <param name="conditionDescribingValidConfigurations"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTasksToCopyAllDependenciesIntoBinDir(Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String,System.String)">
            <summary>
            Add a call to the ResolveAssemblyReference task to crack the pre-resolved referenced 
            assemblies for the complete list of dependencies, PDBs, satellites, etc.  The invoke
            the Copy task to copy all these files (or at least the ones that RAR determined should
            be copied local) into the web project's bin directory.
            </summary>
            <param name="target"></param>
            <param name="proj"></param>
            <param name="referenceItemName"></param>
            <param name="conditionDescribingValidConfigurations"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddPropertyGroupForAspNetConfiguration(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String,Microsoft.Build.BuildEngine.Shared.AspNetCompilerParameters,System.String)">
            <summary>
            Add a PropertyGroup to the project for a particular Asp.Net configuration.  This PropertyGroup
            will have the correct values for all the Asp.Net properties for this project and this configuration.
            </summary>
            <param name="msbuildProject"></param>
            <param name="proj"></param>
            <param name="configurationName"></param>
            <param name="aspNetCompilerParameters"></param>
            <param name="solutionFile"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTasksToResolveAutoRefreshFileReferences(Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String)">
            <summary>
            This code handles the *.REFRESH files that are in the "bin" subdirectory of 
            a web project.  These .REFRESH files are just text files that contain absolute or 
            relative paths to the referenced assemblies.  The goal of these tasks is to 
            search all *.REFRESH files and extract fully-qualified absolute paths for 
            each of the references.
            </summary>
            <param name="target"></param>
            <param name="proj"></param>
            <param name="referenceItemName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.ComputeTargetConditionForWebProject(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution)">
            <summary>
            When adding a target to build a web project, we want to put a Condition on the Target node that
            effectively says "Only build this target if the web project is active (marked for building) in the 
            current solution configuration.
            </summary>
            <param name="solution"></param>
            <param name="proj"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTargetForWebProject(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String)">
            <summary>
            Add a target for a Venus project into the XML doc that's being generated.  This
            target will call the AspNetCompiler task.
            </summary>
            <param name="msbuildProject"></param>
            <param name="solution"></param>
            <param name="proj"></param>
            <param name="subTargetName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.GenerateSafePropertyName(Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String)">
            <summary>
            Takes a project in the solution and a base property name, and creates a new property name
            that can safely be used as an XML element name, and is also unique to that project (by
            embedding the project's GUID into the property name.
            </summary>
            <param name="proj"></param>
            <param name="propertyName"></param>
            <returns>A safe property name that can be used as an XML element name.</returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.MakeIntoSafeItemName(System.String)">
            <summary>
            Makes a legal item name from a given string by replacing invalid characters with '_'
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddErrorWarningMessageElement(Microsoft.Build.BuildEngine.Target,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Add a new error/warning/message tag into the given target
            </summary>
            <param name="target">Destination target for the tag</param>
            <param name="elementType">Element type to add (Error, Warning, Message)</param>
            <param name="treatAsLiteral">Whether to treat the Text as a literal string or one that contains embedded properties, etc.</param>
            <param name="textResourceName">Resource string name to use in the tag text</param>
            <param name="args">Additional parameters to pass to FormatString</param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddTargetForUnknownProjectType(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String,System.String)">
            <summary>
            Emit warnings when the project type is unknown.
            </summary>
            <param name="msbuildProject">The project to add the target to</param>
            <param name="proj">The project to add as a target.</param>
            <param name="subTargetName">The target to call within the project that's being added.</param>
            <param name="errorMessage">Optional detailed error message to print out in case we already tried accessing the 
            project file before and failed.</param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddAllDependencyTarget(Microsoft.Build.BuildEngine.Project,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Build.BuildEngine.Shared.ProjectInSolution}})">
            <summary>
            Add a new target that depends on all targets. Examples of this are Clean and Rebuild.
            </summary>
            <param name="msbuildProject">The project to add the target to</param>
            <param name="targetName">The target name to add.</param>
            <param name="targetOutputItemName">The name of the item exposing this target's outputs.  May be null.</param>
            <param name="subTargetName">The target to call within the project that's being added.</param>
            <param name="projectsByDependencyLevel"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.GetProjectDependencies(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,System.String)">
            <summary>
            This method returns a string containing a semicolon-separated list of "friendly" project names
            on which the specified project depends.  If the null is specified, a list of all projects
            is returned.
            </summary>
            <param name="solution"></param>
            <param name="project"></param>
            <param name="subTargetName"></param>
            <returns></returns>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.GetAllNonMSBuildProjectDependencies(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Build.BuildEngine.Shared.ProjectInSolution}},System.Int32,System.String)">
            <summary>
            Get all projects for the given dependency level.
            </summary>
            <param name="projectsByDependencyLevel"></param>
            <param name="dependencyLevel"></param>
            <param name="subTargetName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.GetConditionStringForConfiguration(Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution)">
            <summary>
            A helper method for constructing conditions for a solution configuration
            </summary>
            <remarks>
            Sample configuration condition:
            '$(Configuration)' == 'Release' and '$(Platform)' == 'Any CPU'
            </remarks>
            <param name="configuration"></param>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddConfigurationPlatformDefaults(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser)">
            <summary>
            Creates default Configuration and Platform values based on solution configurations present in the solution
            </summary>
            <param name="msbuildProject"></param>
            <param name="solution"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddPropertyGroupForSolutionConfiguration(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution)">
            <summary>
            Adds a new property group with contents of the given solution configuration to the project
            Internal for unit-testing.
            </summary>
            <param name="msbuildProject"></param>
            <param name="solution"></param>
            <param name="solutionConfiguration"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddVenusConfigurationDefaults(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Creates the default Venus configuration property based on the selected solution configuration.
            Unfortunately, Venus projects only expose one project configuration in the IDE (Debug) although
            they allow building Debug and Release from command line. This means that if we wanted to use 
            the project configuration from the active solution configuration for Venus projects, we'd always
            end up with Debug and there'd be no way to build the Release configuration. To work around this,
            we use a special mechanism for choosing ASP.NET project configuration: we set it to Release if
            we're building a Release solution configuration, and to Debug if we're building a Debug solution 
            configuration. The property is also settable from the command line, in which case it takes 
            precedence over this algorithm.
            </summary>
            <param name="msbuildProject"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddGlobalProperties(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Shared.SolutionParser)">
            <summary>
            Adds solution related build event macros and other global properties to the wrapper project
            </summary>
            <param name="msbuildProject"></param>
            <param name="solution"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddFakeReleaseSolutionConfigurationIfNecessary(Microsoft.Build.BuildEngine.Shared.SolutionParser)">
            <summary>
            Special hack for web projects. It can happen that there is no Release configuration for solutions
            containing web projects, yet we still want to be able to build the Release configuration for 
            those projects. Since the ASP.NET project configuration defaults to the solution configuration,
            we allow Release even if it doesn't actually exist in the solution.
            </summary>
            <param name="solution"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddInitialTargets(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Adds the initial target to the solution wrapper project, necessary for a few message/error tags
            </summary>
            <param name="msbuildProject"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.PredictActiveSolutionConfigurationName(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Normally the active solution configuration/platform is determined when we build the solution
            wrapper project, not when we create it. However, we need to know them to scan project references
            for the right project configuration/platform. It's unlikely that references would be conditional, 
            but still possible and we want to get that case right.
            </summary>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.DetermineLikelyActiveSolutionConfiguration(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Figure out what solution configuration we are going to build, whether or not it actually exists in the solution
            file.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.ScanProjectDependencies(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Engine,System.String,System.String,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Loads each MSBuild project in this solution and looks for its project-to-project references so that
            we know what build order we should use when building the solution. 
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddDependencyByGuid(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution,Microsoft.Build.BuildEngine.Engine,Microsoft.Build.Framework.BuildEventContext,System.String)">
            <summary>
            Adds a dependency to the project based on the specified guid string.
            </summary>
            <remarks>
            If the string is null or empty, no dependency is added and this is not considered an error.
            </remarks>
            <param name="solution">The solution in which the project exists</param>
            <param name="project">The project to which the dependency will be added</param>
            <param name="parentEngine">The engine handling the conversion</param>
            <param name="projectBuildEventContext">The build event context</param>
            <param name="dependencyGuid">The guid, in string form, of the dependency project</param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.ConvertVcToVcDependenciesToReferences(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Engine,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            For MSBuild projects, project dependencies you can set in the IDE only represent build order constraints.
            If both projects are VC however, the VC project system treats dependencies as regular P2P references.
            This behavior is a carry-over from the days of VC5/6, that's how P2P refs were done back then. Tricky.
            To compensate for that, we need to add a P2P reference for every dependency between two VC projects. 
            MSBuild -> VC, VC -> MSBuild dependencies are not affected.
            </summary>
            <param name="solution"></param>
            <param name="parentEngine"></param>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AssignDependencyLevel(Microsoft.Build.BuildEngine.Shared.ProjectInSolution,Microsoft.Build.BuildEngine.Shared.SolutionParser,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Build.BuildEngine.Shared.ProjectInSolution}})">
            <summary>
            Figure out the dependency level of the given project.
            </summary>
            <param name="project"></param>
            <param name="solution"></param>
            <param name="projectsByDependencyLevel"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AssignDependencyLevels(Microsoft.Build.BuildEngine.Shared.SolutionParser,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.Build.BuildEngine.Shared.ProjectInSolution}})">
            <summary>
            Main entry point for figuring out the dependency levels. A dependency level is a set of projects that
            have no intra-dependencies and depend only on projects fron dependency level N-1. Dependency level 0
            projects have no dependencies whatsoever.
            </summary>
            <param name="solution"></param>
            <param name="projectsByDependencyLevel"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.AddVirtualReferencesForStaticLibraries(Microsoft.Build.BuildEngine.Shared.SolutionParser)">
            <summary>
            Add virtual references for reference chains containing VC static library projects. 
            Since static libraries have no link step, any references they have have to be passed
            to their parent project, if any. So for example, in a chain like
            native dll -> native static lib1 -> native static lib2
            we need to add a virtual reference between the native dll and the static lib2 
            to maintain parity with the IDE behavior.
            </summary>
            <param name="solution"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.SolutionWrapperProject.GatherChildReferencesForStaticLibraries(Microsoft.Build.BuildEngine.Shared.SolutionParser,Microsoft.Build.BuildEngine.Shared.ProjectInSolution)">
            <summary>
            Recursive helper for AddVirtualReferencesForStaticLibraries
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCProjectParser.GetReferencedProjectGuids(System.Xml.XmlDocument)">
            <summary>
            For a given VC project, retrieves the projects it references 
            </summary>
            <param name="projectPath"></param>
            <returns></returns>
            <owner>LukaszG</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCProjectParser.IsStaticLibrary(System.Xml.XmlDocument,System.String)">
            <summary>
            Is the project built as a static library for the given configuration?
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCWrapperProject.AddVCBuildTarget(Microsoft.Build.BuildEngine.Project,System.String,System.String,System.String)">
            <summary>
            Add a target for a VC project file into the XML doc that's being generated.
            This is used only when building standalone VC projects
            </summary>
            <param name="msbuildProject"></param>
            <param name="projectPath"></param>
            <param name="targetName"></param>
            <param name="subTargetName"></param>
            <owner>RGoel</owner>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCWrapperProject.AddVCBuildTaskElement(Microsoft.Build.BuildEngine.Project,Microsoft.Build.BuildEngine.Target,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new VCBuild task element to the specified target
            </summary>
            <param name="target">The target to add the VCBuild task to</param>
            <param name="solutionPath">Path to the solution if any</param>
            <param name="projectPath">Path to the solution if any</param>
            <param name="vcbuildTargetName">The VCBuild target name</param>
            <param name="platformName">The platform parameter to VCBuild</param>
            <param name="fullConfigurationName">Configuration property value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCWrapperProject.GenerateVCWrapperProject(Microsoft.Build.BuildEngine.Engine,System.String,System.String)">
            <summary>
            This method generates an XmlDocument representing an MSBuild project wrapper for a VC project
            </summary>
            <owner>LukaszG</owner>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.VCWrapperProject.path">
            <summary>
            Hint to give the VCBuild task to help it find vcbuild.exe.
            </summary>
        </member>
        <member name="P:Microsoft.Build.BuildEngine.VCWrapperProject.VCBuildLocationHint">
            <summary>
            Hint to give the VCBuild task to help it find vcbuild.exe.
            Directory in which vcbuild.exe is found.
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.VCWrapperProject.vs9RegKey">
            <summary>
            constants for VS9 Pro and above SKUs
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.VCWrapperProject.vc9RegKey">
            <summary>
            constants for the VC9 Express SKU
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCWrapperProject.GenerateFullPathToTool(Microsoft.Win32.RegistryView)">
            <summary>
            Determing the path to vcbuild.exe
            </summary>
            <returns>path to vcbuild.exe, or null if it's not found</returns>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.VCWrapperProject.TryLocationFromRegistry(Microsoft.Win32.RegistryKey,System.String,System.String,System.String,System.String)">
            <summary>
            Looks up a path from the registry if present, and checks whether VCBuild.exe is there.
            </summary>
            <param name="subKey">Registry key to open</param>
            <param name="valueName">Value under that key to read</param>
            <param name="messageToLogIfNotFound">Low-pri message to log if registry key isn't found</param>
            <param name="relativePathFromValueOnLayout">Relative path from the key value to vcbuild.exe for layout installs</param>
            <param name="relativePathFromValueOnBatch">Relative path from the key value to vcbuild.exe for batch installs</param>
            <returns>Path to vcbuild.exe, or null if it's not found</returns>
            <owner>danmose</owner>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.IntrinsicTask">
            <summary>
            A class that evaluates an ItemGroup or PropertyGroup that is within a target.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.#ctor(System.Xml.XmlElement,Microsoft.Build.BuildEngine.EngineLoggingServices,Microsoft.Build.Framework.BuildEventContext,System.String,Microsoft.Build.BuildEngine.ItemDefinitionLibrary)">
            <summary>
            Creates an IntrinsicTask object around a "task" node
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.ExecuteTask(Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Called to execute a task within a target. This method instantiates the task, sets its parameters, and executes it. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.ExecutePropertyGroup(Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Execute a PropertyGroup element, including each child property
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.ExecuteItemGroup(Microsoft.Build.BuildEngine.Lookup)">
            <summary>
            Execute an ItemGroup element, including each child item expression
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.ExecuteAdd(Microsoft.Build.BuildEngine.BuildItemGroupChildXml,Microsoft.Build.BuildEngine.ItemBucket)">
            <summary>
            Add items to the world. This is the in-target equivalent of an item include expression outside of a target.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.ExecuteRemove(Microsoft.Build.BuildEngine.BuildItemGroupChildXml,Microsoft.Build.BuildEngine.ItemBucket)">
            <summary>
            Remove items from the world. Removes to items that are part of the project manifest are backed up, so 
            they can be reverted when the project is reset after the end of the build.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.ExecuteModify(Microsoft.Build.BuildEngine.BuildItemGroupChildXml,Microsoft.Build.BuildEngine.ItemBucket)">
            <summary>
            Modifies items in the world - specifically, changes their metadata. Changes to items that are part of the project manifest are backed up, so 
            they can be reverted when the project is reset after the end of the build.
            </summary>
            <param name="child"></param>
            <param name="bucket"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.GetBatchableValuesFromProperty(System.Collections.Generic.List{System.String},Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            Adds batchable parameters from a property element into the list. If the property element was
            a task, these would be its raw parameter values.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.GetBatchableValuesFromBuildItemGroupChild(System.Collections.Generic.List{System.String},Microsoft.Build.BuildEngine.BuildItemGroupChildXml)">
            <summary>
            Adds batchable parameters from an item element into the list. If the item element was a task, these
            would be its raw parameter values.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.AddIfNotEmptyString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            If value is not an empty string, adds it to list.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.IntrinsicTask.BackingType">
            <summary>
            Used to discriminate the backing type of this object
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.IntrinsicTask.IsIntrinsicTaskName(System.String)">
            <summary>
            Compares the task name (case sensitively) to see
            if it's an "intrinsic task"
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.EngineFileUtilities.GetFileListEscaped(System.String,System.String)">
            <summary>
            Used for the purposes of evaluating an item specification. Given a filespec that may include wildcard characters * and
            ?, we translate it into an actual list of files. If the input filespec doesn't contain any wildcard characters, and it
            doesn't appear to point to an actual file on disk, then we just give back the input string as an array of length one,
            assuming that it wasn't really intended to be a filename (as items are not required to necessarily represent files).
            </summary>
            <owner>RGoel</owner>
            <param name="filespec">The filespec to evaluate.</param>
            <returns>Array of file paths.</returns>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItemGroupChildXml">
            <summary>
            Encapsulates, as far as possible, any XML behind the child of a BuildItemGroup element
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupChildXml.GetChildren">
            <summary>
            Gets all child elements, ignoring whitespace and comments, and any conditions
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupChildXml.RemoveChildrenByName(System.String)">
            <summary>
            Removes all child elements with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupChildXml.SetChildValue(System.String,System.String)">
            <summary>
            Ensures there's a child element with the specified name and value.
            Disregards any Condition attributes on the children.
            If several children are already present with the specified name, removes all except the last one.
            If a child is present with the specified name, does not modify it if the value is already as specified.
            Returns true if the XML was meaningfully modified.
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ChildType">
            <summary>
            Type of the item group child element
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ChildType.BuildItemAdd">
            <summary>
            Regular item, with Include and possibly Exclude attributes
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ChildType.BuildItemRemove">
            <summary>
            Remove item, with Remove attribute
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ChildType.BuildItemModify">
            <summary>
            Modify item, with no attributes (except possibly Condition)
            </summary>
        </member>
        <member name="F:Microsoft.Build.BuildEngine.ChildType.Any">
            <summary>
            Add, remove, or modify item expression
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.BuildItemGroupXml">
            <summary>
            Encapsulates, as far as possible, any XML behind a BuildItemGroup
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupXml.#ctor(System.Xml.XmlElement)">
            <summary>
            BuildItemGroup element is provided
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.BuildItemGroupXml.#ctor(System.Xml.XmlDocument)">
            <summary>
            BuildItemGroup element is created given a document
            </summary>
        </member>
        <member name="T:Microsoft.Build.BuildEngine.ProjectXmlUtilities">
            <summary>
            Project-related Xml utilities
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.GetValidChildElements(System.Xml.XmlElement)">
            <summary>
            Gets child elements, ignoring whitespace and comments.
            </summary>
            <exception cref="T:Microsoft.Build.BuildEngine.InvalidProjectFileException">Thrown for elements in the wrong namespace, or unexpected XML node types</exception>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowProjectXmlElementChild(System.Xml.XmlNode)">
            <summary>
            Throw an invalid project exception if the child is not an XmlElement
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowProjectNoChildElements(System.Xml.XmlElement)">
            <summary>
            Throw an invalid project exception if there are any child elements at all
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.ThrowProjectInvalidChildElement(System.Xml.XmlNode)">
            <summary>
            Throw an invalid project exception indicating that the child is not valid beneath the element
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowElementName(System.Xml.XmlElement,System.String)">
            <summary>
            Throws an InternalErrorException if the name of the element is not the expected name.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowProjectValidNameAndNamespace(System.Xml.XmlElement)">
            <summary>
            Verifies an element has a valid name, and is in the MSBuild namespace, otherwise throws an InvalidProjectFileException.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowProjectValidNamespace(System.Xml.XmlElement)">
            <summary>
            Verifies that an element is in the MSBuild namespace, otherwise throws an InvalidProjectFileException.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowProjectNoAttributes(System.Xml.XmlElement)">
            <summary>
            If there are any attributes on the element, throws an InvalidProjectFileException complaining that the attribute is not valid on this element.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.VerifyThrowProjectInvalidAttribute(System.Boolean,System.Xml.XmlAttribute)">
            <summary>
            If the condition is false, throws an InvalidProjectFileException complaining that the attribute is not valid on this element.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.ThrowProjectInvalidAttribute(System.Xml.XmlAttribute)">
            <summary>
            Throws an InvalidProjectFileException complaining that the attribute is not valid on this element.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.GetConditionAttribute(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Get the Condition attribute, if any. Optionally, throw an invalid project exception if there are
            any other attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.SetOrRemoveAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Sets the value of an attribute, but if the value to set is null or empty, just
            removes the element. Returns the attribute, or null if it was removed.
            </summary>
        </member>
        <member name="M:Microsoft.Build.BuildEngine.ProjectXmlUtilities.GetAttributeValue(System.Xml.XmlAttribute)">
            <summary>
            Returns the value of the attribute. 
            If the attribute is null, returns an empty string.
            </summary>
        </member>
    </members>
</doc>
